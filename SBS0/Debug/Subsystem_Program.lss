
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d22  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000079  00800100  00800100  00001d96  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002b0  00000000  00000000  00001dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003321  00000000  00000000  00002076  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000eff  00000000  00000000  00005397  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000112f  00000000  00000000  00006296  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005fc  00000000  00000000  000073c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000081e  00000000  00000000  000079c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000202d  00000000  00000000  000081e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000258  00000000  00000000  0000a20f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	08 04       	cpc	r0, r8
      7e:	9a 04       	cpc	r9, r10
      80:	24 05       	cpc	r18, r4
      82:	98 05       	cpc	r25, r8
      84:	d8 05       	cpc	r29, r8
      86:	54 06       	cpc	r5, r20
      88:	d1 06       	cpc	r13, r17
      8a:	6e 07       	cpc	r22, r30
      8c:	14 08       	sbc	r1, r4
      8e:	02 04       	cpc	r0, r2
      90:	1d 09       	sbc	r17, r13

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a9 37       	cpi	r26, 0x79	; 121
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 c8 0b 	call	0x1790	; 0x1790 <main>
      b2:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	30 93 31 01 	sts	0x0131, r19
      d6:	20 93 30 01 	sts	0x0130, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      da:	10 92 34 01 	sts	0x0134, r1
	message.id.std = id;  // populate ID field with ID Tag
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	70 93 2c 01 	sts	0x012C, r23
      e4:	60 93 2b 01 	sts	0x012B, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	20 93 2a 01 	sts	0x012A, r18
	message.dlc = 8;			 // Max length of a CAN message.
      ee:	28 e0       	ldi	r18, 0x08	; 8
      f0:	20 93 2f 01 	sts	0x012F, r18
	mob_number = 4;
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	20 93 6e 01 	sts	0x016E, r18
      fa:	dc 01       	movw	r26, r24
      fc:	e0 e2       	ldi	r30, 0x20	; 32
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	88 e2       	ldi	r24, 0x28	; 40
     102:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     104:	2d 91       	ld	r18, X+
     106:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     108:	e8 17       	cp	r30, r24
     10a:	f9 07       	cpc	r31, r25
     10c:	d9 f7       	brne	.-10     	; 0x104 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     10e:	60 91 6e 01 	lds	r22, 0x016E
     112:	89 e2       	ldi	r24, 0x29	; 41
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     11a:	81 11       	cpse	r24, r1
     11c:	f8 cf       	rjmp	.-16     	; 0x10e <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     11e:	60 91 6e 01 	lds	r22, 0x016E
     122:	89 e2       	ldi	r24, 0x29	; 41
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <can_get_status>
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	c1 f3       	breq	.-16     	; 0x11e <can_send_message+0x50>

	return;
}
     12e:	08 95       	ret

00000130 <decode_command>:

void decode_command(uint8_t* command_array)
{		
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	ec 01       	movw	r28, r24
	uint8_t i, command  = *(command_array + 5);

	switch(command)
     136:	8d 81       	ldd	r24, Y+5	; 0x05
     138:	83 30       	cpi	r24, 0x03	; 3
     13a:	d9 f1       	breq	.+118    	; 0x1b2 <decode_command+0x82>
     13c:	28 f4       	brcc	.+10     	; 0x148 <decode_command+0x18>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	51 f0       	breq	.+20     	; 0x156 <decode_command+0x26>
     142:	82 30       	cpi	r24, 0x02	; 2
     144:	d1 f0       	breq	.+52     	; 0x17a <decode_command+0x4a>
     146:	62 c0       	rjmp	.+196    	; 0x20c <decode_command+0xdc>
     148:	85 30       	cpi	r24, 0x05	; 5
     14a:	09 f4       	brne	.+2      	; 0x14e <decode_command+0x1e>
     14c:	44 c0       	rjmp	.+136    	; 0x1d6 <decode_command+0xa6>
     14e:	87 30       	cpi	r24, 0x07	; 7
     150:	09 f4       	brne	.+2      	; 0x154 <decode_command+0x24>
     152:	4f c0       	rjmp	.+158    	; 0x1f2 <decode_command+0xc2>
     154:	5b c0       	rjmp	.+182    	; 0x20c <decode_command+0xdc>
	{
		case REQ_RESPONSE :
			LED_toggle(LED3);	//Toggle LED3 when a response is requested.
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
			delay_ms(100);
     15c:	84 e6       	ldi	r24, 0x64	; 100
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
			LED_toggle(LED3);
     164:	83 e0       	ldi	r24, 0x03	; 3
     166:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
			delay_ms(100);
     16a:	84 e6       	ldi	r24, 0x64	; 100
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
			send_now = 1;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	80 93 3e 01 	sts	0x013E, r24
			return;
     178:	49 c0       	rjmp	.+146    	; 0x20c <decode_command+0xdc>
		case REQ_DATA :
			LED_toggle(LED7);	//Toggle LED7 when data is requested.
     17a:	87 e0       	ldi	r24, 0x07	; 7
     17c:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
			delay_ms(100);
     180:	84 e6       	ldi	r24, 0x64	; 100
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
			LED_toggle(LED7);
     188:	87 e0       	ldi	r24, 0x07	; 7
     18a:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
			delay_ms(100);
     18e:	84 e6       	ldi	r24, 0x64	; 100
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
			send_data = 1;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 65 01 	sts	0x0165, r24
     19c:	de 01       	movw	r26, r28
     19e:	e5 e3       	ldi	r30, 0x35	; 53
     1a0:	f1 e0       	ldi	r31, 0x01	; 1
     1a2:	8d e3       	ldi	r24, 0x3D	; 61
     1a4:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     1a6:	2d 91       	ld	r18, X+
     1a8:	21 93       	st	Z+, r18
			LED_toggle(LED7);	//Toggle LED7 when data is requested.
			delay_ms(100);
			LED_toggle(LED7);
			delay_ms(100);
			send_data = 1;
			for (i = 0; i < 8; i ++)
     1aa:	e8 17       	cp	r30, r24
     1ac:	f9 07       	cpc	r31, r25
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <decode_command+0x76>
     1b0:	2d c0       	rjmp	.+90     	; 0x20c <decode_command+0xdc>
			{
				data_req_arr[i] = *(command_array + i);
			}
			return;
		case REQ_HK :
			LED_toggle(LED6);	//Toggle LED6 when housekeeping was requested.
     1b2:	86 e0       	ldi	r24, 0x06	; 6
     1b4:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
			delay_ms(100);
     1b8:	84 e6       	ldi	r24, 0x64	; 100
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
			LED_toggle(LED6);
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
			delay_ms(100);
     1c6:	84 e6       	ldi	r24, 0x64	; 100
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
			send_hk = 1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 4e 01 	sts	0x014E, r24
			return;
     1d4:	1b c0       	rjmp	.+54     	; 0x20c <decode_command+0xdc>
		case REQ_READ:
			read_response = 1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 45 01 	sts	0x0145, r24
     1dc:	de 01       	movw	r26, r28
     1de:	e0 e7       	ldi	r30, 0x70	; 112
     1e0:	f1 e0       	ldi	r31, 0x01	; 1
     1e2:	88 e7       	ldi	r24, 0x78	; 120
     1e4:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1e6:	2d 91       	ld	r18, X+
     1e8:	21 93       	st	Z+, r18
			delay_ms(100);
			send_hk = 1;
			return;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1ea:	e8 17       	cp	r30, r24
     1ec:	f9 07       	cpc	r31, r25
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <decode_command+0xb6>
     1f0:	0d c0       	rjmp	.+26     	; 0x20c <decode_command+0xdc>
			{
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	80 93 28 01 	sts	0x0128, r24
     1f8:	de 01       	movw	r26, r28
     1fa:	e0 e0       	ldi	r30, 0x00	; 0
     1fc:	f1 e0       	ldi	r31, 0x01	; 1
     1fe:	88 e0       	ldi	r24, 0x08	; 8
     200:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     202:	2d 91       	ld	r18, X+
     204:	21 93       	st	Z+, r18
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     206:	e8 17       	cp	r30, r24
     208:	f9 07       	cpc	r31, r25
     20a:	d9 f7       	brne	.-10     	; 0x202 <decode_command+0xd2>
		case SMALLTYPE_DEFAULT :
			return;
		default:
			return;
	}
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     212:	10 92 34 01 	sts	0x0134, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     216:	95 e0       	ldi	r25, 0x05	; 5
     218:	90 93 2a 01 	sts	0x012A, r25
	message.dlc = 8;			 // Max length of a CAN message.
     21c:	98 e0       	ldi	r25, 0x08	; 8
     21e:	90 93 2f 01 	sts	0x012F, r25
	mob_number = mailbox;
     222:	80 93 6e 01 	sts	0x016E, r24
	
	if(mailbox == 0)
     226:	81 11       	cpse	r24, r1
     228:	0e c0       	rjmp	.+28     	; 0x246 <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     22a:	86 e4       	ldi	r24, 0x46	; 70
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	90 93 31 01 	sts	0x0131, r25
     232:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     236:	80 91 57 01 	lds	r24, 0x0157
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	90 93 2c 01 	sts	0x012C, r25
     240:	80 93 2b 01 	sts	0x012B, r24
		return;
     244:	08 95       	ret
	}
	if(mailbox == 1)
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	71 f4       	brne	.+28     	; 0x266 <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	90 93 31 01 	sts	0x0131, r25
     252:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[1];
     256:	80 91 58 01 	lds	r24, 0x0158
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	90 93 2c 01 	sts	0x012C, r25
     260:	80 93 2b 01 	sts	0x012B, r24
		return;
     264:	08 95       	ret
	}
	if(mailbox == 2)
     266:	82 30       	cpi	r24, 0x02	; 2
     268:	71 f4       	brne	.+28     	; 0x286 <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     26a:	80 e1       	ldi	r24, 0x10	; 16
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	90 93 31 01 	sts	0x0131, r25
     272:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[2];
     276:	80 91 59 01 	lds	r24, 0x0159
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	90 93 2c 01 	sts	0x012C, r25
     280:	80 93 2b 01 	sts	0x012B, r24
		return;
     284:	08 95       	ret
	}
	if(mailbox == 3)
     286:	83 30       	cpi	r24, 0x03	; 3
     288:	71 f4       	brne	.+28     	; 0x2a6 <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     28a:	8d e5       	ldi	r24, 0x5D	; 93
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	90 93 31 01 	sts	0x0131, r25
     292:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[3];
     296:	80 91 5a 01 	lds	r24, 0x015A
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	90 93 2c 01 	sts	0x012C, r25
     2a0:	80 93 2b 01 	sts	0x012B, r24
		return;
     2a4:	08 95       	ret
	}
	if(mailbox == 5)
     2a6:	85 30       	cpi	r24, 0x05	; 5
     2a8:	69 f4       	brne	.+26     	; 0x2c4 <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     2aa:	86 e6       	ldi	r24, 0x66	; 102
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	90 93 31 01 	sts	0x0131, r25
     2b2:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[5];
     2b6:	80 91 5c 01 	lds	r24, 0x015C
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	90 93 2c 01 	sts	0x012C, r25
     2c0:	80 93 2b 01 	sts	0x012B, r24
     2c4:	08 95       	ret

000002c6 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     2c6:	81 11       	cpse	r24, r1
     2c8:	20 c0       	rjmp	.+64     	; 0x30a <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2ca:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2ce:	85 e0       	ldi	r24, 0x05	; 5
     2d0:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	80 93 2f 01 	sts	0x012F, r24
		mob_number = mailbox;
     2da:	10 92 6e 01 	sts	0x016E, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     2de:	86 e4       	ldi	r24, 0x46	; 70
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	90 93 31 01 	sts	0x0131, r25
     2e6:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2ea:	80 91 57 01 	lds	r24, 0x0157
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 2c 01 	sts	0x012C, r25
     2f4:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     2f8:	60 91 6e 01 	lds	r22, 0x016E
     2fc:	89 e2       	ldi	r24, 0x29	; 41
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     304:	81 11       	cpse	r24, r1
     306:	f8 cf       	rjmp	.-16     	; 0x2f8 <clean_up_msg+0x32>
     308:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	01 f5       	brne	.+64     	; 0x34e <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     30e:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     312:	85 e0       	ldi	r24, 0x05	; 5
     314:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     318:	88 e0       	ldi	r24, 0x08	; 8
     31a:	80 93 2f 01 	sts	0x012F, r24
		mob_number = mailbox;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data1[0];
     324:	88 e0       	ldi	r24, 0x08	; 8
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	90 93 31 01 	sts	0x0131, r25
     32c:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID1;
     330:	85 e1       	ldi	r24, 0x15	; 21
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 2c 01 	sts	0x012C, r25
     338:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     33c:	60 91 6e 01 	lds	r22, 0x016E
     340:	89 e2       	ldi	r24, 0x29	; 41
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     348:	81 11       	cpse	r24, r1
     34a:	f8 cf       	rjmp	.-16     	; 0x33c <clean_up_msg+0x76>
     34c:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     34e:	82 30       	cpi	r24, 0x02	; 2
     350:	09 f5       	brne	.+66     	; 0x394 <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     352:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     35c:	88 e0       	ldi	r24, 0x08	; 8
     35e:	80 93 2f 01 	sts	0x012F, r24
		mob_number = mailbox;
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data2[0];
     368:	80 e1       	ldi	r24, 0x10	; 16
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	90 93 31 01 	sts	0x0131, r25
     370:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[2];
     374:	80 91 59 01 	lds	r24, 0x0159
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	90 93 2c 01 	sts	0x012C, r25
     37e:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     382:	60 91 6e 01 	lds	r22, 0x016E
     386:	89 e2       	ldi	r24, 0x29	; 41
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     38e:	81 11       	cpse	r24, r1
     390:	f8 cf       	rjmp	.-16     	; 0x382 <clean_up_msg+0xbc>
     392:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     394:	83 30       	cpi	r24, 0x03	; 3
     396:	09 f5       	brne	.+66     	; 0x3da <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     398:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     39c:	85 e0       	ldi	r24, 0x05	; 5
     39e:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3a2:	88 e0       	ldi	r24, 0x08	; 8
     3a4:	80 93 2f 01 	sts	0x012F, r24
		mob_number = mailbox;
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data3[0];
     3ae:	8d e5       	ldi	r24, 0x5D	; 93
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	90 93 31 01 	sts	0x0131, r25
     3b6:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[3];
     3ba:	80 91 5a 01 	lds	r24, 0x015A
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	90 93 2c 01 	sts	0x012C, r25
     3c4:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3c8:	60 91 6e 01 	lds	r22, 0x016E
     3cc:	89 e2       	ldi	r24, 0x29	; 41
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     3d4:	81 11       	cpse	r24, r1
     3d6:	f8 cf       	rjmp	.-16     	; 0x3c8 <clean_up_msg+0x102>
     3d8:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     3da:	85 30       	cpi	r24, 0x05	; 5
     3dc:	f1 f4       	brne	.+60     	; 0x41a <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3de:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3e2:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3e6:	98 e0       	ldi	r25, 0x08	; 8
     3e8:	90 93 2f 01 	sts	0x012F, r25
		mob_number = mailbox;
     3ec:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data5[0];
     3f0:	86 e6       	ldi	r24, 0x66	; 102
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	90 93 31 01 	sts	0x0131, r25
     3f8:	80 93 30 01 	sts	0x0130, r24
		message.id.std = id_array[5];
     3fc:	80 91 5c 01 	lds	r24, 0x015C
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	90 93 2c 01 	sts	0x012C, r25
     406:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     40a:	60 91 6e 01 	lds	r22, 0x016E
     40e:	89 e2       	ldi	r24, 0x29	; 41
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     416:	81 11       	cpse	r24, r1
     418:	f8 cf       	rjmp	.-16     	; 0x40a <clean_up_msg+0x144>
     41a:	08 95       	ret

0000041c <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	0e 94 09 01 	call	0x212	; 0x212 <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     426:	60 91 6e 01 	lds	r22, 0x016E
     42a:	89 e2       	ldi	r24, 0x29	; 41
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <can_get_status>
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	11 f1       	breq	.+68     	; 0x47a <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     436:	80 91 32 01 	lds	r24, 0x0132
     43a:	80 32       	cpi	r24, 0x20	; 32
     43c:	d9 f4       	brne	.+54     	; 0x474 <can_check_housekeep+0x58>
     43e:	a0 91 30 01 	lds	r26, 0x0130
     442:	b0 91 31 01 	lds	r27, 0x0131
     446:	c7 e5       	ldi	r28, 0x57	; 87
     448:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     44a:	ef e4       	ldi	r30, 0x4F	; 79
     44c:	f1 e0       	ldi	r31, 0x01	; 1
     44e:	8d 91       	ld	r24, X+
     450:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     452:	ec 17       	cp	r30, r28
     454:	fd 07       	cpc	r31, r29
     456:	d9 f7       	brne	.-10     	; 0x44e <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     458:	80 91 55 01 	lds	r24, 0x0155
     45c:	82 30       	cpi	r24, 0x02	; 2
     45e:	21 f4       	brne	.+8      	; 0x468 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     460:	8f e4       	ldi	r24, 0x4F	; 79
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 98 00 	call	0x130	; 0x130 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     468:	ef e4       	ldi	r30, 0x4F	; 79
     46a:	f1 e0       	ldi	r31, 0x01	; 1
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     46c:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     46e:	ec 17       	cp	r30, r28
     470:	fd 07       	cpc	r31, r29
     472:	e1 f7       	brne	.-8      	; 0x46c <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     474:	85 e0       	ldi	r24, 0x05	; 5
     476:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clean_up_msg>
	}	
	return;
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
     480:	9f 92       	push	r9
     482:	af 92       	push	r10
     484:	bf 92       	push	r11
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     496:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     498:	02 e3       	ldi	r16, 0x32	; 50
     49a:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     49c:	0f 2e       	mov	r0, r31
     49e:	f0 e3       	ldi	r31, 0x30	; 48
     4a0:	af 2e       	mov	r10, r31
     4a2:	f1 e0       	ldi	r31, 0x01	; 1
     4a4:	bf 2e       	mov	r11, r31
     4a6:	f0 2d       	mov	r31, r0
     4a8:	c7 e5       	ldi	r28, 0x57	; 87
     4aa:	d1 e0       	ldi	r29, 0x01	; 1
     4ac:	0f 2e       	mov	r0, r31
     4ae:	ff e4       	ldi	r31, 0x4F	; 79
     4b0:	ef 2e       	mov	r14, r31
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f5 e5       	ldi	r31, 0x55	; 85
     4bc:	cf 2e       	mov	r12, r31
     4be:	f1 e0       	ldi	r31, 0x01	; 1
     4c0:	df 2e       	mov	r13, r31
     4c2:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     4c4:	89 2d       	mov	r24, r9
     4c6:	0e 94 09 01 	call	0x212	; 0x212 <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     4ca:	60 91 6e 01 	lds	r22, 0x016E
     4ce:	89 e2       	ldi	r24, 0x29	; 41
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <can_get_status>
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	e1 f0       	breq	.+56     	; 0x512 <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     4da:	f8 01       	movw	r30, r16
     4dc:	80 81       	ld	r24, Z
     4de:	80 32       	cpi	r24, 0x20	; 32
     4e0:	a9 f4       	brne	.+42     	; 0x50c <can_check_general+0x8c>
     4e2:	f5 01       	movw	r30, r10
     4e4:	a0 81       	ld	r26, Z
     4e6:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4e8:	f7 01       	movw	r30, r14
     4ea:	8d 91       	ld	r24, X+
     4ec:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     4ee:	ec 17       	cp	r30, r28
     4f0:	fd 07       	cpc	r31, r29
     4f2:	d9 f7       	brne	.-10     	; 0x4ea <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     4f4:	f6 01       	movw	r30, r12
     4f6:	80 81       	ld	r24, Z
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	19 f4       	brne	.+6      	; 0x502 <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     4fc:	c7 01       	movw	r24, r14
     4fe:	0e 94 98 00 	call	0x130	; 0x130 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     502:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     504:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     506:	ec 17       	cp	r30, r28
     508:	fd 07       	cpc	r31, r29
     50a:	e1 f7       	brne	.-8      	; 0x504 <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     50c:	89 2d       	mov	r24, r9
     50e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     512:	93 94       	inc	r9
     514:	f4 e0       	ldi	r31, 0x04	; 4
     516:	9f 12       	cpse	r9, r31
     518:	d5 cf       	rjmp	.-86     	; 0x4c4 <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     51a:	0e 94 0e 02 	call	0x41c	; 0x41c <can_check_housekeep>
	
	return;
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	bf 90       	pop	r11
     530:	af 90       	pop	r10
     532:	9f 90       	pop	r9
     534:	08 95       	ret

00000536 <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
	uint8_t i;
	if (SELF_ID == 0)
	{
		id_array[0] = SUB0_ID0;
     53a:	84 e1       	ldi	r24, 0x14	; 20
     53c:	80 93 57 01 	sts	0x0157, r24
		id_array[1] = SUB0_ID1;
     540:	85 e1       	ldi	r24, 0x15	; 21
     542:	80 93 58 01 	sts	0x0158, r24
		id_array[2] = SUB0_ID2;
     546:	86 e1       	ldi	r24, 0x16	; 22
     548:	80 93 59 01 	sts	0x0159, r24
		id_array[3] = SUB0_ID3;
     54c:	87 e1       	ldi	r24, 0x17	; 23
     54e:	80 93 5a 01 	sts	0x015A, r24
		id_array[4] = SUB0_ID4;
     552:	88 e1       	ldi	r24, 0x18	; 24
     554:	80 93 5b 01 	sts	0x015B, r24
		id_array[5] = SUB0_ID5;
     558:	89 e1       	ldi	r24, 0x19	; 25
     55a:	80 93 5c 01 	sts	0x015C, r24
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     55e:	86 e4       	ldi	r24, 0x46	; 70
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	90 93 31 01 	sts	0x0131, r25
     566:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     56a:	10 92 34 01 	sts	0x0134, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     56e:	84 e1       	ldi	r24, 0x14	; 20
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 2c 01 	sts	0x012C, r25
     576:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     57a:	85 e0       	ldi	r24, 0x05	; 5
     57c:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;			 // Max length of a CAN message.
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	80 93 2f 01 	sts	0x012F, r24
	mob_number = 0;
     586:	10 92 6e 01 	sts	0x016E, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     58a:	60 91 6e 01 	lds	r22, 0x016E
     58e:	89 e2       	ldi	r24, 0x29	; 41
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     596:	81 11       	cpse	r24, r1
     598:	f8 cf       	rjmp	.-16     	; 0x58a <can_init_mobs+0x54>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     59a:	88 e0       	ldi	r24, 0x08	; 8
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	90 93 31 01 	sts	0x0131, r25
     5a2:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;
     5a6:	10 92 34 01 	sts	0x0134, r1
	message.id.std = id_array[1];
     5aa:	80 91 58 01 	lds	r24, 0x0158
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	90 93 2c 01 	sts	0x012C, r25
     5b4:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;
     5b8:	85 e0       	ldi	r24, 0x05	; 5
     5ba:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;
     5be:	88 e0       	ldi	r24, 0x08	; 8
     5c0:	80 93 2f 01 	sts	0x012F, r24
	mob_number = 1;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     5ca:	60 91 6e 01 	lds	r22, 0x016E
     5ce:	89 e2       	ldi	r24, 0x29	; 41
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     5d6:	81 11       	cpse	r24, r1
     5d8:	f8 cf       	rjmp	.-16     	; 0x5ca <can_init_mobs+0x94>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     5da:	80 e1       	ldi	r24, 0x10	; 16
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	90 93 31 01 	sts	0x0131, r25
     5e2:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;
     5e6:	10 92 34 01 	sts	0x0134, r1
	message.id.std = id_array[2];
     5ea:	80 91 59 01 	lds	r24, 0x0159
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	90 93 2c 01 	sts	0x012C, r25
     5f4:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;
     5f8:	85 e0       	ldi	r24, 0x05	; 5
     5fa:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;
     5fe:	88 e0       	ldi	r24, 0x08	; 8
     600:	80 93 2f 01 	sts	0x012F, r24
	mob_number = 2;
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     60a:	60 91 6e 01 	lds	r22, 0x016E
     60e:	89 e2       	ldi	r24, 0x29	; 41
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     616:	81 11       	cpse	r24, r1
     618:	f8 cf       	rjmp	.-16     	; 0x60a <can_init_mobs+0xd4>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     61a:	8d e5       	ldi	r24, 0x5D	; 93
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	90 93 31 01 	sts	0x0131, r25
     622:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;
     626:	10 92 34 01 	sts	0x0134, r1
	message.id.std = id_array[3];
     62a:	80 91 5a 01 	lds	r24, 0x015A
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	90 93 2c 01 	sts	0x012C, r25
     634:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;
     638:	85 e0       	ldi	r24, 0x05	; 5
     63a:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;
     63e:	88 e0       	ldi	r24, 0x08	; 8
     640:	80 93 2f 01 	sts	0x012F, r24
	mob_number = 3;
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     64a:	60 91 6e 01 	lds	r22, 0x016E
     64e:	89 e2       	ldi	r24, 0x29	; 41
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     656:	81 11       	cpse	r24, r1
     658:	f8 cf       	rjmp	.-16     	; 0x64a <can_init_mobs+0x114>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     65a:	86 e6       	ldi	r24, 0x66	; 102
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	90 93 31 01 	sts	0x0131, r25
     662:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     666:	10 92 34 01 	sts	0x0134, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     66a:	80 91 5c 01 	lds	r24, 0x015C
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	90 93 2c 01 	sts	0x012C, r25
     674:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     678:	85 e0       	ldi	r24, 0x05	; 5
     67a:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;				// Max length of a CAN message.
     67e:	98 e0       	ldi	r25, 0x08	; 8
     680:	90 93 2f 01 	sts	0x012F, r25
	mob_number = 5;
     684:	80 93 6e 01 	sts	0x016E, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     688:	60 91 6e 01 	lds	r22, 0x016E
     68c:	89 e2       	ldi	r24, 0x29	; 41
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 be 03 	call	0x77c	; 0x77c <can_cmd>
     694:	81 11       	cpse	r24, r1
     696:	f8 cf       	rjmp	.-16     	; 0x688 <can_init_mobs+0x152>
     698:	ef e4       	ldi	r30, 0x4F	; 79
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	88 e1       	ldi	r24, 0x18	; 24
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	c0 e7       	ldi	r28, 0x70	; 112
     6a2:	d1 e0       	ldi	r29, 0x01	; 1
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	51 e0       	ldi	r21, 0x01	; 1
     6a8:	27 e5       	ldi	r18, 0x57	; 87
     6aa:	31 e0       	ldi	r19, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     6ac:	11 92       	st	Z+, r1
		send_arr[i] = 0;
     6ae:	dc 01       	movw	r26, r24
     6b0:	1d 92       	st	X+, r1
     6b2:	cd 01       	movw	r24, r26
		read_arr[i] = 0;
     6b4:	19 92       	st	Y+, r1
		write_arr[i] = 0;
     6b6:	da 01       	movw	r26, r20
     6b8:	1d 92       	st	X+, r1
     6ba:	ad 01       	movw	r20, r26
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     6bc:	e2 17       	cp	r30, r18
     6be:	f3 07       	cpc	r31, r19
     6c0:	a9 f7       	brne	.-22     	; 0x6ac <can_init_mobs+0x176>
		read_arr[i] = 0;
		write_arr[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     6c2:	10 92 3e 01 	sts	0x013E, r1
	send_hk = 0;
     6c6:	10 92 4e 01 	sts	0x014E, r1
	send_data = 0;
     6ca:	10 92 65 01 	sts	0x0165, r1
	read_response = 0;
     6ce:	10 92 45 01 	sts	0x0145, r1
	write_response = 0;
     6d2:	10 92 28 01 	sts	0x0128, r1
	
	return;
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     6dc:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     6de:	ad ee       	ldi	r26, 0xED	; 237
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     6e2:	3e ee       	ldi	r19, 0xEE	; 238
     6e4:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     6e6:	98 2f       	mov	r25, r24
     6e8:	92 95       	swap	r25
     6ea:	90 7f       	andi	r25, 0xF0	; 240
     6ec:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     6ee:	e3 2f       	mov	r30, r19
     6f0:	f2 2f       	mov	r31, r18
     6f2:	11 92       	st	Z+, r1
     6f4:	e8 3f       	cpi	r30, 0xF8	; 248
     6f6:	f1 05       	cpc	r31, r1
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	86 30       	cpi	r24, 0x06	; 6
     6fe:	99 f7       	brne	.-26     	; 0x6e6 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     700:	08 95       	ret

00000702 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     702:	80 91 ef 00 	lds	r24, 0x00EF
     706:	80 7c       	andi	r24, 0xC0	; 192
     708:	61 f0       	breq	.+24     	; 0x722 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     70a:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     70e:	98 2f       	mov	r25, r24
     710:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     712:	28 2f       	mov	r18, r24
     714:	20 76       	andi	r18, 0x60	; 96
     716:	20 32       	cpi	r18, 0x20	; 32
     718:	31 f0       	breq	.+12     	; 0x726 <can_get_mob_status+0x24>
     71a:	90 34       	cpi	r25, 0x40	; 64
     71c:	31 f0       	breq	.+12     	; 0x72a <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     71e:	8f 71       	andi	r24, 0x1F	; 31
     720:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     726:	89 2f       	mov	r24, r25
     728:	08 95       	ret
     72a:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     72c:	08 95       	ret

0000072e <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     72e:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     730:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     732:	aa ef       	ldi	r26, 0xFA	; 250
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	9c 91       	ld	r25, X
     738:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     73a:	8f 5f       	subi	r24, 0xFF	; 255
     73c:	88 30       	cpi	r24, 0x08	; 8
     73e:	d9 f7       	brne	.-10     	; 0x736 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     740:	08 95       	ret

00000742 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	80 93 e2 00 	sts	0x00E2, r24
     74e:	8c e0       	ldi	r24, 0x0C	; 12
     750:	80 93 e3 00 	sts	0x00E3, r24
     754:	87 e3       	ldi	r24, 0x37	; 55
     756:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	08 95       	ret

0000075e <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     75e:	0e 94 a1 03 	call	0x742	; 0x742 <can_fixed_baudrate>
     762:	88 23       	and	r24, r24
     764:	49 f0       	breq	.+18     	; 0x778 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     766:	0e 94 6e 03 	call	0x6dc	; 0x6dc <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     76a:	e8 ed       	ldi	r30, 0xD8	; 216
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	82 60       	ori	r24, 0x02	; 2
     772:	80 83       	st	Z, r24
    return (1);
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     778:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     77a:	08 95       	ret

0000077c <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	1f 92       	push	r1
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     788:	11 96       	adiw	r26, 0x01	; 1
     78a:	8c 91       	ld	r24, X
     78c:	11 97       	sbiw	r26, 0x01	; 1
     78e:	8c 30       	cpi	r24, 0x0C	; 12
     790:	b1 f4       	brne	.+44     	; 0x7be <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     792:	19 96       	adiw	r26, 0x09	; 9
     794:	8c 91       	ld	r24, X
     796:	19 97       	sbiw	r26, 0x09	; 9
     798:	80 36       	cpi	r24, 0x60	; 96
     79a:	69 f4       	brne	.+26     	; 0x7b6 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     79c:	86 2f       	mov	r24, r22
     79e:	82 95       	swap	r24
     7a0:	80 7f       	andi	r24, 0xF0	; 240
     7a2:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     7a6:	ef ee       	ldi	r30, 0xEF	; 239
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 73       	andi	r24, 0x3F	; 63
     7ae:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     7b0:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     7b4:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     7b6:	19 96       	adiw	r26, 0x09	; 9
     7b8:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	07 c6       	rjmp	.+3086   	; 0x13cc <__stack+0xacd>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     7be:	86 2f       	mov	r24, r22
     7c0:	82 95       	swap	r24
     7c2:	80 7f       	andi	r24, 0xF0	; 240
     7c4:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     7c8:	80 91 ef 00 	lds	r24, 0x00EF
     7cc:	80 7c       	andi	r24, 0xC0	; 192
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <can_cmd+0x56>
     7d0:	f9 c5       	rjmp	.+3058   	; 0x13c4 <__stack+0xac5>
    {
      cmd->status = MOB_PENDING; 
     7d2:	80 e6       	ldi	r24, 0x60	; 96
     7d4:	19 96       	adiw	r26, 0x09	; 9
     7d6:	8c 93       	st	X, r24
     7d8:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     7da:	6c 93       	st	X, r22
      Can_clear_mob();
     7dc:	ee ee       	ldi	r30, 0xEE	; 238
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	11 92       	st	Z+, r1
     7e2:	e8 3f       	cpi	r30, 0xF8	; 248
     7e4:	f1 05       	cpc	r31, r1
     7e6:	e1 f7       	brne	.-8      	; 0x7e0 <can_cmd+0x64>
          
      switch (cmd->cmd)
     7e8:	11 96       	adiw	r26, 0x01	; 1
     7ea:	4c 91       	ld	r20, X
     7ec:	11 97       	sbiw	r26, 0x01	; 1
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	fa 01       	movw	r30, r20
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	eb 30       	cpi	r30, 0x0B	; 11
     7f6:	f1 05       	cpc	r31, r1
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <can_cmd+0x80>
     7fa:	e0 c5       	rjmp	.+3008   	; 0x13bc <__stack+0xabd>
     7fc:	e2 5c       	subi	r30, 0xC2	; 194
     7fe:	ff 4f       	sbci	r31, 0xFF	; 255
     800:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     804:	16 96       	adiw	r26, 0x06	; 6
     806:	8c 91       	ld	r24, X
     808:	16 97       	sbiw	r26, 0x06	; 6
     80a:	81 11       	cpse	r24, r1
     80c:	b7 c4       	rjmp	.+2414   	; 0x117c <__stack+0x87d>
     80e:	c8 c4       	rjmp	.+2448   	; 0x11a0 <__stack+0x8a1>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     810:	1b 96       	adiw	r26, 0x0b	; 11
     812:	8c 91       	ld	r24, X
     814:	1b 97       	sbiw	r26, 0x0b	; 11
     816:	88 23       	and	r24, r24
     818:	d9 f1       	breq	.+118    	; 0x890 <can_cmd+0x114>
     81a:	14 96       	adiw	r26, 0x04	; 4
     81c:	9c 91       	ld	r25, X
     81e:	14 97       	sbiw	r26, 0x04	; 4
     820:	92 95       	swap	r25
     822:	96 95       	lsr	r25
     824:	97 70       	andi	r25, 0x07	; 7
     826:	15 96       	adiw	r26, 0x05	; 5
     828:	8c 91       	ld	r24, X
     82a:	15 97       	sbiw	r26, 0x05	; 5
     82c:	88 0f       	add	r24, r24
     82e:	88 0f       	add	r24, r24
     830:	88 0f       	add	r24, r24
     832:	89 0f       	add	r24, r25
     834:	80 93 f3 00 	sts	0x00F3, r24
     838:	13 96       	adiw	r26, 0x03	; 3
     83a:	9c 91       	ld	r25, X
     83c:	13 97       	sbiw	r26, 0x03	; 3
     83e:	92 95       	swap	r25
     840:	96 95       	lsr	r25
     842:	97 70       	andi	r25, 0x07	; 7
     844:	14 96       	adiw	r26, 0x04	; 4
     846:	8c 91       	ld	r24, X
     848:	14 97       	sbiw	r26, 0x04	; 4
     84a:	88 0f       	add	r24, r24
     84c:	88 0f       	add	r24, r24
     84e:	88 0f       	add	r24, r24
     850:	89 0f       	add	r24, r25
     852:	80 93 f2 00 	sts	0x00F2, r24
     856:	12 96       	adiw	r26, 0x02	; 2
     858:	9c 91       	ld	r25, X
     85a:	12 97       	sbiw	r26, 0x02	; 2
     85c:	92 95       	swap	r25
     85e:	96 95       	lsr	r25
     860:	97 70       	andi	r25, 0x07	; 7
     862:	13 96       	adiw	r26, 0x03	; 3
     864:	8c 91       	ld	r24, X
     866:	13 97       	sbiw	r26, 0x03	; 3
     868:	88 0f       	add	r24, r24
     86a:	88 0f       	add	r24, r24
     86c:	88 0f       	add	r24, r24
     86e:	89 0f       	add	r24, r25
     870:	80 93 f1 00 	sts	0x00F1, r24
     874:	12 96       	adiw	r26, 0x02	; 2
     876:	8c 91       	ld	r24, X
     878:	12 97       	sbiw	r26, 0x02	; 2
     87a:	88 0f       	add	r24, r24
     87c:	88 0f       	add	r24, r24
     87e:	88 0f       	add	r24, r24
     880:	80 93 f0 00 	sts	0x00F0, r24
     884:	ef ee       	ldi	r30, 0xEF	; 239
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	80 61       	ori	r24, 0x10	; 16
     88c:	80 83       	st	Z, r24
     88e:	1c c0       	rjmp	.+56     	; 0x8c8 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     890:	12 96       	adiw	r26, 0x02	; 2
     892:	8c 91       	ld	r24, X
     894:	12 97       	sbiw	r26, 0x02	; 2
     896:	86 95       	lsr	r24
     898:	86 95       	lsr	r24
     89a:	86 95       	lsr	r24
     89c:	13 96       	adiw	r26, 0x03	; 3
     89e:	9c 91       	ld	r25, X
     8a0:	13 97       	sbiw	r26, 0x03	; 3
     8a2:	20 e2       	ldi	r18, 0x20	; 32
     8a4:	92 9f       	mul	r25, r18
     8a6:	80 0d       	add	r24, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	80 93 f3 00 	sts	0x00F3, r24
     8ae:	12 96       	adiw	r26, 0x02	; 2
     8b0:	8c 91       	ld	r24, X
     8b2:	12 97       	sbiw	r26, 0x02	; 2
     8b4:	82 95       	swap	r24
     8b6:	88 0f       	add	r24, r24
     8b8:	80 7e       	andi	r24, 0xE0	; 224
     8ba:	80 93 f2 00 	sts	0x00F2, r24
     8be:	ef ee       	ldi	r30, 0xEF	; 239
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	8f 7e       	andi	r24, 0xEF	; 239
     8c6:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     8c8:	16 96       	adiw	r26, 0x06	; 6
     8ca:	8c 91       	ld	r24, X
     8cc:	16 97       	sbiw	r26, 0x06	; 6
     8ce:	88 23       	and	r24, r24
     8d0:	91 f0       	breq	.+36     	; 0x8f6 <can_cmd+0x17a>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	8a ef       	ldi	r24, 0xFA	; 250
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	17 96       	adiw	r26, 0x07	; 7
     8da:	ed 91       	ld	r30, X+
     8dc:	fc 91       	ld	r31, X
     8de:	18 97       	sbiw	r26, 0x08	; 8
     8e0:	e2 0f       	add	r30, r18
     8e2:	f1 1d       	adc	r31, r1
     8e4:	30 81       	ld	r19, Z
     8e6:	fc 01       	movw	r30, r24
     8e8:	30 83       	st	Z, r19
     8ea:	2f 5f       	subi	r18, 0xFF	; 255
     8ec:	16 96       	adiw	r26, 0x06	; 6
     8ee:	3c 91       	ld	r19, X
     8f0:	16 97       	sbiw	r26, 0x06	; 6
     8f2:	23 17       	cp	r18, r19
     8f4:	88 f3       	brcs	.-30     	; 0x8d8 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     8f6:	1a 96       	adiw	r26, 0x0a	; 10
     8f8:	8c 91       	ld	r24, X
     8fa:	1a 97       	sbiw	r26, 0x0a	; 10
     8fc:	88 23       	and	r24, r24
     8fe:	31 f0       	breq	.+12     	; 0x90c <__stack+0xd>
     900:	e0 ef       	ldi	r30, 0xF0	; 240
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	84 60       	ori	r24, 0x04	; 4
     908:	80 83       	st	Z, r24
     90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
            else Can_clear_rtr();    
     90c:	e0 ef       	ldi	r30, 0xF0	; 240
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	8b 7f       	andi	r24, 0xFB	; 251
     914:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     916:	ef ee       	ldi	r30, 0xEF	; 239
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	90 81       	ld	r25, Z
     91c:	16 96       	adiw	r26, 0x06	; 6
     91e:	8c 91       	ld	r24, X
     920:	89 2b       	or	r24, r25
     922:	80 83       	st	Z, r24
          Can_config_tx();
     924:	80 81       	ld	r24, Z
     926:	8f 73       	andi	r24, 0x3F	; 63
     928:	80 83       	st	Z, r24
     92a:	80 81       	ld	r24, Z
     92c:	80 64       	ori	r24, 0x40	; 64
     92e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     930:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     932:	4c c5       	rjmp	.+2712   	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     934:	1b 96       	adiw	r26, 0x0b	; 11
     936:	8c 91       	ld	r24, X
     938:	1b 97       	sbiw	r26, 0x0b	; 11
     93a:	88 23       	and	r24, r24
     93c:	d9 f1       	breq	.+118    	; 0x9b4 <__stack+0xb5>
     93e:	14 96       	adiw	r26, 0x04	; 4
     940:	9c 91       	ld	r25, X
     942:	14 97       	sbiw	r26, 0x04	; 4
     944:	92 95       	swap	r25
     946:	96 95       	lsr	r25
     948:	97 70       	andi	r25, 0x07	; 7
     94a:	15 96       	adiw	r26, 0x05	; 5
     94c:	8c 91       	ld	r24, X
     94e:	15 97       	sbiw	r26, 0x05	; 5
     950:	88 0f       	add	r24, r24
     952:	88 0f       	add	r24, r24
     954:	88 0f       	add	r24, r24
     956:	89 0f       	add	r24, r25
     958:	80 93 f3 00 	sts	0x00F3, r24
     95c:	13 96       	adiw	r26, 0x03	; 3
     95e:	9c 91       	ld	r25, X
     960:	13 97       	sbiw	r26, 0x03	; 3
     962:	92 95       	swap	r25
     964:	96 95       	lsr	r25
     966:	97 70       	andi	r25, 0x07	; 7
     968:	14 96       	adiw	r26, 0x04	; 4
     96a:	8c 91       	ld	r24, X
     96c:	14 97       	sbiw	r26, 0x04	; 4
     96e:	88 0f       	add	r24, r24
     970:	88 0f       	add	r24, r24
     972:	88 0f       	add	r24, r24
     974:	89 0f       	add	r24, r25
     976:	80 93 f2 00 	sts	0x00F2, r24
     97a:	12 96       	adiw	r26, 0x02	; 2
     97c:	9c 91       	ld	r25, X
     97e:	12 97       	sbiw	r26, 0x02	; 2
     980:	92 95       	swap	r25
     982:	96 95       	lsr	r25
     984:	97 70       	andi	r25, 0x07	; 7
     986:	13 96       	adiw	r26, 0x03	; 3
     988:	8c 91       	ld	r24, X
     98a:	13 97       	sbiw	r26, 0x03	; 3
     98c:	88 0f       	add	r24, r24
     98e:	88 0f       	add	r24, r24
     990:	88 0f       	add	r24, r24
     992:	89 0f       	add	r24, r25
     994:	80 93 f1 00 	sts	0x00F1, r24
     998:	12 96       	adiw	r26, 0x02	; 2
     99a:	8c 91       	ld	r24, X
     99c:	12 97       	sbiw	r26, 0x02	; 2
     99e:	88 0f       	add	r24, r24
     9a0:	88 0f       	add	r24, r24
     9a2:	88 0f       	add	r24, r24
     9a4:	80 93 f0 00 	sts	0x00F0, r24
     9a8:	ef ee       	ldi	r30, 0xEF	; 239
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	80 61       	ori	r24, 0x10	; 16
     9b0:	80 83       	st	Z, r24
     9b2:	1c c0       	rjmp	.+56     	; 0x9ec <__stack+0xed>
          else              { Can_set_std_id(cmd->id.std);}
     9b4:	12 96       	adiw	r26, 0x02	; 2
     9b6:	8c 91       	ld	r24, X
     9b8:	12 97       	sbiw	r26, 0x02	; 2
     9ba:	86 95       	lsr	r24
     9bc:	86 95       	lsr	r24
     9be:	86 95       	lsr	r24
     9c0:	13 96       	adiw	r26, 0x03	; 3
     9c2:	9c 91       	ld	r25, X
     9c4:	13 97       	sbiw	r26, 0x03	; 3
     9c6:	f0 e2       	ldi	r31, 0x20	; 32
     9c8:	9f 9f       	mul	r25, r31
     9ca:	80 0d       	add	r24, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	80 93 f3 00 	sts	0x00F3, r24
     9d2:	12 96       	adiw	r26, 0x02	; 2
     9d4:	8c 91       	ld	r24, X
     9d6:	12 97       	sbiw	r26, 0x02	; 2
     9d8:	82 95       	swap	r24
     9da:	88 0f       	add	r24, r24
     9dc:	80 7e       	andi	r24, 0xE0	; 224
     9de:	80 93 f2 00 	sts	0x00F2, r24
     9e2:	ef ee       	ldi	r30, 0xEF	; 239
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	8f 7e       	andi	r24, 0xEF	; 239
     9ea:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9ec:	16 96       	adiw	r26, 0x06	; 6
     9ee:	8c 91       	ld	r24, X
     9f0:	16 97       	sbiw	r26, 0x06	; 6
     9f2:	88 23       	and	r24, r24
     9f4:	91 f0       	breq	.+36     	; 0xa1a <__stack+0x11b>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	8a ef       	ldi	r24, 0xFA	; 250
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	17 96       	adiw	r26, 0x07	; 7
     9fe:	ed 91       	ld	r30, X+
     a00:	fc 91       	ld	r31, X
     a02:	18 97       	sbiw	r26, 0x08	; 8
     a04:	e2 0f       	add	r30, r18
     a06:	f1 1d       	adc	r31, r1
     a08:	30 81       	ld	r19, Z
     a0a:	fc 01       	movw	r30, r24
     a0c:	30 83       	st	Z, r19
     a0e:	2f 5f       	subi	r18, 0xFF	; 255
     a10:	16 96       	adiw	r26, 0x06	; 6
     a12:	3c 91       	ld	r19, X
     a14:	16 97       	sbiw	r26, 0x06	; 6
     a16:	23 17       	cp	r18, r19
     a18:	88 f3       	brcs	.-30     	; 0x9fc <__stack+0xfd>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     a1a:	1a 96       	adiw	r26, 0x0a	; 10
     a1c:	1c 92       	st	X, r1
     a1e:	1a 97       	sbiw	r26, 0x0a	; 10
     a20:	e0 ef       	ldi	r30, 0xF0	; 240
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	8b 7f       	andi	r24, 0xFB	; 251
     a28:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a2a:	ef ee       	ldi	r30, 0xEF	; 239
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	90 81       	ld	r25, Z
     a30:	16 96       	adiw	r26, 0x06	; 6
     a32:	8c 91       	ld	r24, X
     a34:	89 2b       	or	r24, r25
     a36:	80 83       	st	Z, r24
          Can_config_tx();
     a38:	80 81       	ld	r24, Z
     a3a:	8f 73       	andi	r24, 0x3F	; 63
     a3c:	80 83       	st	Z, r24
     a3e:	80 81       	ld	r24, Z
     a40:	80 64       	ori	r24, 0x40	; 64
     a42:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a44:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a46:	c2 c4       	rjmp	.+2436   	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a48:	1b 96       	adiw	r26, 0x0b	; 11
     a4a:	8c 91       	ld	r24, X
     a4c:	1b 97       	sbiw	r26, 0x0b	; 11
     a4e:	88 23       	and	r24, r24
     a50:	d9 f1       	breq	.+118    	; 0xac8 <__stack+0x1c9>
     a52:	14 96       	adiw	r26, 0x04	; 4
     a54:	9c 91       	ld	r25, X
     a56:	14 97       	sbiw	r26, 0x04	; 4
     a58:	92 95       	swap	r25
     a5a:	96 95       	lsr	r25
     a5c:	97 70       	andi	r25, 0x07	; 7
     a5e:	15 96       	adiw	r26, 0x05	; 5
     a60:	8c 91       	ld	r24, X
     a62:	15 97       	sbiw	r26, 0x05	; 5
     a64:	88 0f       	add	r24, r24
     a66:	88 0f       	add	r24, r24
     a68:	88 0f       	add	r24, r24
     a6a:	89 0f       	add	r24, r25
     a6c:	80 93 f3 00 	sts	0x00F3, r24
     a70:	13 96       	adiw	r26, 0x03	; 3
     a72:	9c 91       	ld	r25, X
     a74:	13 97       	sbiw	r26, 0x03	; 3
     a76:	92 95       	swap	r25
     a78:	96 95       	lsr	r25
     a7a:	97 70       	andi	r25, 0x07	; 7
     a7c:	14 96       	adiw	r26, 0x04	; 4
     a7e:	8c 91       	ld	r24, X
     a80:	14 97       	sbiw	r26, 0x04	; 4
     a82:	88 0f       	add	r24, r24
     a84:	88 0f       	add	r24, r24
     a86:	88 0f       	add	r24, r24
     a88:	89 0f       	add	r24, r25
     a8a:	80 93 f2 00 	sts	0x00F2, r24
     a8e:	12 96       	adiw	r26, 0x02	; 2
     a90:	9c 91       	ld	r25, X
     a92:	12 97       	sbiw	r26, 0x02	; 2
     a94:	92 95       	swap	r25
     a96:	96 95       	lsr	r25
     a98:	97 70       	andi	r25, 0x07	; 7
     a9a:	13 96       	adiw	r26, 0x03	; 3
     a9c:	8c 91       	ld	r24, X
     a9e:	13 97       	sbiw	r26, 0x03	; 3
     aa0:	88 0f       	add	r24, r24
     aa2:	88 0f       	add	r24, r24
     aa4:	88 0f       	add	r24, r24
     aa6:	89 0f       	add	r24, r25
     aa8:	80 93 f1 00 	sts	0x00F1, r24
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8c 91       	ld	r24, X
     ab0:	12 97       	sbiw	r26, 0x02	; 2
     ab2:	88 0f       	add	r24, r24
     ab4:	88 0f       	add	r24, r24
     ab6:	88 0f       	add	r24, r24
     ab8:	80 93 f0 00 	sts	0x00F0, r24
     abc:	ef ee       	ldi	r30, 0xEF	; 239
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	80 61       	ori	r24, 0x10	; 16
     ac4:	80 83       	st	Z, r24
     ac6:	1c c0       	rjmp	.+56     	; 0xb00 <__stack+0x201>
          else              { Can_set_std_id(cmd->id.std);}
     ac8:	12 96       	adiw	r26, 0x02	; 2
     aca:	8c 91       	ld	r24, X
     acc:	12 97       	sbiw	r26, 0x02	; 2
     ace:	86 95       	lsr	r24
     ad0:	86 95       	lsr	r24
     ad2:	86 95       	lsr	r24
     ad4:	13 96       	adiw	r26, 0x03	; 3
     ad6:	9c 91       	ld	r25, X
     ad8:	13 97       	sbiw	r26, 0x03	; 3
     ada:	f0 e2       	ldi	r31, 0x20	; 32
     adc:	9f 9f       	mul	r25, r31
     ade:	80 0d       	add	r24, r0
     ae0:	11 24       	eor	r1, r1
     ae2:	80 93 f3 00 	sts	0x00F3, r24
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	8c 91       	ld	r24, X
     aea:	12 97       	sbiw	r26, 0x02	; 2
     aec:	82 95       	swap	r24
     aee:	88 0f       	add	r24, r24
     af0:	80 7e       	andi	r24, 0xE0	; 224
     af2:	80 93 f2 00 	sts	0x00F2, r24
     af6:	ef ee       	ldi	r30, 0xEF	; 239
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	8f 7e       	andi	r24, 0xEF	; 239
     afe:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	1a 96       	adiw	r26, 0x0a	; 10
     b04:	8c 93       	st	X, r24
     b06:	1a 97       	sbiw	r26, 0x0a	; 10
     b08:	e0 ef       	ldi	r30, 0xF0	; 240
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	84 60       	ori	r24, 0x04	; 4
     b10:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b12:	ef ee       	ldi	r30, 0xEF	; 239
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	90 81       	ld	r25, Z
     b18:	16 96       	adiw	r26, 0x06	; 6
     b1a:	8c 91       	ld	r24, X
     b1c:	89 2b       	or	r24, r25
     b1e:	80 83       	st	Z, r24
          Can_config_tx();
     b20:	80 81       	ld	r24, Z
     b22:	8f 73       	andi	r24, 0x3F	; 63
     b24:	80 83       	st	Z, r24
     b26:	80 81       	ld	r24, Z
     b28:	80 64       	ori	r24, 0x40	; 64
     b2a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     b2e:	4e c4       	rjmp	.+2204   	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     b30:	19 82       	std	Y+1, r1	; 0x01
     b32:	9b 81       	ldd	r25, Y+3	; 0x03
     b34:	92 95       	swap	r25
     b36:	96 95       	lsr	r25
     b38:	97 70       	andi	r25, 0x07	; 7
     b3a:	8c 81       	ldd	r24, Y+4	; 0x04
     b3c:	88 0f       	add	r24, r24
     b3e:	88 0f       	add	r24, r24
     b40:	88 0f       	add	r24, r24
     b42:	89 0f       	add	r24, r25
     b44:	80 93 f7 00 	sts	0x00F7, r24
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	92 95       	swap	r25
     b4c:	96 95       	lsr	r25
     b4e:	97 70       	andi	r25, 0x07	; 7
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	88 0f       	add	r24, r24
     b54:	88 0f       	add	r24, r24
     b56:	88 0f       	add	r24, r24
     b58:	89 0f       	add	r24, r25
     b5a:	80 93 f6 00 	sts	0x00F6, r24
     b5e:	99 81       	ldd	r25, Y+1	; 0x01
     b60:	92 95       	swap	r25
     b62:	96 95       	lsr	r25
     b64:	97 70       	andi	r25, 0x07	; 7
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
     b68:	88 0f       	add	r24, r24
     b6a:	88 0f       	add	r24, r24
     b6c:	88 0f       	add	r24, r24
     b6e:	89 0f       	add	r24, r25
     b70:	80 93 f5 00 	sts	0x00F5, r24
     b74:	29 81       	ldd	r18, Y+1	; 0x01
     b76:	22 0f       	add	r18, r18
     b78:	22 0f       	add	r18, r18
     b7a:	22 0f       	add	r18, r18
     b7c:	84 ef       	ldi	r24, 0xF4	; 244
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	fc 01       	movw	r30, r24
     b82:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b84:	ef ee       	ldi	r30, 0xEF	; 239
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	30 81       	ld	r19, Z
     b8a:	16 96       	adiw	r26, 0x06	; 6
     b8c:	2c 91       	ld	r18, X
     b8e:	23 2b       	or	r18, r19
     b90:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b92:	dc 01       	movw	r26, r24
     b94:	2c 91       	ld	r18, X
     b96:	2b 7f       	andi	r18, 0xFB	; 251
     b98:	2c 93       	st	X, r18
          Can_clear_idemsk();
     b9a:	2c 91       	ld	r18, X
     b9c:	2e 7f       	andi	r18, 0xFE	; 254
     b9e:	2c 93       	st	X, r18
          Can_config_rx();       
     ba0:	80 81       	ld	r24, Z
     ba2:	8f 73       	andi	r24, 0x3F	; 63
     ba4:	80 83       	st	Z, r24
     ba6:	80 81       	ld	r24, Z
     ba8:	80 68       	ori	r24, 0x80	; 128
     baa:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     bac:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     bae:	0e c4       	rjmp	.+2076   	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	82 95       	swap	r24
     bb8:	88 0f       	add	r24, r24
     bba:	80 7e       	andi	r24, 0xE0	; 224
     bbc:	81 5e       	subi	r24, 0xE1	; 225
     bbe:	27 ef       	ldi	r18, 0xF7	; 247
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	f9 01       	movw	r30, r18
     bc4:	80 83       	st	Z, r24
     bc6:	49 81       	ldd	r20, Y+1	; 0x01
     bc8:	42 95       	swap	r20
     bca:	44 0f       	add	r20, r20
     bcc:	40 7e       	andi	r20, 0xE0	; 224
     bce:	86 ef       	ldi	r24, 0xF6	; 246
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	fc 01       	movw	r30, r24
     bd4:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     bd6:	12 96       	adiw	r26, 0x02	; 2
     bd8:	4c 91       	ld	r20, X
     bda:	12 97       	sbiw	r26, 0x02	; 2
     bdc:	46 95       	lsr	r20
     bde:	46 95       	lsr	r20
     be0:	46 95       	lsr	r20
     be2:	13 96       	adiw	r26, 0x03	; 3
     be4:	5c 91       	ld	r21, X
     be6:	13 97       	sbiw	r26, 0x03	; 3
     be8:	f0 e2       	ldi	r31, 0x20	; 32
     bea:	5f 9f       	mul	r21, r31
     bec:	40 0d       	add	r20, r0
     bee:	11 24       	eor	r1, r1
     bf0:	40 93 f3 00 	sts	0x00F3, r20
     bf4:	12 96       	adiw	r26, 0x02	; 2
     bf6:	4c 91       	ld	r20, X
     bf8:	12 97       	sbiw	r26, 0x02	; 2
     bfa:	42 95       	swap	r20
     bfc:	44 0f       	add	r20, r20
     bfe:	40 7e       	andi	r20, 0xE0	; 224
     c00:	40 93 f2 00 	sts	0x00F2, r20
     c04:	6f ee       	ldi	r22, 0xEF	; 239
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	fb 01       	movw	r30, r22
     c0a:	40 81       	ld	r20, Z
     c0c:	4f 7e       	andi	r20, 0xEF	; 239
     c0e:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     c10:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     c12:	5b 81       	ldd	r21, Y+3	; 0x03
     c14:	52 95       	swap	r21
     c16:	56 95       	lsr	r21
     c18:	57 70       	andi	r21, 0x07	; 7
     c1a:	4c 81       	ldd	r20, Y+4	; 0x04
     c1c:	44 0f       	add	r20, r20
     c1e:	44 0f       	add	r20, r20
     c20:	44 0f       	add	r20, r20
     c22:	45 0f       	add	r20, r21
     c24:	f9 01       	movw	r30, r18
     c26:	40 83       	st	Z, r20
     c28:	3a 81       	ldd	r19, Y+2	; 0x02
     c2a:	32 95       	swap	r19
     c2c:	36 95       	lsr	r19
     c2e:	37 70       	andi	r19, 0x07	; 7
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	22 0f       	add	r18, r18
     c34:	22 0f       	add	r18, r18
     c36:	22 0f       	add	r18, r18
     c38:	23 0f       	add	r18, r19
     c3a:	fc 01       	movw	r30, r24
     c3c:	20 83       	st	Z, r18
     c3e:	99 81       	ldd	r25, Y+1	; 0x01
     c40:	92 95       	swap	r25
     c42:	96 95       	lsr	r25
     c44:	97 70       	andi	r25, 0x07	; 7
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	88 0f       	add	r24, r24
     c4a:	88 0f       	add	r24, r24
     c4c:	88 0f       	add	r24, r24
     c4e:	89 0f       	add	r24, r25
     c50:	80 93 f5 00 	sts	0x00F5, r24
     c54:	29 81       	ldd	r18, Y+1	; 0x01
     c56:	22 0f       	add	r18, r18
     c58:	22 0f       	add	r18, r18
     c5a:	22 0f       	add	r18, r18
     c5c:	84 ef       	ldi	r24, 0xF4	; 244
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     c64:	fb 01       	movw	r30, r22
     c66:	30 81       	ld	r19, Z
     c68:	16 96       	adiw	r26, 0x06	; 6
     c6a:	2c 91       	ld	r18, X
     c6c:	16 97       	sbiw	r26, 0x06	; 6
     c6e:	23 2b       	or	r18, r19
     c70:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     c72:	1a 96       	adiw	r26, 0x0a	; 10
     c74:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     c76:	dc 01       	movw	r26, r24
     c78:	2c 91       	ld	r18, X
     c7a:	24 60       	ori	r18, 0x04	; 4
     c7c:	2c 93       	st	X, r18
		  Can_clear_rtr();
     c7e:	a0 ef       	ldi	r26, 0xF0	; 240
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	2c 91       	ld	r18, X
     c84:	2b 7f       	andi	r18, 0xFB	; 251
     c86:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     c88:	20 81       	ld	r18, Z
     c8a:	2f 7e       	andi	r18, 0xEF	; 239
     c8c:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c8e:	fc 01       	movw	r30, r24
     c90:	20 81       	ld	r18, Z
     c92:	2e 7f       	andi	r18, 0xFE	; 254
     c94:	20 83       	st	Z, r18
          Can_config_rx();       
     c96:	db 01       	movw	r26, r22
     c98:	8c 91       	ld	r24, X
     c9a:	8f 73       	andi	r24, 0x3F	; 63
     c9c:	8c 93       	st	X, r24
     c9e:	8c 91       	ld	r24, X
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     ca6:	92 c3       	rjmp	.+1828   	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	82 95       	swap	r24
     cb0:	88 0f       	add	r24, r24
     cb2:	80 7e       	andi	r24, 0xE0	; 224
     cb4:	81 5e       	subi	r24, 0xE1	; 225
     cb6:	27 ef       	ldi	r18, 0xF7	; 247
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	f9 01       	movw	r30, r18
     cbc:	80 83       	st	Z, r24
     cbe:	49 81       	ldd	r20, Y+1	; 0x01
     cc0:	42 95       	swap	r20
     cc2:	44 0f       	add	r20, r20
     cc4:	40 7e       	andi	r20, 0xE0	; 224
     cc6:	86 ef       	ldi	r24, 0xF6	; 246
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fc 01       	movw	r30, r24
     ccc:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     cce:	12 96       	adiw	r26, 0x02	; 2
     cd0:	4c 91       	ld	r20, X
     cd2:	12 97       	sbiw	r26, 0x02	; 2
     cd4:	46 95       	lsr	r20
     cd6:	46 95       	lsr	r20
     cd8:	46 95       	lsr	r20
     cda:	13 96       	adiw	r26, 0x03	; 3
     cdc:	5c 91       	ld	r21, X
     cde:	13 97       	sbiw	r26, 0x03	; 3
     ce0:	f0 e2       	ldi	r31, 0x20	; 32
     ce2:	5f 9f       	mul	r21, r31
     ce4:	40 0d       	add	r20, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	40 93 f3 00 	sts	0x00F3, r20
     cec:	12 96       	adiw	r26, 0x02	; 2
     cee:	4c 91       	ld	r20, X
     cf0:	12 97       	sbiw	r26, 0x02	; 2
     cf2:	42 95       	swap	r20
     cf4:	44 0f       	add	r20, r20
     cf6:	40 7e       	andi	r20, 0xE0	; 224
     cf8:	40 93 f2 00 	sts	0x00F2, r20
     cfc:	6f ee       	ldi	r22, 0xEF	; 239
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	fb 01       	movw	r30, r22
     d02:	40 81       	ld	r20, Z
     d04:	4f 7e       	andi	r20, 0xEF	; 239
     d06:	40 83       	st	Z, r20
		
          u8_temp=0; 
     d08:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     d0a:	5b 81       	ldd	r21, Y+3	; 0x03
     d0c:	52 95       	swap	r21
     d0e:	56 95       	lsr	r21
     d10:	57 70       	andi	r21, 0x07	; 7
     d12:	4c 81       	ldd	r20, Y+4	; 0x04
     d14:	44 0f       	add	r20, r20
     d16:	44 0f       	add	r20, r20
     d18:	44 0f       	add	r20, r20
     d1a:	45 0f       	add	r20, r21
     d1c:	f9 01       	movw	r30, r18
     d1e:	40 83       	st	Z, r20
     d20:	3a 81       	ldd	r19, Y+2	; 0x02
     d22:	32 95       	swap	r19
     d24:	36 95       	lsr	r19
     d26:	37 70       	andi	r19, 0x07	; 7
     d28:	2b 81       	ldd	r18, Y+3	; 0x03
     d2a:	22 0f       	add	r18, r18
     d2c:	22 0f       	add	r18, r18
     d2e:	22 0f       	add	r18, r18
     d30:	23 0f       	add	r18, r19
     d32:	fc 01       	movw	r30, r24
     d34:	20 83       	st	Z, r18
     d36:	99 81       	ldd	r25, Y+1	; 0x01
     d38:	92 95       	swap	r25
     d3a:	96 95       	lsr	r25
     d3c:	97 70       	andi	r25, 0x07	; 7
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	88 0f       	add	r24, r24
     d42:	88 0f       	add	r24, r24
     d44:	88 0f       	add	r24, r24
     d46:	89 0f       	add	r24, r25
     d48:	80 93 f5 00 	sts	0x00F5, r24
     d4c:	29 81       	ldd	r18, Y+1	; 0x01
     d4e:	22 0f       	add	r18, r18
     d50:	22 0f       	add	r18, r18
     d52:	22 0f       	add	r18, r18
     d54:	84 ef       	ldi	r24, 0xF4	; 244
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	fc 01       	movw	r30, r24
     d5a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d5c:	fb 01       	movw	r30, r22
     d5e:	30 81       	ld	r19, Z
     d60:	16 96       	adiw	r26, 0x06	; 6
     d62:	2c 91       	ld	r18, X
     d64:	16 97       	sbiw	r26, 0x06	; 6
     d66:	23 2b       	or	r18, r19
     d68:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     d6a:	21 e0       	ldi	r18, 0x01	; 1
     d6c:	1a 96       	adiw	r26, 0x0a	; 10
     d6e:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     d70:	dc 01       	movw	r26, r24
     d72:	2c 91       	ld	r18, X
     d74:	24 60       	ori	r18, 0x04	; 4
     d76:	2c 93       	st	X, r18
		  Can_set_rtr();
     d78:	a0 ef       	ldi	r26, 0xF0	; 240
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	2c 91       	ld	r18, X
     d7e:	24 60       	ori	r18, 0x04	; 4
     d80:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     d82:	20 81       	ld	r18, Z
     d84:	2f 7d       	andi	r18, 0xDF	; 223
     d86:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d88:	fc 01       	movw	r30, r24
     d8a:	20 81       	ld	r18, Z
     d8c:	2e 7f       	andi	r18, 0xFE	; 254
     d8e:	20 83       	st	Z, r18
          Can_config_rx();       
     d90:	db 01       	movw	r26, r22
     d92:	8c 91       	ld	r24, X
     d94:	8f 73       	andi	r24, 0x3F	; 63
     d96:	8c 93       	st	X, r24
     d98:	8c 91       	ld	r24, X
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     da0:	15 c3       	rjmp	.+1578   	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     da2:	1b 96       	adiw	r26, 0x0b	; 11
     da4:	8c 91       	ld	r24, X
     da6:	1b 97       	sbiw	r26, 0x0b	; 11
     da8:	88 23       	and	r24, r24
     daa:	d9 f1       	breq	.+118    	; 0xe22 <__stack+0x523>
     dac:	14 96       	adiw	r26, 0x04	; 4
     dae:	9c 91       	ld	r25, X
     db0:	14 97       	sbiw	r26, 0x04	; 4
     db2:	92 95       	swap	r25
     db4:	96 95       	lsr	r25
     db6:	97 70       	andi	r25, 0x07	; 7
     db8:	15 96       	adiw	r26, 0x05	; 5
     dba:	8c 91       	ld	r24, X
     dbc:	15 97       	sbiw	r26, 0x05	; 5
     dbe:	88 0f       	add	r24, r24
     dc0:	88 0f       	add	r24, r24
     dc2:	88 0f       	add	r24, r24
     dc4:	89 0f       	add	r24, r25
     dc6:	80 93 f3 00 	sts	0x00F3, r24
     dca:	13 96       	adiw	r26, 0x03	; 3
     dcc:	9c 91       	ld	r25, X
     dce:	13 97       	sbiw	r26, 0x03	; 3
     dd0:	92 95       	swap	r25
     dd2:	96 95       	lsr	r25
     dd4:	97 70       	andi	r25, 0x07	; 7
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8c 91       	ld	r24, X
     dda:	14 97       	sbiw	r26, 0x04	; 4
     ddc:	88 0f       	add	r24, r24
     dde:	88 0f       	add	r24, r24
     de0:	88 0f       	add	r24, r24
     de2:	89 0f       	add	r24, r25
     de4:	80 93 f2 00 	sts	0x00F2, r24
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	9c 91       	ld	r25, X
     dec:	12 97       	sbiw	r26, 0x02	; 2
     dee:	92 95       	swap	r25
     df0:	96 95       	lsr	r25
     df2:	97 70       	andi	r25, 0x07	; 7
     df4:	13 96       	adiw	r26, 0x03	; 3
     df6:	8c 91       	ld	r24, X
     df8:	13 97       	sbiw	r26, 0x03	; 3
     dfa:	88 0f       	add	r24, r24
     dfc:	88 0f       	add	r24, r24
     dfe:	88 0f       	add	r24, r24
     e00:	89 0f       	add	r24, r25
     e02:	80 93 f1 00 	sts	0x00F1, r24
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	8c 91       	ld	r24, X
     e0a:	12 97       	sbiw	r26, 0x02	; 2
     e0c:	88 0f       	add	r24, r24
     e0e:	88 0f       	add	r24, r24
     e10:	88 0f       	add	r24, r24
     e12:	80 93 f0 00 	sts	0x00F0, r24
     e16:	ef ee       	ldi	r30, 0xEF	; 239
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 61       	ori	r24, 0x10	; 16
     e1e:	80 83       	st	Z, r24
     e20:	1c c0       	rjmp	.+56     	; 0xe5a <__stack+0x55b>
          else              { Can_set_std_id(cmd->id.std);}
     e22:	12 96       	adiw	r26, 0x02	; 2
     e24:	8c 91       	ld	r24, X
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	86 95       	lsr	r24
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	13 96       	adiw	r26, 0x03	; 3
     e30:	9c 91       	ld	r25, X
     e32:	13 97       	sbiw	r26, 0x03	; 3
     e34:	e0 e2       	ldi	r30, 0x20	; 32
     e36:	9e 9f       	mul	r25, r30
     e38:	80 0d       	add	r24, r0
     e3a:	11 24       	eor	r1, r1
     e3c:	80 93 f3 00 	sts	0x00F3, r24
     e40:	12 96       	adiw	r26, 0x02	; 2
     e42:	8c 91       	ld	r24, X
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	82 95       	swap	r24
     e48:	88 0f       	add	r24, r24
     e4a:	80 7e       	andi	r24, 0xE0	; 224
     e4c:	80 93 f2 00 	sts	0x00F2, r24
     e50:	ef ee       	ldi	r30, 0xEF	; 239
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8f 7e       	andi	r24, 0xEF	; 239
     e58:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	92 95       	swap	r25
     e62:	96 95       	lsr	r25
     e64:	97 70       	andi	r25, 0x07	; 7
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	88 0f       	add	r24, r24
     e6a:	88 0f       	add	r24, r24
     e6c:	88 0f       	add	r24, r24
     e6e:	89 0f       	add	r24, r25
     e70:	80 93 f7 00 	sts	0x00F7, r24
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	92 95       	swap	r25
     e78:	96 95       	lsr	r25
     e7a:	97 70       	andi	r25, 0x07	; 7
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	88 0f       	add	r24, r24
     e80:	88 0f       	add	r24, r24
     e82:	88 0f       	add	r24, r24
     e84:	89 0f       	add	r24, r25
     e86:	80 93 f6 00 	sts	0x00F6, r24
     e8a:	99 81       	ldd	r25, Y+1	; 0x01
     e8c:	92 95       	swap	r25
     e8e:	96 95       	lsr	r25
     e90:	97 70       	andi	r25, 0x07	; 7
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	88 0f       	add	r24, r24
     e96:	88 0f       	add	r24, r24
     e98:	88 0f       	add	r24, r24
     e9a:	89 0f       	add	r24, r25
     e9c:	80 93 f5 00 	sts	0x00F5, r24
     ea0:	29 81       	ldd	r18, Y+1	; 0x01
     ea2:	22 0f       	add	r18, r18
     ea4:	22 0f       	add	r18, r18
     ea6:	22 0f       	add	r18, r18
     ea8:	84 ef       	ldi	r24, 0xF4	; 244
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     eb0:	ef ee       	ldi	r30, 0xEF	; 239
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	30 81       	ld	r19, Z
     eb6:	16 96       	adiw	r26, 0x06	; 6
     eb8:	2c 91       	ld	r18, X
     eba:	23 2b       	or	r18, r19
     ebc:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     ebe:	dc 01       	movw	r26, r24
     ec0:	2c 91       	ld	r18, X
     ec2:	2b 7f       	andi	r18, 0xFB	; 251
     ec4:	2c 93       	st	X, r18
          Can_set_idemsk();
     ec6:	2c 91       	ld	r18, X
     ec8:	21 60       	ori	r18, 0x01	; 1
     eca:	2c 93       	st	X, r18
          Can_config_rx();       
     ecc:	80 81       	ld	r24, Z
     ece:	8f 73       	andi	r24, 0x3F	; 63
     ed0:	80 83       	st	Z, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ed8:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     eda:	78 c2       	rjmp	.+1264   	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     edc:	1b 96       	adiw	r26, 0x0b	; 11
     ede:	8c 91       	ld	r24, X
     ee0:	1b 97       	sbiw	r26, 0x0b	; 11
     ee2:	88 23       	and	r24, r24
     ee4:	d9 f1       	breq	.+118    	; 0xf5c <__stack+0x65d>
     ee6:	14 96       	adiw	r26, 0x04	; 4
     ee8:	9c 91       	ld	r25, X
     eea:	14 97       	sbiw	r26, 0x04	; 4
     eec:	92 95       	swap	r25
     eee:	96 95       	lsr	r25
     ef0:	97 70       	andi	r25, 0x07	; 7
     ef2:	15 96       	adiw	r26, 0x05	; 5
     ef4:	8c 91       	ld	r24, X
     ef6:	15 97       	sbiw	r26, 0x05	; 5
     ef8:	88 0f       	add	r24, r24
     efa:	88 0f       	add	r24, r24
     efc:	88 0f       	add	r24, r24
     efe:	89 0f       	add	r24, r25
     f00:	80 93 f3 00 	sts	0x00F3, r24
     f04:	13 96       	adiw	r26, 0x03	; 3
     f06:	9c 91       	ld	r25, X
     f08:	13 97       	sbiw	r26, 0x03	; 3
     f0a:	92 95       	swap	r25
     f0c:	96 95       	lsr	r25
     f0e:	97 70       	andi	r25, 0x07	; 7
     f10:	14 96       	adiw	r26, 0x04	; 4
     f12:	8c 91       	ld	r24, X
     f14:	14 97       	sbiw	r26, 0x04	; 4
     f16:	88 0f       	add	r24, r24
     f18:	88 0f       	add	r24, r24
     f1a:	88 0f       	add	r24, r24
     f1c:	89 0f       	add	r24, r25
     f1e:	80 93 f2 00 	sts	0x00F2, r24
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	9c 91       	ld	r25, X
     f26:	12 97       	sbiw	r26, 0x02	; 2
     f28:	92 95       	swap	r25
     f2a:	96 95       	lsr	r25
     f2c:	97 70       	andi	r25, 0x07	; 7
     f2e:	13 96       	adiw	r26, 0x03	; 3
     f30:	8c 91       	ld	r24, X
     f32:	13 97       	sbiw	r26, 0x03	; 3
     f34:	88 0f       	add	r24, r24
     f36:	88 0f       	add	r24, r24
     f38:	88 0f       	add	r24, r24
     f3a:	89 0f       	add	r24, r25
     f3c:	80 93 f1 00 	sts	0x00F1, r24
     f40:	12 96       	adiw	r26, 0x02	; 2
     f42:	8c 91       	ld	r24, X
     f44:	12 97       	sbiw	r26, 0x02	; 2
     f46:	88 0f       	add	r24, r24
     f48:	88 0f       	add	r24, r24
     f4a:	88 0f       	add	r24, r24
     f4c:	80 93 f0 00 	sts	0x00F0, r24
     f50:	ef ee       	ldi	r30, 0xEF	; 239
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	80 61       	ori	r24, 0x10	; 16
     f58:	80 83       	st	Z, r24
     f5a:	1c c0       	rjmp	.+56     	; 0xf94 <__stack+0x695>
          else              { Can_set_std_id(cmd->id.std);}
     f5c:	12 96       	adiw	r26, 0x02	; 2
     f5e:	8c 91       	ld	r24, X
     f60:	12 97       	sbiw	r26, 0x02	; 2
     f62:	86 95       	lsr	r24
     f64:	86 95       	lsr	r24
     f66:	86 95       	lsr	r24
     f68:	13 96       	adiw	r26, 0x03	; 3
     f6a:	9c 91       	ld	r25, X
     f6c:	13 97       	sbiw	r26, 0x03	; 3
     f6e:	e0 e2       	ldi	r30, 0x20	; 32
     f70:	9e 9f       	mul	r25, r30
     f72:	80 0d       	add	r24, r0
     f74:	11 24       	eor	r1, r1
     f76:	80 93 f3 00 	sts	0x00F3, r24
     f7a:	12 96       	adiw	r26, 0x02	; 2
     f7c:	8c 91       	ld	r24, X
     f7e:	12 97       	sbiw	r26, 0x02	; 2
     f80:	82 95       	swap	r24
     f82:	88 0f       	add	r24, r24
     f84:	80 7e       	andi	r24, 0xE0	; 224
     f86:	80 93 f2 00 	sts	0x00F2, r24
     f8a:	ef ee       	ldi	r30, 0xEF	; 239
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8f 7e       	andi	r24, 0xEF	; 239
     f92:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	92 95       	swap	r25
     f9c:	96 95       	lsr	r25
     f9e:	97 70       	andi	r25, 0x07	; 7
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	88 0f       	add	r24, r24
     fa4:	88 0f       	add	r24, r24
     fa6:	88 0f       	add	r24, r24
     fa8:	89 0f       	add	r24, r25
     faa:	80 93 f7 00 	sts	0x00F7, r24
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	92 95       	swap	r25
     fb2:	96 95       	lsr	r25
     fb4:	97 70       	andi	r25, 0x07	; 7
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	88 0f       	add	r24, r24
     fba:	88 0f       	add	r24, r24
     fbc:	88 0f       	add	r24, r24
     fbe:	89 0f       	add	r24, r25
     fc0:	80 93 f6 00 	sts	0x00F6, r24
     fc4:	99 81       	ldd	r25, Y+1	; 0x01
     fc6:	92 95       	swap	r25
     fc8:	96 95       	lsr	r25
     fca:	97 70       	andi	r25, 0x07	; 7
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 0f       	add	r24, r24
     fd0:	88 0f       	add	r24, r24
     fd2:	88 0f       	add	r24, r24
     fd4:	89 0f       	add	r24, r25
     fd6:	80 93 f5 00 	sts	0x00F5, r24
     fda:	29 81       	ldd	r18, Y+1	; 0x01
     fdc:	22 0f       	add	r18, r18
     fde:	22 0f       	add	r18, r18
     fe0:	22 0f       	add	r18, r18
     fe2:	84 ef       	ldi	r24, 0xF4	; 244
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     fea:	ef ee       	ldi	r30, 0xEF	; 239
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	30 81       	ld	r19, Z
     ff0:	16 96       	adiw	r26, 0x06	; 6
     ff2:	2c 91       	ld	r18, X
     ff4:	16 97       	sbiw	r26, 0x06	; 6
     ff6:	23 2b       	or	r18, r19
     ff8:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     ffa:	1a 96       	adiw	r26, 0x0a	; 10
     ffc:	1c 92       	st	X, r1
     ffe:	dc 01       	movw	r26, r24
    1000:	2c 91       	ld	r18, X
    1002:	24 60       	ori	r18, 0x04	; 4
    1004:	2c 93       	st	X, r18
    1006:	a0 ef       	ldi	r26, 0xF0	; 240
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	2c 91       	ld	r18, X
    100c:	2b 7f       	andi	r18, 0xFB	; 251
    100e:	2c 93       	st	X, r18
          Can_set_idemsk();
    1010:	dc 01       	movw	r26, r24
    1012:	2c 91       	ld	r18, X
    1014:	21 60       	ori	r18, 0x01	; 1
    1016:	2c 93       	st	X, r18
          Can_config_rx();       
    1018:	80 81       	ld	r24, Z
    101a:	8f 73       	andi	r24, 0x3F	; 63
    101c:	80 83       	st	Z, r24
    101e:	80 81       	ld	r24, Z
    1020:	80 68       	ori	r24, 0x80	; 128
    1022:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1024:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1026:	d2 c1       	rjmp	.+932    	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1028:	1b 96       	adiw	r26, 0x0b	; 11
    102a:	8c 91       	ld	r24, X
    102c:	1b 97       	sbiw	r26, 0x0b	; 11
    102e:	88 23       	and	r24, r24
    1030:	d9 f1       	breq	.+118    	; 0x10a8 <__stack+0x7a9>
    1032:	14 96       	adiw	r26, 0x04	; 4
    1034:	9c 91       	ld	r25, X
    1036:	14 97       	sbiw	r26, 0x04	; 4
    1038:	92 95       	swap	r25
    103a:	96 95       	lsr	r25
    103c:	97 70       	andi	r25, 0x07	; 7
    103e:	15 96       	adiw	r26, 0x05	; 5
    1040:	8c 91       	ld	r24, X
    1042:	15 97       	sbiw	r26, 0x05	; 5
    1044:	88 0f       	add	r24, r24
    1046:	88 0f       	add	r24, r24
    1048:	88 0f       	add	r24, r24
    104a:	89 0f       	add	r24, r25
    104c:	80 93 f3 00 	sts	0x00F3, r24
    1050:	13 96       	adiw	r26, 0x03	; 3
    1052:	9c 91       	ld	r25, X
    1054:	13 97       	sbiw	r26, 0x03	; 3
    1056:	92 95       	swap	r25
    1058:	96 95       	lsr	r25
    105a:	97 70       	andi	r25, 0x07	; 7
    105c:	14 96       	adiw	r26, 0x04	; 4
    105e:	8c 91       	ld	r24, X
    1060:	14 97       	sbiw	r26, 0x04	; 4
    1062:	88 0f       	add	r24, r24
    1064:	88 0f       	add	r24, r24
    1066:	88 0f       	add	r24, r24
    1068:	89 0f       	add	r24, r25
    106a:	80 93 f2 00 	sts	0x00F2, r24
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	9c 91       	ld	r25, X
    1072:	12 97       	sbiw	r26, 0x02	; 2
    1074:	92 95       	swap	r25
    1076:	96 95       	lsr	r25
    1078:	97 70       	andi	r25, 0x07	; 7
    107a:	13 96       	adiw	r26, 0x03	; 3
    107c:	8c 91       	ld	r24, X
    107e:	13 97       	sbiw	r26, 0x03	; 3
    1080:	88 0f       	add	r24, r24
    1082:	88 0f       	add	r24, r24
    1084:	88 0f       	add	r24, r24
    1086:	89 0f       	add	r24, r25
    1088:	80 93 f1 00 	sts	0x00F1, r24
    108c:	12 96       	adiw	r26, 0x02	; 2
    108e:	8c 91       	ld	r24, X
    1090:	12 97       	sbiw	r26, 0x02	; 2
    1092:	88 0f       	add	r24, r24
    1094:	88 0f       	add	r24, r24
    1096:	88 0f       	add	r24, r24
    1098:	80 93 f0 00 	sts	0x00F0, r24
    109c:	ef ee       	ldi	r30, 0xEF	; 239
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 61       	ori	r24, 0x10	; 16
    10a4:	80 83       	st	Z, r24
    10a6:	1c c0       	rjmp	.+56     	; 0x10e0 <__stack+0x7e1>
          else              { Can_set_std_id(cmd->id.std);}
    10a8:	12 96       	adiw	r26, 0x02	; 2
    10aa:	8c 91       	ld	r24, X
    10ac:	12 97       	sbiw	r26, 0x02	; 2
    10ae:	86 95       	lsr	r24
    10b0:	86 95       	lsr	r24
    10b2:	86 95       	lsr	r24
    10b4:	13 96       	adiw	r26, 0x03	; 3
    10b6:	9c 91       	ld	r25, X
    10b8:	13 97       	sbiw	r26, 0x03	; 3
    10ba:	e0 e2       	ldi	r30, 0x20	; 32
    10bc:	9e 9f       	mul	r25, r30
    10be:	80 0d       	add	r24, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	80 93 f3 00 	sts	0x00F3, r24
    10c6:	12 96       	adiw	r26, 0x02	; 2
    10c8:	8c 91       	ld	r24, X
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	82 95       	swap	r24
    10ce:	88 0f       	add	r24, r24
    10d0:	80 7e       	andi	r24, 0xE0	; 224
    10d2:	80 93 f2 00 	sts	0x00F2, r24
    10d6:	ef ee       	ldi	r30, 0xEF	; 239
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8f 7e       	andi	r24, 0xEF	; 239
    10de:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	92 95       	swap	r25
    10e8:	96 95       	lsr	r25
    10ea:	97 70       	andi	r25, 0x07	; 7
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	88 0f       	add	r24, r24
    10f0:	88 0f       	add	r24, r24
    10f2:	88 0f       	add	r24, r24
    10f4:	89 0f       	add	r24, r25
    10f6:	80 93 f7 00 	sts	0x00F7, r24
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	92 95       	swap	r25
    10fe:	96 95       	lsr	r25
    1100:	97 70       	andi	r25, 0x07	; 7
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	88 0f       	add	r24, r24
    1106:	88 0f       	add	r24, r24
    1108:	88 0f       	add	r24, r24
    110a:	89 0f       	add	r24, r25
    110c:	80 93 f6 00 	sts	0x00F6, r24
    1110:	99 81       	ldd	r25, Y+1	; 0x01
    1112:	92 95       	swap	r25
    1114:	96 95       	lsr	r25
    1116:	97 70       	andi	r25, 0x07	; 7
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 0f       	add	r24, r24
    111c:	88 0f       	add	r24, r24
    111e:	88 0f       	add	r24, r24
    1120:	89 0f       	add	r24, r25
    1122:	80 93 f5 00 	sts	0x00F5, r24
    1126:	29 81       	ldd	r18, Y+1	; 0x01
    1128:	22 0f       	add	r18, r18
    112a:	22 0f       	add	r18, r18
    112c:	22 0f       	add	r18, r18
    112e:	84 ef       	ldi	r24, 0xF4	; 244
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1136:	ef ee       	ldi	r30, 0xEF	; 239
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	30 81       	ld	r19, Z
    113c:	16 96       	adiw	r26, 0x06	; 6
    113e:	2c 91       	ld	r18, X
    1140:	16 97       	sbiw	r26, 0x06	; 6
    1142:	23 2b       	or	r18, r19
    1144:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	1a 96       	adiw	r26, 0x0a	; 10
    114a:	2c 93       	st	X, r18
    114c:	dc 01       	movw	r26, r24
    114e:	2c 91       	ld	r18, X
    1150:	24 60       	ori	r18, 0x04	; 4
    1152:	2c 93       	st	X, r18
    1154:	a0 ef       	ldi	r26, 0xF0	; 240
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	2c 91       	ld	r18, X
    115a:	24 60       	ori	r18, 0x04	; 4
    115c:	2c 93       	st	X, r18
          Can_clear_rplv();
    115e:	20 81       	ld	r18, Z
    1160:	2f 7d       	andi	r18, 0xDF	; 223
    1162:	20 83       	st	Z, r18
          Can_set_idemsk();
    1164:	dc 01       	movw	r26, r24
    1166:	2c 91       	ld	r18, X
    1168:	21 60       	ori	r18, 0x01	; 1
    116a:	2c 93       	st	X, r18
          Can_config_rx();       
    116c:	80 81       	ld	r24, Z
    116e:	8f 73       	andi	r24, 0x3F	; 63
    1170:	80 83       	st	Z, r24
    1172:	80 81       	ld	r24, Z
    1174:	80 68       	ori	r24, 0x80	; 128
    1176:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1178:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    117a:	28 c1       	rjmp	.+592    	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	8a ef       	ldi	r24, 0xFA	; 250
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	17 96       	adiw	r26, 0x07	; 7
    1184:	ed 91       	ld	r30, X+
    1186:	fc 91       	ld	r31, X
    1188:	18 97       	sbiw	r26, 0x08	; 8
    118a:	e2 0f       	add	r30, r18
    118c:	f1 1d       	adc	r31, r1
    118e:	30 81       	ld	r19, Z
    1190:	fc 01       	movw	r30, r24
    1192:	30 83       	st	Z, r19
    1194:	2f 5f       	subi	r18, 0xFF	; 255
    1196:	16 96       	adiw	r26, 0x06	; 6
    1198:	3c 91       	ld	r19, X
    119a:	16 97       	sbiw	r26, 0x06	; 6
    119c:	23 17       	cp	r18, r19
    119e:	88 f3       	brcs	.-30     	; 0x1182 <__stack+0x883>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    11a0:	19 82       	std	Y+1, r1	; 0x01
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	92 95       	swap	r25
    11a6:	96 95       	lsr	r25
    11a8:	97 70       	andi	r25, 0x07	; 7
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	88 0f       	add	r24, r24
    11ae:	88 0f       	add	r24, r24
    11b0:	88 0f       	add	r24, r24
    11b2:	89 0f       	add	r24, r25
    11b4:	80 93 f7 00 	sts	0x00F7, r24
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	92 95       	swap	r25
    11bc:	96 95       	lsr	r25
    11be:	97 70       	andi	r25, 0x07	; 7
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 0f       	add	r24, r24
    11c4:	88 0f       	add	r24, r24
    11c6:	88 0f       	add	r24, r24
    11c8:	89 0f       	add	r24, r25
    11ca:	80 93 f6 00 	sts	0x00F6, r24
    11ce:	99 81       	ldd	r25, Y+1	; 0x01
    11d0:	92 95       	swap	r25
    11d2:	96 95       	lsr	r25
    11d4:	97 70       	andi	r25, 0x07	; 7
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 0f       	add	r24, r24
    11da:	88 0f       	add	r24, r24
    11dc:	88 0f       	add	r24, r24
    11de:	89 0f       	add	r24, r25
    11e0:	80 93 f5 00 	sts	0x00F5, r24
    11e4:	29 81       	ldd	r18, Y+1	; 0x01
    11e6:	22 0f       	add	r18, r18
    11e8:	22 0f       	add	r18, r18
    11ea:	22 0f       	add	r18, r18
    11ec:	84 ef       	ldi	r24, 0xF4	; 244
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    11f4:	ef ee       	ldi	r30, 0xEF	; 239
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	30 81       	ld	r19, Z
    11fa:	16 96       	adiw	r26, 0x06	; 6
    11fc:	2c 91       	ld	r18, X
    11fe:	16 97       	sbiw	r26, 0x06	; 6
    1200:	23 2b       	or	r18, r19
    1202:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	1a 96       	adiw	r26, 0x0a	; 10
    1208:	2c 93       	st	X, r18
    120a:	dc 01       	movw	r26, r24
    120c:	2c 91       	ld	r18, X
    120e:	24 60       	ori	r18, 0x04	; 4
    1210:	2c 93       	st	X, r18
    1212:	a0 ef       	ldi	r26, 0xF0	; 240
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	2c 91       	ld	r18, X
    1218:	24 60       	ori	r18, 0x04	; 4
    121a:	2c 93       	st	X, r18
          Can_set_rplv();
    121c:	20 81       	ld	r18, Z
    121e:	20 62       	ori	r18, 0x20	; 32
    1220:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1222:	dc 01       	movw	r26, r24
    1224:	2c 91       	ld	r18, X
    1226:	2e 7f       	andi	r18, 0xFE	; 254
    1228:	2c 93       	st	X, r18
          Can_config_rx();       
    122a:	80 81       	ld	r24, Z
    122c:	8f 73       	andi	r24, 0x3F	; 63
    122e:	80 83       	st	Z, r24
    1230:	80 81       	ld	r24, Z
    1232:	80 68       	ori	r24, 0x80	; 128
    1234:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1236:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    1238:	c9 c0       	rjmp	.+402    	; 0x13cc <__stack+0xacd>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    123a:	1b 96       	adiw	r26, 0x0b	; 11
    123c:	8c 91       	ld	r24, X
    123e:	1b 97       	sbiw	r26, 0x0b	; 11
    1240:	88 23       	and	r24, r24
    1242:	d9 f1       	breq	.+118    	; 0x12ba <__stack+0x9bb>
    1244:	14 96       	adiw	r26, 0x04	; 4
    1246:	9c 91       	ld	r25, X
    1248:	14 97       	sbiw	r26, 0x04	; 4
    124a:	92 95       	swap	r25
    124c:	96 95       	lsr	r25
    124e:	97 70       	andi	r25, 0x07	; 7
    1250:	15 96       	adiw	r26, 0x05	; 5
    1252:	8c 91       	ld	r24, X
    1254:	15 97       	sbiw	r26, 0x05	; 5
    1256:	88 0f       	add	r24, r24
    1258:	88 0f       	add	r24, r24
    125a:	88 0f       	add	r24, r24
    125c:	89 0f       	add	r24, r25
    125e:	80 93 f3 00 	sts	0x00F3, r24
    1262:	13 96       	adiw	r26, 0x03	; 3
    1264:	9c 91       	ld	r25, X
    1266:	13 97       	sbiw	r26, 0x03	; 3
    1268:	92 95       	swap	r25
    126a:	96 95       	lsr	r25
    126c:	97 70       	andi	r25, 0x07	; 7
    126e:	14 96       	adiw	r26, 0x04	; 4
    1270:	8c 91       	ld	r24, X
    1272:	14 97       	sbiw	r26, 0x04	; 4
    1274:	88 0f       	add	r24, r24
    1276:	88 0f       	add	r24, r24
    1278:	88 0f       	add	r24, r24
    127a:	89 0f       	add	r24, r25
    127c:	80 93 f2 00 	sts	0x00F2, r24
    1280:	12 96       	adiw	r26, 0x02	; 2
    1282:	9c 91       	ld	r25, X
    1284:	12 97       	sbiw	r26, 0x02	; 2
    1286:	92 95       	swap	r25
    1288:	96 95       	lsr	r25
    128a:	97 70       	andi	r25, 0x07	; 7
    128c:	13 96       	adiw	r26, 0x03	; 3
    128e:	8c 91       	ld	r24, X
    1290:	13 97       	sbiw	r26, 0x03	; 3
    1292:	88 0f       	add	r24, r24
    1294:	88 0f       	add	r24, r24
    1296:	88 0f       	add	r24, r24
    1298:	89 0f       	add	r24, r25
    129a:	80 93 f1 00 	sts	0x00F1, r24
    129e:	12 96       	adiw	r26, 0x02	; 2
    12a0:	8c 91       	ld	r24, X
    12a2:	12 97       	sbiw	r26, 0x02	; 2
    12a4:	88 0f       	add	r24, r24
    12a6:	88 0f       	add	r24, r24
    12a8:	88 0f       	add	r24, r24
    12aa:	80 93 f0 00 	sts	0x00F0, r24
    12ae:	ef ee       	ldi	r30, 0xEF	; 239
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 61       	ori	r24, 0x10	; 16
    12b6:	80 83       	st	Z, r24
    12b8:	1c c0       	rjmp	.+56     	; 0x12f2 <__stack+0x9f3>
          else              { Can_set_std_id(cmd->id.std);}
    12ba:	12 96       	adiw	r26, 0x02	; 2
    12bc:	8c 91       	ld	r24, X
    12be:	12 97       	sbiw	r26, 0x02	; 2
    12c0:	86 95       	lsr	r24
    12c2:	86 95       	lsr	r24
    12c4:	86 95       	lsr	r24
    12c6:	13 96       	adiw	r26, 0x03	; 3
    12c8:	9c 91       	ld	r25, X
    12ca:	13 97       	sbiw	r26, 0x03	; 3
    12cc:	e0 e2       	ldi	r30, 0x20	; 32
    12ce:	9e 9f       	mul	r25, r30
    12d0:	80 0d       	add	r24, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	80 93 f3 00 	sts	0x00F3, r24
    12d8:	12 96       	adiw	r26, 0x02	; 2
    12da:	8c 91       	ld	r24, X
    12dc:	12 97       	sbiw	r26, 0x02	; 2
    12de:	82 95       	swap	r24
    12e0:	88 0f       	add	r24, r24
    12e2:	80 7e       	andi	r24, 0xE0	; 224
    12e4:	80 93 f2 00 	sts	0x00F2, r24
    12e8:	ef ee       	ldi	r30, 0xEF	; 239
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8f 7e       	andi	r24, 0xEF	; 239
    12f0:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    12f2:	16 96       	adiw	r26, 0x06	; 6
    12f4:	8c 91       	ld	r24, X
    12f6:	16 97       	sbiw	r26, 0x06	; 6
    12f8:	88 23       	and	r24, r24
    12fa:	91 f0       	breq	.+36     	; 0x1320 <__stack+0xa21>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	8a ef       	ldi	r24, 0xFA	; 250
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	17 96       	adiw	r26, 0x07	; 7
    1304:	ed 91       	ld	r30, X+
    1306:	fc 91       	ld	r31, X
    1308:	18 97       	sbiw	r26, 0x08	; 8
    130a:	e2 0f       	add	r30, r18
    130c:	f1 1d       	adc	r31, r1
    130e:	30 81       	ld	r19, Z
    1310:	fc 01       	movw	r30, r24
    1312:	30 83       	st	Z, r19
    1314:	2f 5f       	subi	r18, 0xFF	; 255
    1316:	16 96       	adiw	r26, 0x06	; 6
    1318:	3c 91       	ld	r19, X
    131a:	16 97       	sbiw	r26, 0x06	; 6
    131c:	23 17       	cp	r18, r19
    131e:	88 f3       	brcs	.-30     	; 0x1302 <__stack+0xa03>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	92 95       	swap	r25
    1328:	96 95       	lsr	r25
    132a:	97 70       	andi	r25, 0x07	; 7
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	88 0f       	add	r24, r24
    1330:	88 0f       	add	r24, r24
    1332:	88 0f       	add	r24, r24
    1334:	89 0f       	add	r24, r25
    1336:	80 93 f7 00 	sts	0x00F7, r24
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	92 95       	swap	r25
    133e:	96 95       	lsr	r25
    1340:	97 70       	andi	r25, 0x07	; 7
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 0f       	add	r24, r24
    1346:	88 0f       	add	r24, r24
    1348:	88 0f       	add	r24, r24
    134a:	89 0f       	add	r24, r25
    134c:	80 93 f6 00 	sts	0x00F6, r24
    1350:	99 81       	ldd	r25, Y+1	; 0x01
    1352:	92 95       	swap	r25
    1354:	96 95       	lsr	r25
    1356:	97 70       	andi	r25, 0x07	; 7
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	88 0f       	add	r24, r24
    135c:	88 0f       	add	r24, r24
    135e:	88 0f       	add	r24, r24
    1360:	89 0f       	add	r24, r25
    1362:	80 93 f5 00 	sts	0x00F5, r24
    1366:	29 81       	ldd	r18, Y+1	; 0x01
    1368:	22 0f       	add	r18, r18
    136a:	22 0f       	add	r18, r18
    136c:	22 0f       	add	r18, r18
    136e:	84 ef       	ldi	r24, 0xF4	; 244
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1376:	ef ee       	ldi	r30, 0xEF	; 239
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	30 81       	ld	r19, Z
    137c:	16 96       	adiw	r26, 0x06	; 6
    137e:	2c 91       	ld	r18, X
    1380:	16 97       	sbiw	r26, 0x06	; 6
    1382:	23 2b       	or	r18, r19
    1384:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	1a 96       	adiw	r26, 0x0a	; 10
    138a:	2c 93       	st	X, r18
    138c:	dc 01       	movw	r26, r24
    138e:	2c 91       	ld	r18, X
    1390:	24 60       	ori	r18, 0x04	; 4
    1392:	2c 93       	st	X, r18
    1394:	a0 ef       	ldi	r26, 0xF0	; 240
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	2c 91       	ld	r18, X
    139a:	24 60       	ori	r18, 0x04	; 4
    139c:	2c 93       	st	X, r18
          Can_set_rplv();
    139e:	20 81       	ld	r18, Z
    13a0:	20 62       	ori	r18, 0x20	; 32
    13a2:	20 83       	st	Z, r18
          Can_set_idemsk();
    13a4:	dc 01       	movw	r26, r24
    13a6:	2c 91       	ld	r18, X
    13a8:	21 60       	ori	r18, 0x01	; 1
    13aa:	2c 93       	st	X, r18
          Can_config_rx();       
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 73       	andi	r24, 0x3F	; 63
    13b0:	80 83       	st	Z, r24
    13b2:	80 81       	ld	r24, Z
    13b4:	80 68       	ori	r24, 0x80	; 128
    13b6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <__stack+0xacd>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    13bc:	19 96       	adiw	r26, 0x09	; 9
    13be:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    13c0:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <__stack+0xacd>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    13c4:	8f e1       	ldi	r24, 0x1F	; 31
    13c6:	19 96       	adiw	r26, 0x09	; 9
    13c8:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    13cc:	0f 90       	pop	r0
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    13dc:	88 23       	and	r24, r24
    13de:	09 f4       	brne	.+2      	; 0x13e2 <can_get_status+0xe>
    13e0:	e3 c0       	rjmp	.+454    	; 0x15a8 <can_get_status+0x1d4>
    13e2:	8f 31       	cpi	r24, 0x1F	; 31
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <can_get_status+0x14>
    13e6:	e2 c0       	rjmp	.+452    	; 0x15ac <can_get_status+0x1d8>
    13e8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ea:	09 f4       	brne	.+2      	; 0x13ee <can_get_status+0x1a>
    13ec:	e1 c0       	rjmp	.+450    	; 0x15b0 <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    13ee:	62 95       	swap	r22
    13f0:	60 7f       	andi	r22, 0xF0	; 240
    13f2:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    13f6:	0e 94 81 03 	call	0x702	; 0x702 <can_get_mob_status>
    
    switch (a_status)
    13fa:	80 32       	cpi	r24, 0x20	; 32
    13fc:	61 f0       	breq	.+24     	; 0x1416 <can_get_status+0x42>
    13fe:	20 f4       	brcc	.+8      	; 0x1408 <can_get_status+0x34>
    1400:	88 23       	and	r24, r24
    1402:	09 f4       	brne	.+2      	; 0x1406 <can_get_status+0x32>
    1404:	d7 c0       	rjmp	.+430    	; 0x15b4 <can_get_status+0x1e0>
    1406:	c6 c0       	rjmp	.+396    	; 0x1594 <can_get_status+0x1c0>
    1408:	80 34       	cpi	r24, 0x40	; 64
    140a:	09 f4       	brne	.+2      	; 0x140e <can_get_status+0x3a>
    140c:	b8 c0       	rjmp	.+368    	; 0x157e <can_get_status+0x1aa>
    140e:	80 3a       	cpi	r24, 0xA0	; 160
    1410:	09 f4       	brne	.+2      	; 0x1414 <can_get_status+0x40>
    1412:	5c c0       	rjmp	.+184    	; 0x14cc <can_get_status+0xf8>
    1414:	bf c0       	rjmp	.+382    	; 0x1594 <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
    1416:	87 e0       	ldi	r24, 0x07	; 7
    1418:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
			delay_ms(100);
    141c:	84 e6       	ldi	r24, 0x64	; 100
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
			LED_toggle(LED7);
    1424:	87 e0       	ldi	r24, 0x07	; 7
    1426:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
			delay_ms(100);
    142a:	84 e6       	ldi	r24, 0x64	; 100
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
    1432:	80 91 f0 00 	lds	r24, 0x00F0
    1436:	82 fb       	bst	r24, 2
    1438:	88 27       	eor	r24, r24
    143a:	80 f9       	bld	r24, 0
    143c:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    143e:	80 91 ef 00 	lds	r24, 0x00EF
    1442:	84 ff       	sbrs	r24, 4
    1444:	2d c0       	rjmp	.+90     	; 0x14a0 <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    144a:	e3 ef       	ldi	r30, 0xF3	; 243
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	86 95       	lsr	r24
    1452:	86 95       	lsr	r24
    1454:	86 95       	lsr	r24
    1456:	8d 83       	std	Y+5, r24	; 0x05
    1458:	a2 ef       	ldi	r26, 0xF2	; 242
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	8c 91       	ld	r24, X
    145e:	90 81       	ld	r25, Z
    1460:	86 95       	lsr	r24
    1462:	86 95       	lsr	r24
    1464:	86 95       	lsr	r24
    1466:	20 e2       	ldi	r18, 0x20	; 32
    1468:	92 9f       	mul	r25, r18
    146a:	80 0d       	add	r24, r0
    146c:	11 24       	eor	r1, r1
    146e:	8c 83       	std	Y+4, r24	; 0x04
    1470:	e1 ef       	ldi	r30, 0xF1	; 241
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	9c 91       	ld	r25, X
    1478:	86 95       	lsr	r24
    147a:	86 95       	lsr	r24
    147c:	86 95       	lsr	r24
    147e:	20 e2       	ldi	r18, 0x20	; 32
    1480:	92 9f       	mul	r25, r18
    1482:	80 0d       	add	r24, r0
    1484:	11 24       	eor	r1, r1
    1486:	8b 83       	std	Y+3, r24	; 0x03
    1488:	80 91 f0 00 	lds	r24, 0x00F0
    148c:	90 81       	ld	r25, Z
    148e:	86 95       	lsr	r24
    1490:	86 95       	lsr	r24
    1492:	86 95       	lsr	r24
    1494:	20 e2       	ldi	r18, 0x20	; 32
    1496:	92 9f       	mul	r25, r18
    1498:	80 0d       	add	r24, r0
    149a:	11 24       	eor	r1, r1
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    14a0:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    14a2:	e3 ef       	ldi	r30, 0xF3	; 243
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 91 f2 00 	lds	r24, 0x00F2
    14ac:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    14ae:	80 e2       	ldi	r24, 0x20	; 32
    14b0:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    14b2:	8f 81       	ldd	r24, Y+7	; 0x07
    14b4:	98 85       	ldd	r25, Y+8	; 0x08
    14b6:	0e 94 97 03 	call	0x72e	; 0x72e <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    14ba:	ef ee       	ldi	r30, 0xEF	; 239
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8f 73       	andi	r24, 0x3F	; 63
    14c2:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    14c4:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    14c8:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    14ca:	75 c0       	rjmp	.+234    	; 0x15b6 <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    14cc:	80 91 f0 00 	lds	r24, 0x00F0
    14d0:	82 fb       	bst	r24, 2
    14d2:	88 27       	eor	r24, r24
    14d4:	80 f9       	bld	r24, 0
    14d6:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    14d8:	80 91 ef 00 	lds	r24, 0x00EF
    14dc:	84 ff       	sbrs	r24, 4
    14de:	2d c0       	rjmp	.+90     	; 0x153a <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    14e4:	e3 ef       	ldi	r30, 0xF3	; 243
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	86 95       	lsr	r24
    14ec:	86 95       	lsr	r24
    14ee:	86 95       	lsr	r24
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	a2 ef       	ldi	r26, 0xF2	; 242
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	8c 91       	ld	r24, X
    14f8:	90 81       	ld	r25, Z
    14fa:	86 95       	lsr	r24
    14fc:	86 95       	lsr	r24
    14fe:	86 95       	lsr	r24
    1500:	20 e2       	ldi	r18, 0x20	; 32
    1502:	92 9f       	mul	r25, r18
    1504:	80 0d       	add	r24, r0
    1506:	11 24       	eor	r1, r1
    1508:	8c 83       	std	Y+4, r24	; 0x04
    150a:	e1 ef       	ldi	r30, 0xF1	; 241
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	9c 91       	ld	r25, X
    1512:	86 95       	lsr	r24
    1514:	86 95       	lsr	r24
    1516:	86 95       	lsr	r24
    1518:	20 e2       	ldi	r18, 0x20	; 32
    151a:	92 9f       	mul	r25, r18
    151c:	80 0d       	add	r24, r0
    151e:	11 24       	eor	r1, r1
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	80 91 f0 00 	lds	r24, 0x00F0
    1526:	90 81       	ld	r25, Z
    1528:	86 95       	lsr	r24
    152a:	86 95       	lsr	r24
    152c:	86 95       	lsr	r24
    152e:	20 e2       	ldi	r18, 0x20	; 32
    1530:	92 9f       	mul	r25, r18
    1532:	80 0d       	add	r24, r0
    1534:	11 24       	eor	r1, r1
    1536:	8a 83       	std	Y+2, r24	; 0x02
    1538:	13 c0       	rjmp	.+38     	; 0x1560 <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    153a:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    153c:	e3 ef       	ldi	r30, 0xF3	; 243
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	82 95       	swap	r24
    1544:	86 95       	lsr	r24
    1546:	87 70       	andi	r24, 0x07	; 7
    1548:	8b 83       	std	Y+3, r24	; 0x03
    154a:	80 91 f2 00 	lds	r24, 0x00F2
    154e:	90 81       	ld	r25, Z
    1550:	99 0f       	add	r25, r25
    1552:	99 0f       	add	r25, r25
    1554:	99 0f       	add	r25, r25
    1556:	82 95       	swap	r24
    1558:	86 95       	lsr	r24
    155a:	87 70       	andi	r24, 0x07	; 7
    155c:	89 0f       	add	r24, r25
    155e:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1560:	80 ea       	ldi	r24, 0xA0	; 160
    1562:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1564:	8f 81       	ldd	r24, Y+7	; 0x07
    1566:	98 85       	ldd	r25, Y+8	; 0x08
    1568:	0e 94 97 03 	call	0x72e	; 0x72e <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    156c:	ef ee       	ldi	r30, 0xEF	; 239
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 73       	andi	r24, 0x3F	; 63
    1574:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    1576:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    157a:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    157c:	1c c0       	rjmp	.+56     	; 0x15b6 <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    157e:	80 e4       	ldi	r24, 0x40	; 64
    1580:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1582:	ef ee       	ldi	r30, 0xEF	; 239
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 73       	andi	r24, 0x3F	; 63
    158a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    158c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1590:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1592:	11 c0       	rjmp	.+34     	; 0x15b6 <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1594:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1596:	ef ee       	ldi	r30, 0xEF	; 239
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 73       	andi	r24, 0x3F	; 63
    159e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    15a0:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    15a4:	82 e0       	ldi	r24, 0x02	; 2
            break;
    15a6:	07 c0       	rjmp	.+14     	; 0x15b6 <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <can_get_status+0x1e2>
    15ac:	82 e0       	ldi	r24, 0x02	; 2
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <can_get_status+0x1e2>
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	80 93 1f 01 	sts	0x011F, r24
	send_arr[6] = MT_COM;
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	80 93 1e 01 	sts	0x011E, r24
	send_arr[5] = RESPONSE;
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	80 93 1d 01 	sts	0x011D, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    15ce:	61 e1       	ldi	r22, 0x11	; 17
    15d0:	88 e1       	ldi	r24, 0x18	; 24
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_now = 0;
    15d8:	10 92 3e 01 	sts	0x013E, r1
    15dc:	08 95       	ret

000015de <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	80 93 1f 01 	sts	0x011F, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	80 93 1e 01 	sts	0x011E, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    15ea:	60 e1       	ldi	r22, 0x10	; 16
    15ec:	88 e1       	ldi	r24, 0x18	; 24
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_hk = 0;
    15f4:	10 92 4e 01 	sts	0x014E, r1
    15f8:	08 95       	ret

000015fa <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	00 d0       	rcall	.+0      	; 0x1604 <send_sensor_data+0xa>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[3];
    1608:	10 91 38 01 	lds	r17, 0x0138
	req_by = data_req_arr[7] >> 4;
    160c:	00 91 3c 01 	lds	r16, 0x013C
    1610:	02 95       	swap	r16
    1612:	0f 70       	andi	r16, 0x0F	; 15
	
	if(sensor_name == SPI_TEMP1)
    1614:	11 30       	cpi	r17, 0x01	; 1
    1616:	71 f4       	brne	.+28     	; 0x1634 <send_sensor_data+0x3a>
	{
		spi_retrieve_temp(&high, &low);
    1618:	be 01       	movw	r22, r28
    161a:	6e 5f       	subi	r22, 0xFE	; 254
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	0e 94 2b 0c 	call	0x1856	; 0x1856 <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 93 19 01 	sts	0x0119, r24
		send_arr[0] = low;
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 93 18 01 	sts	0x0118, r24
    1632:	0b c0       	rjmp	.+22     	; 0x164a <send_sensor_data+0x50>
	}
	
	if(sensor_name == BATT_TOP)
    1634:	13 30       	cpi	r17, 0x03	; 3
    1636:	21 f4       	brne	.+8      	; 0x1640 <send_sensor_data+0x46>
	{
		//adc_read(&send_arr[0]);
		send_arr[0] = 0x55;
    1638:	85 e5       	ldi	r24, 0x55	; 85
    163a:	80 93 18 01 	sts	0x0118, r24
    163e:	05 c0       	rjmp	.+10     	; 0x164a <send_sensor_data+0x50>
	}
	
	if(sensor_name == BATT_BOTTOM)
    1640:	14 30       	cpi	r17, 0x04	; 4
    1642:	19 f4       	brne	.+6      	; 0x164a <send_sensor_data+0x50>
	{
		//adc_read(&send_arr[0]);
		send_arr[0] = 0x66;
    1644:	86 e6       	ldi	r24, 0x66	; 102
    1646:	80 93 18 01 	sts	0x0118, r24
	}

	send_arr[7] = (SELF_ID << 4)|req_by;
    164a:	00 93 1f 01 	sts	0x011F, r16
	send_arr[6] = MT_DATA;
    164e:	10 92 1e 01 	sts	0x011E, r1
	send_arr[5] = sensor_name;				
    1652:	10 93 1d 01 	sts	0x011D, r17
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1656:	6a e0       	ldi	r22, 0x0A	; 10
    1658:	88 e1       	ldi	r24, 0x18	; 24
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_data = 0;
    1660:	10 92 65 01 	sts	0x0165, r1
	
	return;
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	08 95       	ret

00001672 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	80 93 1f 01 	sts	0x011F, r24
	send_arr[6] = MT_DATA;
    1678:	10 92 1e 01 	sts	0x011E, r1
	send_arr[5] = COMS_PACKET;
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	80 93 1d 01 	sts	0x011D, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1682:	80 91 3f 01 	lds	r24, 0x013F
    1686:	80 93 18 01 	sts	0x0118, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    168a:	6a e0       	ldi	r22, 0x0A	; 10
    168c:	88 e1       	ldi	r24, 0x18	; 24
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_coms = 0;
    1694:	10 92 3d 01 	sts	0x013D, r1
    1698:	08 95       	ret

0000169a <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    169a:	90 91 73 01 	lds	r25, 0x0173
	read_ptr = read_arr[0];
    169e:	e0 91 70 01 	lds	r30, 0x0170
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    16a4:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    16a6:	20 91 77 01 	lds	r18, 0x0177
    16aa:	20 93 1f 01 	sts	0x011F, r18
	send_arr[6] = MT_COM;
    16ae:	22 e0       	ldi	r18, 0x02	; 2
    16b0:	20 93 1e 01 	sts	0x011E, r18
	send_arr[5] = ACK_READ;
    16b4:	26 e0       	ldi	r18, 0x06	; 6
    16b6:	20 93 1d 01 	sts	0x011D, r18
	send_arr[3] = passkey;
    16ba:	90 93 1b 01 	sts	0x011B, r25
	send_arr[0] = read_val;
    16be:	80 93 18 01 	sts	0x0118, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    16c2:	61 e1       	ldi	r22, 0x11	; 17
    16c4:	88 e1       	ldi	r24, 0x18	; 24
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	read_response = 0;
    16cc:	10 92 45 01 	sts	0x0145, r1
    16d0:	08 95       	ret

000016d2 <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    16d2:	80 91 03 01 	lds	r24, 0x0103
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    16d6:	20 91 00 01 	lds	r18, 0x0100
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    16da:	90 91 77 01 	lds	r25, 0x0177
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    16de:	e0 91 01 01 	lds	r30, 0x0101
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    16e4:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    16e6:	90 93 1f 01 	sts	0x011F, r25
	send_arr[6] = MT_COM;
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	90 93 1e 01 	sts	0x011E, r25
	send_arr[5] = ACK_WRITE;
    16f0:	98 e0       	ldi	r25, 0x08	; 8
    16f2:	90 93 1d 01 	sts	0x011D, r25
	send_arr[3] = passkey;
    16f6:	80 93 1b 01 	sts	0x011B, r24
	send_arr[0] = ret_val;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	80 93 18 01 	sts	0x0118, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1700:	61 e1       	ldi	r22, 0x11	; 17
    1702:	88 e1       	ldi	r24, 0x18	; 24
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	write_response = 0;
    170a:	10 92 28 01 	sts	0x0128, r1
    170e:	08 95       	ret

00001710 <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now == 1)
    1710:	80 91 3e 01 	lds	r24, 0x013E
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	11 f4       	brne	.+4      	; 0x171c <run_commands+0xc>
		send_response();
    1718:	0e 94 de 0a 	call	0x15bc	; 0x15bc <send_response>
	if (send_hk == 1)
    171c:	80 91 4e 01 	lds	r24, 0x014E
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	11 f4       	brne	.+4      	; 0x1728 <run_commands+0x18>
		send_housekeeping();
    1724:	0e 94 ef 0a 	call	0x15de	; 0x15de <send_housekeeping>
	if (send_data == 1)
    1728:	80 91 65 01 	lds	r24, 0x0165
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	11 f4       	brne	.+4      	; 0x1734 <run_commands+0x24>
		send_sensor_data();
    1730:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <send_sensor_data>
	if (send_coms == 1)
    1734:	80 91 3d 01 	lds	r24, 0x013D
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	11 f4       	brne	.+4      	; 0x1740 <run_commands+0x30>
		send_coms_packet();
    173c:	0e 94 39 0b 	call	0x1672	; 0x1672 <send_coms_packet>
	if (read_response == 1)
    1740:	80 91 45 01 	lds	r24, 0x0145
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	11 f4       	brne	.+4      	; 0x174c <run_commands+0x3c>
		send_read_response();
    1748:	0e 94 4d 0b 	call	0x169a	; 0x169a <send_read_response>
	if (write_response == 1)
    174c:	80 91 28 01 	lds	r24, 0x0128
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	11 f4       	brne	.+4      	; 0x1758 <run_commands+0x48>
		send_write_response();
    1754:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <send_write_response>
    1758:	08 95       	ret

0000175a <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    175a:	87 30       	cpi	r24, 0x07	; 7
    175c:	29 f4       	brne	.+10     	; 0x1768 <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    175e:	2b b1       	in	r18, 0x0b	; 11
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	92 27       	eor	r25, r18
    1764:	9b b9       	out	0x0b, r25	; 11
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <LED_toggle+0x1c>
	}
	if(LED == 3)
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	29 f4       	brne	.+10     	; 0x1776 <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    176c:	98 b1       	in	r25, 0x08	; 8
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	89 27       	eor	r24, r25
    1772:	88 b9       	out	0x08, r24	; 8
    1774:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    1776:	45 b1       	in	r20, 0x05	; 5
    1778:	21 e0       	ldi	r18, 0x01	; 1
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	b9 01       	movw	r22, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <LED_toggle+0x2a>
    1780:	66 0f       	add	r22, r22
    1782:	77 1f       	adc	r23, r23
    1784:	8a 95       	dec	r24
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <LED_toggle+0x26>
    1788:	cb 01       	movw	r24, r22
    178a:	84 27       	eor	r24, r20
    178c:	85 b9       	out	0x05, r24	; 5
    178e:	08 95       	ret

00001790 <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    1790:	e1 e6       	ldi	r30, 0x61	; 97
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 e8       	ldi	r24, 0x80	; 128
    1796:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1798:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    179a:	8e ef       	ldi	r24, 0xFE	; 254
    179c:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    179e:	81 e1       	ldi	r24, 0x11	; 17
    17a0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    17a2:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    17a4:	89 e0       	ldi	r24, 0x09	; 9
    17a6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    17ac:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    17ae:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	
	timer_init();
    17b0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <timer_init>
	adc_initialize();
    17b4:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 af 03 	call	0x75e	; 0x75e <can_init>
	can_init_mobs();
    17be:	0e 94 9b 02 	call	0x536	; 0x536 <can_init_mobs>
	spi_initialize_master();
    17c2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <spi_initialize_master>
	
	// Enable global interrupts for Timer execution
	sei();
    17c6:	78 94       	sei
	
	transceiver_initialize();
    17c8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <transceiver_initialize>
	
	SS1_set_high();		// SPI Temp Sensor.
    17cc:	0e 94 22 0c 	call	0x1844	; 0x1844 <SS1_set_high>
	
	LED_toggle(LED7);
    17d0:	87 e0       	ldi	r24, 0x07	; 7
    17d2:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_toggle>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    17d6:	0e 94 40 02 	call	0x480	; 0x480 <can_check_general>
	
		/*		TRANSCEIVER COMMUNICATION	*/
		trans_check();
    17da:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <trans_check>
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    17de:	0e 94 88 0b 	call	0x1710	; 0x1710 <run_commands>
    17e2:	f9 cf       	rjmp	.-14     	; 0x17d6 <main+0x46>

000017e4 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    17e4:	85 b7       	in	r24, 0x35	; 53
    17e6:	8f 77       	andi	r24, 0x7F	; 127
    17e8:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    17ea:	83 e5       	ldi	r24, 0x53	; 83
    17ec:	8c bd       	out	0x2c, r24	; 44
    17ee:	08 95       	ret

000017f0 <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_low();
	*reg_ptr = message;
    17f0:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    17f2:	0d b4       	in	r0, 0x2d	; 45
    17f4:	07 fc       	sbrc	r0, 7
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <spi_transfer+0x10>
    17f8:	89 ee       	ldi	r24, 0xE9	; 233
    17fa:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <spi_transfer+0xa>
    17fe:	08 95       	ret
			delay_ms(100);
		}
	}	
	//SS_set_high();
	
	delay_cycles(10);
    1800:	8a e0       	ldi	r24, 0x0A	; 10
    1802:	0e 94 87 0c 	call	0x190e	; 0x190e <delay_cycles>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    1806:	8e b5       	in	r24, 0x2e	; 46
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1808:	08 95       	ret

0000180a <SS_set_high>:
/************************************************************************/

void SS_set_high(void) 
{
	//PORTD |= (1 << 3);
	delay_us(1);
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
    1812:	08 95       	ret

00001814 <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    1814:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    1816:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    1818:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    181a:	0d b4       	in	r0, 0x2d	; 45
    181c:	07 fc       	sbrc	r0, 7
    181e:	06 c0       	rjmp	.+12     	; 0x182c <spi_transfer2+0x18>
    1820:	c9 ee       	ldi	r28, 0xE9	; 233
    1822:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1824:	f1 f7       	brne	.-4      	; 0x1822 <spi_transfer2+0xe>
		{
			SS_set_high();
    1826:	0e 94 05 0c 	call	0x180a	; 0x180a <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    182a:	09 c0       	rjmp	.+18     	; 0x183e <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    182c:	87 e0       	ldi	r24, 0x07	; 7
    182e:	0e 94 87 0c 	call	0x190e	; 0x190e <delay_cycles>
	SS_set_high();
    1832:	0e 94 05 0c 	call	0x180a	; 0x180a <SS_set_high>
	
	delay_cycles(10);
    1836:	8a e0       	ldi	r24, 0x0A	; 10
    1838:	0e 94 87 0c 	call	0x190e	; 0x190e <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    183c:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    183e:	8c 2f       	mov	r24, r28
    1840:	cf 91       	pop	r28
    1842:	08 95       	ret

00001844 <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    1844:	44 9a       	sbi	0x08, 4	; 8
    1846:	08 95       	ret

00001848 <SS_set_low>:
/************************************************************************/

void SS_set_low(void)
{
	//PORTD &= (0xF7);
	delay_us(1);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
    1850:	08 95       	ret

00001852 <SS1_set_low>:
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    1852:	44 98       	cbi	0x08, 4	; 8
    1854:	08 95       	ret

00001856 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	8c 01       	movw	r16, r24
    1860:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    1862:	0e 94 29 0c 	call	0x1852	; 0x1852 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    1866:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    1868:	80 e8       	ldi	r24, 0x80	; 128
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
	*high = *reg_ptr;
    1870:	8e b5       	in	r24, 0x2e	; 46
    1872:	f8 01       	movw	r30, r16
    1874:	80 83       	st	Z, r24
	delay_ms(128);
    1876:	80 e8       	ldi	r24, 0x80	; 128
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
	*low = *reg_ptr;	
    187e:	8e b5       	in	r24, 0x2e	; 46
    1880:	88 83       	st	Y, r24
	SS1_set_high();
    1882:	0e 94 22 0c 	call	0x1844	; 0x1844 <SS1_set_high>
	
	return;
}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	08 95       	ret

00001890 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	8f 93       	push	r24
	CTC_flag = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	80 93 78 01 	sts	0x0178, r24
}
    18a2:	8f 91       	pop	r24
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	0f 90       	pop	r0
    18aa:	1f 90       	pop	r1
    18ac:	18 95       	reti

000018ae <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    18ae:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    18b2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    18b6:	8a e0       	ldi	r24, 0x0A	; 10
    18b8:	80 93 81 00 	sts	0x0081, r24
    18bc:	08 95       	ret

000018be <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    18be:	10 92 78 01 	sts	0x0178, r1
	TCNT1 = 0x0000; //Clear timer
    18c2:	10 92 85 00 	sts	0x0085, r1
    18c6:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    18ca:	90 93 89 00 	sts	0x0089, r25
    18ce:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    18d8:	80 91 78 01 	lds	r24, 0x0178
    18dc:	88 23       	and	r24, r24
    18de:	e1 f3       	breq	.-8      	; 0x18d8 <delay_us+0x1a>
}
    18e0:	08 95       	ret

000018e2 <delay_ms>:

void delay_ms(uint16_t ms) {
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	51 f0       	breq	.+20     	; 0x1904 <delay_ms+0x22>
    18f0:	c0 e0       	ldi	r28, 0x00	; 0
    18f2:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    18f4:	88 ee       	ldi	r24, 0xE8	; 232
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    18fc:	21 96       	adiw	r28, 0x01	; 1
    18fe:	c0 17       	cp	r28, r16
    1900:	d1 07       	cpc	r29, r17
    1902:	c1 f7       	brne	.-16     	; 0x18f4 <delay_ms+0x12>
		delay_us(1000);
	}
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    190e:	88 23       	and	r24, r24
    1910:	21 f0       	breq	.+8      	; 0x191a <delay_cycles+0xc>
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9f 5f       	subi	r25, 0xFF	; 255
    1916:	98 13       	cpse	r25, r24
    1918:	fd cf       	rjmp	.-6      	; 0x1914 <delay_cycles+0x6>
    191a:	08 95       	ret

0000191c <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    191c:	cf 93       	push	r28
    191e:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    1920:	0e 94 24 0c 	call	0x1848	; 0x1848 <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    1924:	80 e8       	ldi	r24, 0x80	; 128
    1926:	8c 0f       	add	r24, r28
    1928:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	delay_us(1);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	msg = spi_transfer(0x00);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
    193a:	c8 2f       	mov	r28, r24

	SS_set_high();
    193c:	0e 94 05 0c 	call	0x180a	; 0x180a <SS_set_high>
	
	delay_ms(1);
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
	
	return msg;
}
    1948:	8c 2f       	mov	r24, r28
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	d8 2f       	mov	r29, r24
    1954:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    1956:	0e 94 24 0c 	call	0x1848	; 0x1848 <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    195a:	8d 2f       	mov	r24, r29
    195c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	delay_us(1);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1968:	8c 2f       	mov	r24, r28
    196a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	SS_set_high();
    196e:	0e 94 05 0c 	call	0x180a	; 0x180a <SS_set_high>
	
	delay_ms(1);
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>

	return;
}
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    1980:	cf 93       	push	r28
    1982:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    1984:	0e 94 24 0c 	call	0x1848	; 0x1848 <SS_set_low>
	msg = spi_transfer(msg);
    1988:	8f ea       	ldi	r24, 0xAF	; 175
    198a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	delay_us(1);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1996:	8c 2f       	mov	r24, r28
    1998:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	delay_us(1);
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	msg = spi_transfer(0x00);
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
    19aa:	c8 2f       	mov	r28, r24
	SS_set_high();
    19ac:	0e 94 05 0c 	call	0x180a	; 0x180a <SS_set_high>
	delay_ms(1);
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
	return msg;
}
    19b8:	8c 2f       	mov	r24, r28
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret

000019be <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    19be:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    19c0:	0e 94 0a 0c 	call	0x1814	; 0x1814 <spi_transfer2>
    19c4:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	return msg;
}
    19ce:	8c 2f       	mov	r24, r28
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	d8 2f       	mov	r29, r24
    19da:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    19dc:	8d e3       	ldi	r24, 0x3D	; 61
    19de:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    19e2:	0e 94 24 0c 	call	0x1848	; 0x1848 <SS_set_low>
	spi_transfer(msg);
    19e6:	8f e2       	ldi	r24, 0x2F	; 47
    19e8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	delay_us(1);
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    19f4:	8d 2f       	mov	r24, r29
    19f6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	delay_us(1);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1a02:	8c 2f       	mov	r24, r28
    1a04:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	SS_set_high();
    1a08:	0e 94 05 0c 	call	0x180a	; 0x180a <SS_set_high>
	delay_ms(1);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>

	return;
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <get_status>:
/*		Note: 000 = IDLE, 001 = RX, 110 = RX buffer overflow.			*/
/*																		*/
/************************************************************************/

void get_status(uint8_t *CHIP_RDYn, uint8_t *state)
{
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	eb 01       	movw	r28, r22
	uint8_t msg;

	msg = cmd_str(SNOP);
    1a20:	8d e3       	ldi	r24, 0x3D	; 61
    1a22:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
	
	msg = msg & ~0x80;
    1a26:	8f 77       	andi	r24, 0x7F	; 127
	msg = msg >> 4;
    1a28:	82 95       	swap	r24
    1a2a:	8f 70       	andi	r24, 0x0F	; 15
	*state = msg;
    1a2c:	88 83       	st	Y, r24
	
	return;
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <dir_FIFO_read>:
/*	on the CC1120's FIFO and return the byte which was located there.	*/
/*																		*/
/************************************************************************/

uint8_t dir_FIFO_read(uint8_t addr)
{
    1a34:	cf 93       	push	r28
    1a36:	c8 2f       	mov	r28, r24
	cmd_str(SNOP);
    1a38:	8d e3       	ldi	r24, 0x3D	; 61
    1a3a:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
	uint8_t msg;
	msg = 0b10111110;
	
	SS_set_low();
    1a3e:	0e 94 24 0c 	call	0x1848	; 0x1848 <SS_set_low>
	msg = spi_transfer(msg);
    1a42:	8e eb       	ldi	r24, 0xBE	; 190
    1a44:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	delay_us(1);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1a50:	8c 2f       	mov	r24, r28
    1a52:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
	delay_us(1);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 5f 0c 	call	0x18be	; 0x18be <delay_us>
	msg = spi_transfer(0x00);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <spi_transfer>
    1a64:	c8 2f       	mov	r28, r24
	SS_set_high();
    1a66:	0e 94 05 0c 	call	0x180a	; 0x180a <SS_set_high>
	delay_ms(1);
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
	return msg;
}
    1a72:	8c 2f       	mov	r24, r28
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	c8 2f       	mov	r28, r24
    1a80:	d6 2f       	mov	r29, r22
    1a82:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    1a84:	0e 94 8e 0c 	call	0x191c	; 0x191c <reg_read>
	if(!data)
    1a88:	11 11       	cpse	r17, r1
    1a8a:	0c c0       	rjmp	.+24     	; 0x1aa4 <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    1a8c:	e1 e0       	ldi	r30, 0x01	; 1
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	af 01       	movw	r20, r30
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <reg_write_bit+0x20>
    1a94:	44 0f       	add	r20, r20
    1a96:	55 1f       	adc	r21, r21
    1a98:	da 95       	dec	r29
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <reg_write_bit+0x1c>
    1a9c:	40 95       	com	r20
		msg = temp & msg;
    1a9e:	68 2f       	mov	r22, r24
    1aa0:	64 23       	and	r22, r20
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	9a 01       	movw	r18, r20
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <reg_write_bit+0x38>
    1aac:	22 0f       	add	r18, r18
    1aae:	33 1f       	adc	r19, r19
    1ab0:	da 95       	dec	r29
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <reg_write_bit+0x34>
		msg = temp | msg;
    1ab4:	68 2f       	mov	r22, r24
    1ab6:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    1ab8:	8c 2f       	mov	r24, r28
    1aba:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	return;
}
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	08 95       	ret

00001ac6 <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	c8 2f       	mov	r28, r24
    1ace:	d6 2f       	mov	r29, r22
    1ad0:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    1ad2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <reg_read2F>
	if(!data)
    1ad6:	11 11       	cpse	r17, r1
    1ad8:	0c c0       	rjmp	.+24     	; 0x1af2 <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    1ada:	e1 e0       	ldi	r30, 0x01	; 1
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	af 01       	movw	r20, r30
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <reg_write_bit2F+0x20>
    1ae2:	44 0f       	add	r20, r20
    1ae4:	55 1f       	adc	r21, r21
    1ae6:	da 95       	dec	r29
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <reg_write_bit2F+0x1c>
    1aea:	40 95       	com	r20
		msg = temp & msg;
    1aec:	68 2f       	mov	r22, r24
    1aee:	64 23       	and	r22, r20
    1af0:	0a c0       	rjmp	.+20     	; 0x1b06 <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	9a 01       	movw	r18, r20
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <reg_write_bit2F+0x38>
    1afa:	22 0f       	add	r18, r18
    1afc:	33 1f       	adc	r19, r19
    1afe:	da 95       	dec	r29
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <reg_write_bit2F+0x34>
		msg = temp | msg;
    1b02:	68 2f       	mov	r22, r24
    1b04:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    1b06:	8c 2f       	mov	r24, r28
    1b08:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	return;
}
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	08 95       	ret

00001b14 <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    1b14:	0e 94 24 0c 	call	0x1848	; 0x1848 <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    1b18:	80 e3       	ldi	r24, 0x30	; 48
    1b1a:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    1b1e:	8a e3       	ldi	r24, 0x3A	; 58
    1b20:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    1b24:	8b e3       	ldi	r24, 0x3B	; 59
    1b26:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>

	//**************SET UP RX****************//
  
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	82 e1       	ldi	r24, 0x12	; 18
    1b2e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    1b32:	6f e5       	ldi	r22, 0x5F	; 95
    1b34:	83 e1       	ldi	r24, 0x13	; 19
    1b36:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    1b3a:	60 e4       	ldi	r22, 0x40	; 64
    1b3c:	86 e1       	ldi	r24, 0x16	; 22
    1b3e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    1b42:	6e e0       	ldi	r22, 0x0E	; 14
    1b44:	87 e1       	ldi	r24, 0x17	; 23
    1b46:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    1b4a:	63 e0       	ldi	r22, 0x03	; 3
    1b4c:	89 e1       	ldi	r24, 0x19	; 25
    1b4e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    1b52:	63 e3       	ldi	r22, 0x33	; 51
    1b54:	8b e1       	ldi	r24, 0x1B	; 27
    1b56:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    1b5a:	67 e1       	ldi	r22, 0x17	; 23
    1b5c:	8d e1       	ldi	r24, 0x1D	; 29
    1b5e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    1b62:	60 e5       	ldi	r22, 0x50	; 80
    1b64:	8f e1       	ldi	r24, 0x1F	; 31
    1b66:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
//  reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
  
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    1b6a:	64 e1       	ldi	r22, 0x14	; 20
    1b6c:	81 e2       	ldi	r24, 0x21	; 33
    1b6e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    1b72:	6c ea       	ldi	r22, 0xAC	; 172
    1b74:	82 e2       	ldi	r24, 0x22	; 34
    1b76:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	//reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
	//reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
	//reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
  
	cmd_str(SNOP);
    1b7a:	8d e3       	ldi	r24, 0x3D	; 61
    1b7c:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
	//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    1b80:	6b e0       	ldi	r22, 0x0B	; 11
    1b82:	88 e0       	ldi	r24, 0x08	; 8
    1b84:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x13, 0x0D);            //
    1b88:	6d e0       	ldi	r22, 0x0D	; 13
    1b8a:	83 e1       	ldi	r24, 0x13	; 19
    1b8c:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    1b90:	64 e0       	ldi	r22, 0x04	; 4
    1b92:	86 e2       	ldi	r24, 0x26	; 38
    1b94:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
  
	//High performance RX
	reg_write(0x08, 0x0B);            //
    1b98:	6b e0       	ldi	r22, 0x0B	; 11
    1b9a:	88 e0       	ldi	r24, 0x08	; 8
    1b9c:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x0C, 0x1C);            //
    1ba0:	6c e1       	ldi	r22, 0x1C	; 28
    1ba2:	8c e0       	ldi	r24, 0x0C	; 12
    1ba4:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x10, 0x00);            //
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	80 e1       	ldi	r24, 0x10	; 16
    1bac:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x11, 0x04);            //
    1bb0:	64 e0       	ldi	r22, 0x04	; 4
    1bb2:	81 e1       	ldi	r24, 0x11	; 17
    1bb4:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x13, 0x05);            //
    1bb8:	65 e0       	ldi	r22, 0x05	; 5
    1bba:	83 e1       	ldi	r24, 0x13	; 19
    1bbc:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x1C, 0xA9);            //
    1bc0:	69 ea       	ldi	r22, 0xA9	; 169
    1bc2:	8c e1       	ldi	r24, 0x1C	; 28
    1bc4:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x1D, 0xCF);            //
    1bc8:	6f ec       	ldi	r22, 0xCF	; 207
    1bca:	8d e1       	ldi	r24, 0x1D	; 29
    1bcc:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x1E, 0x00);            //
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	8e e1       	ldi	r24, 0x1E	; 30
    1bd4:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x20, 0x03);            //
    1bd8:	63 e0       	ldi	r22, 0x03	; 3
    1bda:	80 e2       	ldi	r24, 0x20	; 32
    1bdc:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x2E, 0x00);            //
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	8e e2       	ldi	r24, 0x2E	; 46
    1be4:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write2F(0x00, 0x00);          //
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>

	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    1bf0:	68 e4       	ldi	r22, 0x48	; 72
    1bf2:	8a e0       	ldi	r24, 0x0A	; 10
    1bf4:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    1bf8:	65 e0       	ldi	r22, 0x05	; 5
    1bfa:	8b e0       	ldi	r24, 0x0B	; 11
    1bfc:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: 0x14           set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled
    1c00:	64 e0       	ldi	r22, 0x04	; 4
    1c02:	81 e2       	ldi	r24, 0x21	; 33
    1c04:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
  
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	8d e0       	ldi	r24, 0x0D	; 13
    1c0c:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	65 e0       	ldi	r22, 0x05	; 5
    1c14:	8e e0       	ldi	r24, 0x0E	; 14
    1c16:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <reg_write_bit>
  
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	67 e0       	ldi	r22, 0x07	; 7
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	66 e0       	ldi	r22, 0x06	; 6
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <reg_write_bit2F>
  
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	66 e0       	ldi	r22, 0x06	; 6
    1c32:	88 e0       	ldi	r24, 0x08	; 8
    1c34:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: 0x17        32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    1c38:	67 e1       	ldi	r22, 0x17	; 23
    1c3a:	89 e0       	ldi	r24, 0x09	; 9
    1c3c:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
  
	//set packets
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	86 e2       	ldi	r24, 0x26	; 38
    1c44:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)  
    1c48:	6f ef       	ldi	r22, 0xFF	; 255
    1c4a:	8e e2       	ldi	r24, 0x2E	; 46
    1c4c:	0e 94 a7 0c 	call	0x194e	; 0x194e <reg_write>
    
	//Frequency setting
	cmd_str(SNOP);
    1c50:	8d e3       	ldi	r24, 0x3D	; 61
    1c52:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    1c56:	6c e6       	ldi	r22, 0x6C	; 108
    1c58:	8c e0       	ldi	r24, 0x0C	; 12
    1c5a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    1c5e:	60 e8       	ldi	r22, 0x80	; 128
    1c60:	8d e0       	ldi	r24, 0x0D	; 13
    1c62:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    1c66:	83 e3       	ldi	r24, 0x33	; 51
    1c68:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
	delay_ms(250);
    1c6c:	8a ef       	ldi	r24, 0xFA	; 250
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    1c74:	87 e3       	ldi	r24, 0x37	; 55
    1c76:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
	delay_ms(250);
    1c7a:	8a ef       	ldi	r24, 0xFA	; 250
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	send_coms = 0;
    1c82:	10 92 3d 01 	sts	0x013D, r1

	cmd_str(SRX);                    // Put in RX mode
    1c86:	84 e3       	ldi	r24, 0x34	; 52
    1c88:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
    1c8c:	08 95       	ret

00001c8e <trans_check>:
	reg_write2F(reg, msg);
	return;
}

void trans_check(void)
{
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <trans_check+0x6>
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg = 0, CHIP_RDYn, state;
	
	get_status(&CHIP_RDYn, &state);
    1c98:	be 01       	movw	r22, r28
    1c9a:	6e 5f       	subi	r22, 0xFE	; 254
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <get_status>

	if(state == 0b110 || state == 0b111)
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	86 50       	subi	r24, 0x06	; 6
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	68 f5       	brcc	.+90     	; 0x1d08 <trans_check+0x7a>
	{
		cmd_str(SIDLE);
    1cae:	86 e3       	ldi	r24, 0x36	; 54
    1cb0:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
		//LED_toggle(LED3);
		//delay_ms(100);
		
		// Here we would send our message to the OBC.
		
		cmd_str(SNOP);
    1cb4:	8d e3       	ldi	r24, 0x3D	; 61
    1cb6:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
		trans_msg[0] = dir_FIFO_read(0x80);
    1cba:	80 e8       	ldi	r24, 0x80	; 128
    1cbc:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <dir_FIFO_read>
    1cc0:	80 93 3f 01 	sts	0x013F, r24
		trans_msg[1] = dir_FIFO_read(0x81);
    1cc4:	81 e8       	ldi	r24, 0x81	; 129
    1cc6:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <dir_FIFO_read>
    1cca:	80 93 40 01 	sts	0x0140, r24
		trans_msg[2] = dir_FIFO_read(0x82);
    1cce:	82 e8       	ldi	r24, 0x82	; 130
    1cd0:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <dir_FIFO_read>
    1cd4:	80 93 41 01 	sts	0x0141, r24
		trans_msg[3] = dir_FIFO_read(0x83);
    1cd8:	83 e8       	ldi	r24, 0x83	; 131
    1cda:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <dir_FIFO_read>
    1cde:	80 93 42 01 	sts	0x0142, r24
		trans_msg[4] = dir_FIFO_read(0x84);
    1ce2:	84 e8       	ldi	r24, 0x84	; 132
    1ce4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <dir_FIFO_read>
    1ce8:	80 93 43 01 	sts	0x0143, r24
		trans_msg[5] = dir_FIFO_read(0x85);
    1cec:	85 e8       	ldi	r24, 0x85	; 133
    1cee:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <dir_FIFO_read>
    1cf2:	80 93 44 01 	sts	0x0144, r24
			//LED_toggle(LED6);
			//delay_ms(100);
			//LED_toggle(LED6);
			//delay_ms(100);
		//}
		send_coms = 1;		// Indicates that in main() we will send trans_msg to the OBC via CAN.
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	80 93 3d 01 	sts	0x013D, r24
		
		cmd_str(SFRX);
    1cfc:	8a e3       	ldi	r24, 0x3A	; 58
    1cfe:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
		//reg_write2F(0xD2, 0x00);
		//reg_write2F(0xD4, 0xFF);
		
		//cmd_str(SFTX);
		
		cmd_str(SRX);
    1d02:	84 e3       	ldi	r24, 0x34	; 52
    1d04:	0e 94 df 0c 	call	0x19be	; 0x19be <cmd_str>
	}
	return;
}
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	08 95       	ret

00001d12 <__tablejump2__>:
    1d12:	ee 0f       	add	r30, r30
    1d14:	ff 1f       	adc	r31, r31

00001d16 <__tablejump__>:
    1d16:	05 90       	lpm	r0, Z+
    1d18:	f4 91       	lpm	r31, Z
    1d1a:	e0 2d       	mov	r30, r0
    1d1c:	09 94       	ijmp

00001d1e <_exit>:
    1d1e:	f8 94       	cli

00001d20 <__stop_program>:
    1d20:	ff cf       	rjmp	.-2      	; 0x1d20 <__stop_program>
