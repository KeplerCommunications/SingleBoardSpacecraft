
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000202  00800100  00800100  000002e0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004d1  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000340  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000353  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000134  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000235  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000020a  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_20>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	23 e0       	ldi	r18, 0x03	; 3
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  9c:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <led_init>:
*/
#include <avr/io.h>
#include "led.h"

void led_init(){
	DDRB |= (1<<6);
  a4:	26 9a       	sbi	0x04, 6	; 4
	DDRD |= 1;
  a6:	50 9a       	sbi	0x0a, 0	; 10
  a8:	08 95       	ret

000000aa <led_toggle>:
		case 2: PORTD |= 1<<PD0;  break;
	}
}

void led_toggle(uint8_t LED) {
	switch(LED){
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	19 f0       	breq	.+6      	; 0xb4 <led_toggle+0xa>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	31 f0       	breq	.+12     	; 0xbe <led_toggle+0x14>
  b2:	08 95       	ret
		case 1: PORTB ^= 1<<PB6; break;
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	89 27       	eor	r24, r25
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	08 95       	ret
		case 2: PORTD ^= 1<<PD0; break;
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 27       	eor	r24, r25
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	08 95       	ret

000000c8 <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
  c8:	e1 e6       	ldi	r30, 0x61	; 97
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	CLKPR = 0x00;
  d0:	10 82       	st	Z, r1

int main(void)
{		
	// Initialize I/O, Timer, ADC, CAN, and SPI
	sys_init();
	led_init();
  d2:	0e 94 52 00 	call	0xa4	; 0xa4 <led_init>
	uart_init();
  d6:	0e 94 c5 00 	call	0x18a	; 0x18a <uart_init>
		_delay_ms(100);		
		led_toggle(2);
		_delay_ms(200);
		if (uart_index){
			uint8_t i;
			for (i = 0; i < uart_index; i++){
  da:	d0 e0       	ldi	r29, 0x00	; 0
	led_init();
	uart_init();
	
	/*		Begin Main Program Loop					*/	
    while(1){	
		led_toggle(1);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 55 00 	call	0xaa	; 0xaa <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x20>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x2a>
  f2:	00 00       	nop
		_delay_ms(100);		
		led_toggle(2);
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 55 00 	call	0xaa	; 0xaa <led_toggle>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	81 ee       	ldi	r24, 0xE1	; 225
  fe:	94 e0       	ldi	r25, 0x04	; 4
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x38>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x42>
 10a:	00 00       	nop
		_delay_ms(200);
		if (uart_index){
 10c:	80 91 01 01 	lds	r24, 0x0101
 110:	88 23       	and	r24, r24
 112:	21 f3       	breq	.-56     	; 0xdc <main+0x14>
			uint8_t i;
			for (i = 0; i < uart_index; i++){
 114:	80 91 01 01 	lds	r24, 0x0101
 118:	88 23       	and	r24, r24
 11a:	79 f0       	breq	.+30     	; 0x13a <main+0x72>
 11c:	cd 2f       	mov	r28, r29
				uart_transmit(uart_buffer[i]+1);
 11e:	ec 2f       	mov	r30, r28
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 5f       	subi	r30, 0xFE	; 254
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	80 81       	ld	r24, Z
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_transmit>
		_delay_ms(100);		
		led_toggle(2);
		_delay_ms(200);
		if (uart_index){
			uint8_t i;
			for (i = 0; i < uart_index; i++){
 12e:	cf 5f       	subi	r28, 0xFF	; 255
 130:	80 91 01 01 	lds	r24, 0x0101
 134:	c8 17       	cp	r28, r24
 136:	98 f3       	brcs	.-26     	; 0x11e <main+0x56>
 138:	01 c0       	rjmp	.+2      	; 0x13c <main+0x74>
 13a:	cd 2f       	mov	r28, r29
				uart_transmit(uart_buffer[i]+1);
			}
			uart_index -= i;
 13c:	80 91 01 01 	lds	r24, 0x0101
 140:	8c 1b       	sub	r24, r28
 142:	80 93 01 01 	sts	0x0101, r24
 146:	ca cf       	rjmp	.-108    	; 0xdc <main+0x14>

00000148 <__vector_20>:

volatile uint8_t uart_buffer[UART_BUFF_LEN] = {0};
volatile uint8_t uart_index = 0;
volatile uint8_t uart_overflow = 0;

ISR (LIN_TC_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	uart_buffer[uart_index] = LINDAT;
 158:	e0 91 01 01 	lds	r30, 0x0101
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 91 d2 00 	lds	r24, 0x00D2
 162:	ee 5f       	subi	r30, 0xFE	; 254
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 83       	st	Z, r24
	uart_index++;
 168:	80 91 01 01 	lds	r24, 0x0101
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 01 01 	sts	0x0101, r24
	uart_overflow = uart_index >= UART_BUFF_LEN;
 172:	80 91 01 01 	lds	r24, 0x0101
 176:	10 92 00 01 	sts	0x0100, r1
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <uart_init>:
/************************************************************************/

void uart_init(void)
{
	// initialize chip
	DDRD |= 1<<3;	 // PD3 = TXD is output
 18a:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~(1<<4); // PD4 = RXD is input
 18c:	54 98       	cbi	0x0a, 4	; 10
	
	// Initialize UART Registers
	LINCR = (1 << LSWRES);                    // Software reset
 18e:	e8 ec       	ldi	r30, 0xC8	; 200
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	80 83       	st	Z, r24
	LINBRRH = (((F_CPU/UART_BAUD)/16)-1)>>8;  // Baudrate top 8 bits
 196:	10 92 ce 00 	sts	0x00CE, r1
	LINBRRL = (((F_CPU/UART_BAUD)/16)-1);     // Baudrate lower 8 bits
 19a:	83 e3       	ldi	r24, 0x33	; 51
 19c:	80 93 cd 00 	sts	0x00CD, r24
	LINBTR = (1 << LDISR) | (1 << LBT4);      
 1a0:	80 e9       	ldi	r24, 0x90	; 144
 1a2:	80 93 cc 00 	sts	0x00CC, r24
	LINCR = (1<<LENA)|(1<<LCMD2)|(1<<LCMD1)|(1<<LCMD0); // Turn on UART for full duplex
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	80 83       	st	Z, r24
	LINENIR = 0b00000001;                     // Set the ISR flags for just the receive
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 ca 00 	sts	0x00CA, r24
	LINSIR = 0b00000001;
 1b0:	80 93 c9 00 	sts	0x00C9, r24
	sei();
 1b4:	78 94       	sei
 1b6:	08 95       	ret

000001b8 <uart_transmit>:
}

 uint8_t uart_transmit (uint8_t msg) {
 1b8:	cf 92       	push	r12
 1ba:	df 92       	push	r13
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	c8 2e       	mov	r12, r24
	 uint64_t timeout = F_CPU*30;
	 while ((LINSIR & (1 << LBUSY)) && (timeout--)); // Wait while the UART is busy.
 1ca:	dd 24       	eor	r13, r13
 1cc:	d3 94       	inc	r13
 1ce:	0f 2e       	mov	r0, r31
 1d0:	fc e1       	ldi	r31, 0x1C	; 28
 1d2:	ef 2e       	mov	r14, r31
 1d4:	f0 2d       	mov	r31, r0
 1d6:	0f 2e       	mov	r0, r31
 1d8:	fe e4       	ldi	r31, 0x4E	; 78
 1da:	ff 2e       	mov	r15, r31
 1dc:	f0 2d       	mov	r31, r0
 1de:	0e e0       	ldi	r16, 0x0E	; 14
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e9 ec       	ldi	r30, 0xC9	; 201
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	a0 81       	ld	r26, Z
 1ee:	a4 ff       	sbrs	r26, 4
 1f0:	17 c0       	rjmp	.+46     	; 0x220 <uart_transmit+0x68>
 1f2:	2d 2d       	mov	r18, r13
 1f4:	3e 2d       	mov	r19, r14
 1f6:	4f 2d       	mov	r20, r15
 1f8:	50 2f       	mov	r21, r16
 1fa:	61 2f       	mov	r22, r17
 1fc:	7d 2f       	mov	r23, r29
 1fe:	8c 2f       	mov	r24, r28
 200:	9b 2f       	mov	r25, r27
 202:	af ef       	ldi	r26, 0xFF	; 255
 204:	0e 94 1c 01 	call	0x238	; 0x238 <__adddi3_s8>
 208:	d2 2e       	mov	r13, r18
 20a:	e3 2e       	mov	r14, r19
 20c:	f4 2e       	mov	r15, r20
 20e:	05 2f       	mov	r16, r21
 210:	16 2f       	mov	r17, r22
 212:	d7 2f       	mov	r29, r23
 214:	c8 2f       	mov	r28, r24
 216:	b9 2f       	mov	r27, r25
 218:	a0 e0       	ldi	r26, 0x00	; 0
 21a:	0e 94 28 01 	call	0x250	; 0x250 <__cmpdi2_s8>
 21e:	31 f7       	brne	.-52     	; 0x1ec <uart_transmit+0x34>
	 LINDAT = msg;
 220:	c0 92 d2 00 	sts	0x00D2, r12
	 return 0;
 }
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	cf 90       	pop	r12
 236:	08 95       	ret

00000238 <__adddi3_s8>:
 238:	00 24       	eor	r0, r0
 23a:	a7 fd       	sbrc	r26, 7
 23c:	00 94       	com	r0
 23e:	2a 0f       	add	r18, r26
 240:	30 1d       	adc	r19, r0
 242:	40 1d       	adc	r20, r0
 244:	50 1d       	adc	r21, r0
 246:	60 1d       	adc	r22, r0
 248:	70 1d       	adc	r23, r0
 24a:	80 1d       	adc	r24, r0
 24c:	90 1d       	adc	r25, r0
 24e:	08 95       	ret

00000250 <__cmpdi2_s8>:
 250:	00 24       	eor	r0, r0
 252:	a7 fd       	sbrc	r26, 7
 254:	00 94       	com	r0
 256:	2a 17       	cp	r18, r26
 258:	30 05       	cpc	r19, r0
 25a:	40 05       	cpc	r20, r0
 25c:	50 05       	cpc	r21, r0
 25e:	60 05       	cpc	r22, r0
 260:	70 05       	cpc	r23, r0
 262:	80 05       	cpc	r24, r0
 264:	90 05       	cpc	r25, r0
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
