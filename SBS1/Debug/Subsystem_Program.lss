
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fa  00800100  00001f72  00002006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020b  008003fa  008003fa  00002300  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002729  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000947  00000000  00000000  00004c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b49  00000000  00000000  0000557c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c4  00000000  00000000  000060c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000511  00000000  00000000  0000658c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000135f  00000000  00000000  00006a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00007dfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_20>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__vector_28>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	d3 02       	muls	r29, r19
      7e:	d8 02       	muls	r29, r24
      80:	dd 02       	muls	r29, r29
      82:	e2 02       	muls	r30, r18
      84:	e7 02       	muls	r30, r23
      86:	ec 02       	muls	r30, r28
      88:	f1 02       	muls	r31, r17
      8a:	f6 02       	muls	r31, r22
      8c:	fb 02       	muls	r31, r27
      8e:	00 03       	mulsu	r16, r16
      90:	05 03       	mulsu	r16, r21
      92:	0a 03       	fmul	r16, r18
      94:	0f 03       	fmul	r16, r23
      96:	14 03       	mulsu	r17, r20
      98:	95 07       	cpc	r25, r21
      9a:	9a 07       	cpc	r25, r26
      9c:	9f 07       	cpc	r25, r31
      9e:	a4 07       	cpc	r26, r20
      a0:	a9 07       	cpc	r26, r25
      a2:	ae 07       	cpc	r26, r30
      a4:	b3 07       	cpc	r27, r19
      a6:	b8 07       	cpc	r27, r24

000000a8 <__trampolines_end>:
      a8:	63 64       	ori	r22, 0x43	; 67
      aa:	69 6e       	ori	r22, 0xE9	; 233
      ac:	6f 70       	andi	r22, 0x0F	; 15
      ae:	73 75       	andi	r23, 0x53	; 83
      b0:	78 58       	subi	r23, 0x88	; 136
      b2:	5b 00       	.word	0x005b	; ????

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	13 e0       	ldi	r17, 0x03	; 3
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e2 e7       	ldi	r30, 0x72	; 114
      c8:	ff e1       	ldi	r31, 0x1F	; 31
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	aa 3f       	cpi	r26, 0xFA	; 250
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	26 e0       	ldi	r18, 0x06	; 6
      d8:	aa ef       	ldi	r26, 0xFA	; 250
      da:	b3 e0       	ldi	r27, 0x03	; 3
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a5 30       	cpi	r26, 0x05	; 5
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
      ea:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <led_init>:
*/
#include <avr/io.h>
#include "led.h"

void led_init(){
	DDRB |= (1<<6);
      f2:	26 9a       	sbi	0x04, 6	; 4
	DDRD |= 1;
      f4:	50 9a       	sbi	0x0a, 0	; 10
	DDRC |= 1;
      f6:	38 9a       	sbi	0x07, 0	; 7
      f8:	08 95       	ret

000000fa <led_toggle>:
		case 3: PORTC |= 1<<PC0;  break;
	}
}

void led_toggle(uint8_t LED) {
	switch(LED){
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	49 f0       	breq	.+18     	; 0x110 <led_toggle+0x16>
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	61 f0       	breq	.+24     	; 0x11a <led_toggle+0x20>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	71 f4       	brne	.+28     	; 0x122 <led_toggle+0x28>
		case 1: PORTB ^= 1<<PB6; break;
     106:	95 b1       	in	r25, 0x05	; 5
     108:	80 e4       	ldi	r24, 0x40	; 64
     10a:	89 27       	eor	r24, r25
     10c:	85 b9       	out	0x05, r24	; 5
     10e:	08 95       	ret
		case 2: PORTD ^= 1<<PD0; break;
     110:	9b b1       	in	r25, 0x0b	; 11
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	89 27       	eor	r24, r25
     116:	8b b9       	out	0x0b, r24	; 11
     118:	08 95       	ret
		case 3: PORTC ^= 1<<PC0; break;
     11a:	98 b1       	in	r25, 0x08	; 8
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	89 27       	eor	r24, r25
     120:	88 b9       	out	0x08, r24	; 8
     122:	08 95       	ret

00000124 <usr_serial_cmd>:
			#endif
		}
	}
}

void usr_serial_cmd(){
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	c1 50       	subi	r28, 0x01	; 1
     13e:	d1 40       	sbci	r29, 0x01	; 1
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
  //inputs command from serial monitor
  if(uart_index){
     14a:	80 91 00 04 	lds	r24, 0x0400
     14e:	88 23       	and	r24, r24
     150:	09 f4       	brne	.+2      	; 0x154 <usr_serial_cmd+0x30>
     152:	12 c1       	rjmp	.+548    	; 0x378 <usr_serial_cmd+0x254>
	int count = 0;
	uint8_t isCommand = 0;
	uint8_t msgLen;
	for(msgLen = 0; msgLen <= uart_index; msgLen++){
     154:	80 91 00 04 	lds	r24, 0x0400
		if (uart_buffer[msgLen] == '!'){
     158:	80 91 01 04 	lds	r24, 0x0401
     15c:	81 32       	cpi	r24, 0x21	; 33
     15e:	09 f4       	brne	.+2      	; 0x162 <usr_serial_cmd+0x3e>
     160:	e6 c0       	rjmp	.+460    	; 0x32e <usr_serial_cmd+0x20a>
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	08 c0       	rjmp	.+16     	; 0x176 <usr_serial_cmd+0x52>
     166:	e1 2f       	mov	r30, r17
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ef 5f       	subi	r30, 0xFF	; 255
     16c:	fb 4f       	sbci	r31, 0xFB	; 251
     16e:	80 81       	ld	r24, Z
     170:	81 32       	cpi	r24, 0x21	; 33
     172:	09 f4       	brne	.+2      	; 0x176 <usr_serial_cmd+0x52>
     174:	dd c0       	rjmp	.+442    	; 0x330 <usr_serial_cmd+0x20c>
  //inputs command from serial monitor
  if(uart_index){
	int count = 0;
	uint8_t isCommand = 0;
	uint8_t msgLen;
	for(msgLen = 0; msgLen <= uart_index; msgLen++){
     176:	1f 5f       	subi	r17, 0xFF	; 255
     178:	80 91 00 04 	lds	r24, 0x0400
     17c:	81 17       	cp	r24, r17
     17e:	98 f7       	brcc	.-26     	; 0x166 <usr_serial_cmd+0x42>
     180:	fb c0       	rjmp	.+502    	; 0x378 <usr_serial_cmd+0x254>
	char cmd[128] = {0};
	char cD1[128] = {0} ;
	char cD2[1] = {0} ;
	// Got the reset command
	if(strcmp("RESET", (char*)uart_buffer) == 0){
		transceiver_init(0);
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 96 06 	call	0xd2c	; 0xd2c <transceiver_init>
	else {
		uart_printf("Error: Invalid command\n");
	}
	// Reset the UART Buffer. WARNING: if we get a msg as this happens it will be corrupt
	// memcpy((void*)uart_buffer, (void*)uart_buffer+msgLen+1, UART_BUFF_LEN-(msgLen+1));
	for (count = 0; count < UART_BUFF_LEN - (msgLen + 1); count++){
     188:	2f ef       	ldi	r18, 0xFF	; 255
     18a:	31 e0       	ldi	r19, 0x01	; 1
     18c:	2e 19       	sub	r18, r14
     18e:	3f 09       	sbc	r19, r15
     190:	12 16       	cp	r1, r18
     192:	13 06       	cpc	r1, r19
     194:	0c f4       	brge	.+2      	; 0x198 <usr_serial_cmd+0x74>
     196:	af c0       	rjmp	.+350    	; 0x2f6 <usr_serial_cmd+0x1d2>
     198:	c3 c0       	rjmp	.+390    	; 0x320 <usr_serial_cmd+0x1fc>
	char cD2[1] = {0} ;
	// Got the reset command
	if(strcmp("RESET", (char*)uart_buffer) == 0){
		transceiver_init(0);
	}
	else if ((count = sscanf((char*)uart_buffer, "%[^:]:%*c%[^:]%*c%*c%c", cmd, cD1, cD2)) >= 2){
     19a:	ce 01       	movw	r24, r28
     19c:	8f 5f       	subi	r24, 0xFF	; 255
     19e:	9e 4f       	sbci	r25, 0xFE	; 254
     1a0:	9f 93       	push	r25
     1a2:	8f 93       	push	r24
     1a4:	9a 95       	dec	r25
     1a6:	9f 93       	push	r25
     1a8:	8f 93       	push	r24
     1aa:	80 58       	subi	r24, 0x80	; 128
     1ac:	9f 4f       	sbci	r25, 0xFF	; 255
     1ae:	9f 93       	push	r25
     1b0:	8f 93       	push	r24
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	9f 93       	push	r25
     1b8:	8f 93       	push	r24
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	94 e0       	ldi	r25, 0x04	; 4
     1be:	9f 93       	push	r25
     1c0:	8f 93       	push	r24
     1c2:	0e 94 a1 09 	call	0x1342	; 0x1342 <sscanf>
     1c6:	5c 01       	movw	r10, r24
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	cd bf       	out	0x3d, r28	; 61
     1d2:	92 e0       	ldi	r25, 0x02	; 2
     1d4:	a9 16       	cp	r10, r25
     1d6:	b1 04       	cpc	r11, r1
     1d8:	0c f4       	brge	.+2      	; 0x1dc <usr_serial_cmd+0xb8>
     1da:	84 c0       	rjmp	.+264    	; 0x2e4 <usr_serial_cmd+0x1c0>
		char* message = 0;
		uint8_t destination = 0;
		// If we just have a send we will broadcast
		if (strcmp(cmd,"SEND")== 0 && count == 2){
     1dc:	68 e1       	ldi	r22, 0x18	; 24
     1de:	71 e0       	ldi	r23, 0x01	; 1
     1e0:	ce 01       	movw	r24, r28
     1e2:	8f 57       	subi	r24, 0x7F	; 127
     1e4:	9f 4f       	sbci	r25, 0xFF	; 255
     1e6:	0e 94 76 09 	call	0x12ec	; 0x12ec <strcmp>
     1ea:	89 2b       	or	r24, r25
     1ec:	69 f5       	brne	.+90     	; 0x248 <usr_serial_cmd+0x124>
     1ee:	a2 e0       	ldi	r26, 0x02	; 2
     1f0:	aa 16       	cp	r10, r26
     1f2:	b1 04       	cpc	r11, r1
     1f4:	69 f1       	breq	.+90     	; 0x250 <usr_serial_cmd+0x12c>
			message = cD1;
			destination = 0xFF; // Broadcast
		}
		// Otherwise get the address and send to that
		else if (strcmp(cmd, "SEND") ==  0 && cD1[strlen(cD1)-2] == 'T' && cD1[strlen(cD1)-1] == 'O'){
     1f6:	fe 01       	movw	r30, r28
     1f8:	31 96       	adiw	r30, 0x01	; 1
     1fa:	df 01       	movw	r26, r30
     1fc:	0d 90       	ld	r0, X+
     1fe:	00 20       	and	r0, r0
     200:	e9 f7       	brne	.-6      	; 0x1fc <usr_serial_cmd+0xd8>
     202:	11 97       	sbiw	r26, 0x01	; 1
     204:	cd 01       	movw	r24, r26
     206:	8e 1b       	sub	r24, r30
     208:	9f 0b       	sbc	r25, r31
     20a:	ef ef       	ldi	r30, 0xFF	; 255
     20c:	ff ef       	ldi	r31, 0xFF	; 255
     20e:	ec 0f       	add	r30, r28
     210:	fd 1f       	adc	r31, r29
     212:	e8 0f       	add	r30, r24
     214:	f9 1f       	adc	r31, r25
     216:	20 81       	ld	r18, Z
     218:	24 35       	cpi	r18, 0x54	; 84
     21a:	f9 f4       	brne	.+62     	; 0x25a <usr_serial_cmd+0x136>
     21c:	fe 01       	movw	r30, r28
     21e:	e8 0f       	add	r30, r24
     220:	f9 1f       	adc	r31, r25
     222:	20 81       	ld	r18, Z
     224:	2f 34       	cpi	r18, 0x4F	; 79
     226:	e9 f4       	brne	.+58     	; 0x262 <usr_serial_cmd+0x13e>
			cD1[strlen(cD1)-3] = '\0';
     228:	ee ef       	ldi	r30, 0xFE	; 254
     22a:	ff ef       	ldi	r31, 0xFF	; 255
     22c:	ec 0f       	add	r30, r28
     22e:	fd 1f       	adc	r31, r29
     230:	e8 0f       	add	r30, r24
     232:	f9 1f       	adc	r31, r25
     234:	10 82       	st	Z, r1
			message = cD1;
			destination = cD2[0];
     236:	cf 5f       	subi	r28, 0xFF	; 255
     238:	de 4f       	sbci	r29, 0xFE	; 254
     23a:	08 81       	ld	r16, Y
     23c:	c1 50       	subi	r28, 0x01	; 1
     23e:	d1 40       	sbci	r29, 0x01	; 1
			destination = 0xFF; // Broadcast
		}
		// Otherwise get the address and send to that
		else if (strcmp(cmd, "SEND") ==  0 && cD1[strlen(cD1)-2] == 'T' && cD1[strlen(cD1)-1] == 'O'){
			cD1[strlen(cD1)-3] = '\0';
			message = cD1;
     240:	fe 01       	movw	r30, r28
     242:	31 96       	adiw	r30, 0x01	; 1
     244:	6f 01       	movw	r12, r30
     246:	10 c0       	rjmp	.+32     	; 0x268 <usr_serial_cmd+0x144>
	if(strcmp("RESET", (char*)uart_buffer) == 0){
		transceiver_init(0);
	}
	else if ((count = sscanf((char*)uart_buffer, "%[^:]:%*c%[^:]%*c%*c%c", cmd, cD1, cD2)) >= 2){
		char* message = 0;
		uint8_t destination = 0;
     248:	00 e0       	ldi	r16, 0x00	; 0
	// Got the reset command
	if(strcmp("RESET", (char*)uart_buffer) == 0){
		transceiver_init(0);
	}
	else if ((count = sscanf((char*)uart_buffer, "%[^:]:%*c%[^:]%*c%*c%c", cmd, cD1, cD2)) >= 2){
		char* message = 0;
     24a:	c1 2c       	mov	r12, r1
     24c:	d1 2c       	mov	r13, r1
     24e:	0c c0       	rjmp	.+24     	; 0x268 <usr_serial_cmd+0x144>
		uint8_t destination = 0;
		// If we just have a send we will broadcast
		if (strcmp(cmd,"SEND")== 0 && count == 2){
			message = cD1;
			destination = 0xFF; // Broadcast
     250:	0f ef       	ldi	r16, 0xFF	; 255
	else if ((count = sscanf((char*)uart_buffer, "%[^:]:%*c%[^:]%*c%*c%c", cmd, cD1, cD2)) >= 2){
		char* message = 0;
		uint8_t destination = 0;
		// If we just have a send we will broadcast
		if (strcmp(cmd,"SEND")== 0 && count == 2){
			message = cD1;
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	6c 01       	movw	r12, r24
     258:	07 c0       	rjmp	.+14     	; 0x268 <usr_serial_cmd+0x144>
	if(strcmp("RESET", (char*)uart_buffer) == 0){
		transceiver_init(0);
	}
	else if ((count = sscanf((char*)uart_buffer, "%[^:]:%*c%[^:]%*c%*c%c", cmd, cD1, cD2)) >= 2){
		char* message = 0;
		uint8_t destination = 0;
     25a:	00 e0       	ldi	r16, 0x00	; 0
	// Got the reset command
	if(strcmp("RESET", (char*)uart_buffer) == 0){
		transceiver_init(0);
	}
	else if ((count = sscanf((char*)uart_buffer, "%[^:]:%*c%[^:]%*c%*c%c", cmd, cD1, cD2)) >= 2){
		char* message = 0;
     25c:	c1 2c       	mov	r12, r1
     25e:	d1 2c       	mov	r13, r1
     260:	03 c0       	rjmp	.+6      	; 0x268 <usr_serial_cmd+0x144>
		uint8_t destination = 0;
     262:	00 e0       	ldi	r16, 0x00	; 0
	// Got the reset command
	if(strcmp("RESET", (char*)uart_buffer) == 0){
		transceiver_init(0);
	}
	else if ((count = sscanf((char*)uart_buffer, "%[^:]:%*c%[^:]%*c%*c%c", cmd, cD1, cD2)) >= 2){
		char* message = 0;
     264:	c1 2c       	mov	r12, r1
     266:	d1 2c       	mov	r13, r1
		else if (strcmp(cmd, "SEND") ==  0 && cD1[strlen(cD1)-2] == 'T' && cD1[strlen(cD1)-1] == 'O'){
			cD1[strlen(cD1)-3] = '\0';
			message = cD1;
			destination = cD2[0];
		}
		if (strlen(message) > 0 && strlen(message) < 0x7E){
     268:	d6 01       	movw	r26, r12
     26a:	8c 91       	ld	r24, X
     26c:	88 23       	and	r24, r24
     26e:	a9 f1       	breq	.+106    	; 0x2da <usr_serial_cmd+0x1b6>
     270:	f6 01       	movw	r30, r12
     272:	01 90       	ld	r0, Z+
     274:	00 20       	and	r0, r0
     276:	e9 f7       	brne	.-6      	; 0x272 <usr_serial_cmd+0x14e>
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	ec 19       	sub	r30, r12
     27c:	fd 09       	sbc	r31, r13
     27e:	ee 37       	cpi	r30, 0x7E	; 126
     280:	f1 05       	cpc	r31, r1
     282:	58 f5       	brcc	.+86     	; 0x2da <usr_serial_cmd+0x1b6>
			uart_sendmsg("\n*** Sending \""); 
     284:	8d e1       	ldi	r24, 0x1D	; 29
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
			uart_sendmsg(message); // Not using printf since message might be too long
     28c:	c6 01       	movw	r24, r12
     28e:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
			uart_transmit('"');
     292:	82 e2       	ldi	r24, 0x22	; 34
     294:	0e 94 36 08 	call	0x106c	; 0x106c <uart_transmit>
			if (count > 2){
     298:	b3 e0       	ldi	r27, 0x03	; 3
     29a:	ab 16       	cp	r10, r27
     29c:	b1 04       	cpc	r11, r1
     29e:	64 f0       	brlt	.+24     	; 0x2b8 <usr_serial_cmd+0x194>
				uart_printf(" to address: %d", destination);
     2a0:	1f 92       	push	r1
     2a2:	0f 93       	push	r16
     2a4:	8c e2       	ldi	r24, 0x2C	; 44
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	9f 93       	push	r25
     2aa:	8f 93       	push	r24
     2ac:	0e 94 9c 08 	call	0x1138	; 0x1138 <uart_printf>
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
			}
			uart_sendmsg(" ***\n");
     2b8:	8c e3       	ldi	r24, 0x3C	; 60
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
			transceiver_send((uint8_t*)message, destination, strlen(message));
     2c0:	f6 01       	movw	r30, r12
     2c2:	01 90       	ld	r0, Z+
     2c4:	00 20       	and	r0, r0
     2c6:	e9 f7       	brne	.-6      	; 0x2c2 <usr_serial_cmd+0x19e>
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	af 01       	movw	r20, r30
     2cc:	4c 19       	sub	r20, r12
     2ce:	5d 09       	sbc	r21, r13
     2d0:	60 2f       	mov	r22, r16
     2d2:	c6 01       	movw	r24, r12
     2d4:	0e 94 f7 06 	call	0xdee	; 0xdee <transceiver_send>
     2d8:	57 cf       	rjmp	.-338    	; 0x188 <usr_serial_cmd+0x64>
		}
		else {
			uart_sendmsg("Error: processing send command\n");
     2da:	82 e4       	ldi	r24, 0x42	; 66
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     2e2:	52 cf       	rjmp	.-348    	; 0x188 <usr_serial_cmd+0x64>
		}
	}
	else {
		uart_printf("Error: Invalid command\n");
     2e4:	82 e6       	ldi	r24, 0x62	; 98
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	0e 94 9c 08 	call	0x1138	; 0x1138 <uart_printf>
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	49 cf       	rjmp	.-366    	; 0x188 <usr_serial_cmd+0x64>
	}
	// Reset the UART Buffer. WARNING: if we get a msg as this happens it will be corrupt
	// memcpy((void*)uart_buffer, (void*)uart_buffer+msgLen+1, UART_BUFF_LEN-(msgLen+1));
	for (count = 0; count < UART_BUFF_LEN - (msgLen + 1); count++){
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	41 2f       	mov	r20, r17
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	4f 5f       	subi	r20, 0xFF	; 255
     300:	5f 4f       	sbci	r21, 0xFF	; 255
     302:	fa 01       	movw	r30, r20
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
		uart_buffer[count] = uart_buffer[count+msgLen+1];
     308:	ef 5f       	subi	r30, 0xFF	; 255
     30a:	fb 4f       	sbci	r31, 0xFB	; 251
     30c:	60 81       	ld	r22, Z
     30e:	dc 01       	movw	r26, r24
     310:	af 5f       	subi	r26, 0xFF	; 255
     312:	bb 4f       	sbci	r27, 0xFB	; 251
     314:	6c 93       	st	X, r22
		uart_buffer[count+msgLen + 1] = 0;
     316:	10 82       	st	Z, r1
	else {
		uart_printf("Error: Invalid command\n");
	}
	// Reset the UART Buffer. WARNING: if we get a msg as this happens it will be corrupt
	// memcpy((void*)uart_buffer, (void*)uart_buffer+msgLen+1, UART_BUFF_LEN-(msgLen+1));
	for (count = 0; count < UART_BUFF_LEN - (msgLen + 1); count++){
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	82 17       	cp	r24, r18
     31c:	93 07       	cpc	r25, r19
     31e:	89 f7       	brne	.-30     	; 0x302 <usr_serial_cmd+0x1de>
		uart_buffer[count] = uart_buffer[count+msgLen+1];
		uart_buffer[count+msgLen + 1] = 0;
	}
	uart_index -= msgLen + 1;
     320:	80 91 00 04 	lds	r24, 0x0400
     324:	81 50       	subi	r24, 0x01	; 1
     326:	81 1b       	sub	r24, r17
     328:	80 93 00 04 	sts	0x0400, r24
     32c:	25 c0       	rjmp	.+74     	; 0x378 <usr_serial_cmd+0x254>
  if(uart_index){
	int count = 0;
	uint8_t isCommand = 0;
	uint8_t msgLen;
	for(msgLen = 0; msgLen <= uart_index; msgLen++){
		if (uart_buffer[msgLen] == '!'){
     32e:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
	}
	if (isCommand == 0)
		return;
	uart_buffer[msgLen] = 0;
     330:	e1 2e       	mov	r14, r17
     332:	f1 2c       	mov	r15, r1
     334:	f7 01       	movw	r30, r14
     336:	ef 5f       	subi	r30, 0xFF	; 255
     338:	fb 4f       	sbci	r31, 0xFB	; 251
     33a:	10 82       	st	Z, r1
	char cmd[128] = {0};
     33c:	fe 01       	movw	r30, r28
     33e:	ef 57       	subi	r30, 0x7F	; 127
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	80 e8       	ldi	r24, 0x80	; 128
     344:	df 01       	movw	r26, r30
     346:	98 2f       	mov	r25, r24
     348:	1d 92       	st	X+, r1
     34a:	9a 95       	dec	r25
     34c:	e9 f7       	brne	.-6      	; 0x348 <usr_serial_cmd+0x224>
	char cD1[128] = {0} ;
     34e:	e0 58       	subi	r30, 0x80	; 128
     350:	f1 09       	sbc	r31, r1
     352:	df 01       	movw	r26, r30
     354:	1d 92       	st	X+, r1
     356:	8a 95       	dec	r24
     358:	e9 f7       	brne	.-6      	; 0x354 <usr_serial_cmd+0x230>
	char cD2[1] = {0} ;
     35a:	cf 5f       	subi	r28, 0xFF	; 255
     35c:	de 4f       	sbci	r29, 0xFE	; 254
     35e:	18 82       	st	Y, r1
     360:	c1 50       	subi	r28, 0x01	; 1
     362:	d1 40       	sbci	r29, 0x01	; 1
	// Got the reset command
	if(strcmp("RESET", (char*)uart_buffer) == 0){
     364:	61 e0       	ldi	r22, 0x01	; 1
     366:	74 e0       	ldi	r23, 0x04	; 4
     368:	8a e7       	ldi	r24, 0x7A	; 122
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 76 09 	call	0x12ec	; 0x12ec <strcmp>
     370:	89 2b       	or	r24, r25
     372:	09 f4       	brne	.+2      	; 0x376 <usr_serial_cmd+0x252>
     374:	06 cf       	rjmp	.-500    	; 0x182 <usr_serial_cmd+0x5e>
     376:	11 cf       	rjmp	.-478    	; 0x19a <usr_serial_cmd+0x76>
		uart_buffer[count] = uart_buffer[count+msgLen+1];
		uart_buffer[count+msgLen + 1] = 0;
	}
	uart_index -= msgLen + 1;
  }	
     378:	cf 5f       	subi	r28, 0xFF	; 255
     37a:	de 4f       	sbci	r29, 0xFE	; 254
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	cf 90       	pop	r12
     396:	bf 90       	pop	r11
     398:	af 90       	pop	r10
     39a:	08 95       	ret

0000039c <main>:
volatile uint8_t CTC_flag;	// Variable used in timer.c
uint8_t status;
uint8_t* msg;

int main(void){
	CLKPR |= 1<<CLKPCE; // Enable clock pre-scaler change
     39c:	e1 e6       	ldi	r30, 0x61	; 97
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	80 68       	ori	r24, 0x80	; 128
     3a4:	80 83       	st	Z, r24
	CLKPR  = 0;         // Set clock pre-scaler to 1 (fast as possible)
     3a6:	10 82       	st	Z, r1
	cli();
     3a8:	f8 94       	cli
	// Initialize interrupt based services first
	wdt_init();
     3aa:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <wdt_init>
	spi_init();
     3ae:	0e 94 44 02 	call	0x488	; 0x488 <spi_init>
	uart_init();
     3b2:	0e 94 1f 08 	call	0x103e	; 0x103e <uart_init>
	sei();
     3b6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	2f ef       	ldi	r18, 0xFF	; 255
     3ba:	80 e7       	ldi	r24, 0x70	; 112
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	21 50       	subi	r18, 0x01	; 1
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	90 40       	sbci	r25, 0x00	; 0
     3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x22>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x2c>
     3c8:	00 00       	nop
	long int lastStatus = 0;
	
	_delay_ms(100); // wait for uart to initialize

	uart_sendmsg("Starting initialize... \n");
     3ca:	80 e8       	ldi	r24, 0x80	; 128
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
	// Initialize remainder of services
	led_init();
     3d2:	0e 94 79 00 	call	0xf2	; 0xf2 <led_init>
	led_toggle(1);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 7d 00 	call	0xfa	; 0xfa <led_toggle>
	uart_sendmsg("Completed LED initialize... \n");
     3dc:	89 e9       	ldi	r24, 0x99	; 153
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
	transceiver_init(1);
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 96 06 	call	0xd2c	; 0xd2c <transceiver_init>
	uart_sendmsg("Completed TRS initialize... \n");
     3ea:	87 eb       	ldi	r24, 0xB7	; 183
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
	// Initialize interrupt based services first
	wdt_init();
	spi_init();
	uart_init();
	sei();
	long int lastStatus = 0;
     3f2:	c1 2c       	mov	r12, r1
     3f4:	d1 2c       	mov	r13, r1
     3f6:	76 01       	movw	r14, r12
	uart_sendmsg("Completed LED initialize... \n");
	transceiver_init(1);
	uart_sendmsg("Completed TRS initialize... \n");
	/*		Begin Main Program Loop					*/	
    while(1){
		usr_serial_cmd();
     3f8:	0e 94 92 00 	call	0x124	; 0x124 <usr_serial_cmd>
		transceiver_run();
     3fc:	0e 94 88 03 	call	0x710	; 0x710 <transceiver_run>
		if ((millis()-lastStatus) >= 1000){
     400:	80 91 01 06 	lds	r24, 0x0601
     404:	90 91 02 06 	lds	r25, 0x0602
     408:	a0 91 03 06 	lds	r26, 0x0603
     40c:	b0 91 04 06 	lds	r27, 0x0604
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	aa 1f       	adc	r26, r26
     416:	bb 1f       	adc	r27, r27
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	aa 1f       	adc	r26, r26
     41e:	bb 1f       	adc	r27, r27
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	aa 1f       	adc	r26, r26
     426:	bb 1f       	adc	r27, r27
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	aa 1f       	adc	r26, r26
     42e:	bb 1f       	adc	r27, r27
     430:	8c 19       	sub	r24, r12
     432:	9d 09       	sbc	r25, r13
     434:	ae 09       	sbc	r26, r14
     436:	bf 09       	sbc	r27, r15
     438:	88 3e       	cpi	r24, 0xE8	; 232
     43a:	93 40       	sbci	r25, 0x03	; 3
     43c:	a1 05       	cpc	r26, r1
     43e:	b1 05       	cpc	r27, r1
     440:	dc f2       	brlt	.-74     	; 0x3f8 <main+0x5c>
			led_toggle(2);
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 7d 00 	call	0xfa	; 0xfa <led_toggle>
			led_toggle(1);
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0e 94 7d 00 	call	0xfa	; 0xfa <led_toggle>
			transceiver_printStatus();
     44e:	0e 94 61 07 	call	0xec2	; 0xec2 <transceiver_printStatus>
			lastStatus = millis();
     452:	c0 90 01 06 	lds	r12, 0x0601
     456:	d0 90 02 06 	lds	r13, 0x0602
     45a:	e0 90 03 06 	lds	r14, 0x0603
     45e:	f0 90 04 06 	lds	r15, 0x0604
     462:	cc 0c       	add	r12, r12
     464:	dd 1c       	adc	r13, r13
     466:	ee 1c       	adc	r14, r14
     468:	ff 1c       	adc	r15, r15
     46a:	cc 0c       	add	r12, r12
     46c:	dd 1c       	adc	r13, r13
     46e:	ee 1c       	adc	r14, r14
     470:	ff 1c       	adc	r15, r15
     472:	cc 0c       	add	r12, r12
     474:	dd 1c       	adc	r13, r13
     476:	ee 1c       	adc	r14, r14
     478:	ff 1c       	adc	r15, r15
     47a:	cc 0c       	add	r12, r12
     47c:	dd 1c       	adc	r13, r13
     47e:	ee 1c       	adc	r14, r14
     480:	ff 1c       	adc	r15, r15
			#if DEBUG_MODE
			uart_debug();
     482:	0e 94 ce 08 	call	0x119c	; 0x119c <uart_debug>
     486:	b8 cf       	rjmp	.-144    	; 0x3f8 <main+0x5c>

00000488 <spi_init>:
#include <avr/io.h>

void spi_init(){
	// By default the MCUCR register has SPIPS set to 0 (use SPI instead of SPI_A)
	// we won't touch this because you shouldn't change the register with interrupts enabled
	DDRB |=   (1<<PB1)|(1<<PB7);
     488:	84 b1       	in	r24, 0x04	; 4
     48a:	82 68       	ori	r24, 0x82	; 130
     48c:	84 b9       	out	0x04, r24	; 4
	DDRB &=   ~(1<<PB0);
     48e:	20 98       	cbi	0x04, 0	; 4
	//SPCR  =   (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);     // Enable SPI, and set as Master
	SPCR  =   (1<<SPE)|(1<<MSTR); 
     490:	80 e5       	ldi	r24, 0x50	; 80
     492:	8c bd       	out	0x2c, r24	; 44
     494:	08 95       	ret

00000496 <spi_transfer>:
/*		A successful transmission will return the byte which was		*/
/*		received on the MISO line during the transfer.					*/
/*																		*/
/************************************************************************/
uint8_t spi_transfer(uint8_t message){
	SPDR = message;
     496:	8e bd       	out	0x2e, r24	; 46
	// Wait till transmission is complete
	while(!(SPSR&(1<<SPIF))){
     498:	08 c0       	rjmp	.+16     	; 0x4aa <spi_transfer+0x14>
		if (SPSR&(1<<WCOL)){
     49a:	0d b4       	in	r0, 0x2d	; 45
     49c:	06 fe       	sbrs	r0, 6
     49e:	05 c0       	rjmp	.+10     	; 0x4aa <spi_transfer+0x14>
			uart_sendmsg("Collision Detected!!\n");
     4a0:	85 ed       	ldi	r24, 0xD5	; 213
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
			break;
     4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <spi_transfer+0x1a>
/*																		*/
/************************************************************************/
uint8_t spi_transfer(uint8_t message){
	SPDR = message;
	// Wait till transmission is complete
	while(!(SPSR&(1<<SPIF))){
     4aa:	0d b4       	in	r0, 0x2d	; 45
     4ac:	07 fe       	sbrs	r0, 7
     4ae:	f5 cf       	rjmp	.-22     	; 0x49a <spi_transfer+0x4>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4b0:	8e e1       	ldi	r24, 0x1E	; 30
     4b2:	8a 95       	dec	r24
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <spi_transfer+0x1c>
			uart_sendmsg("Collision Detected!!\n");
			break;
		}
	}
	_delay_loop_1(30);
	return message = SPDR;
     4b6:	8e b5       	in	r24, 0x2e	; 46
} 
     4b8:	08 95       	ret

000004ba <SS_set_high>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	8a 95       	dec	r24
     4be:	f1 f7       	brne	.-4      	; 0x4bc <SS_set_high+0x2>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <SS_set_high+0x8>
     4c2:	08 95       	ret

000004c4 <SS_set_low>:
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	8a 95       	dec	r24
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <SS_set_low+0x2>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <SS_set_low+0x8>
     4cc:	08 95       	ret

000004ce <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
     4ce:	cf 93       	push	r28
     4d0:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
     4d2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
     4d6:	80 e8       	ldi	r24, 0x80	; 128
     4d8:	8c 0f       	add	r24, r28
     4da:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	8a 95       	dec	r24
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <reg_read+0x12>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <reg_read+0x18>
	_delay_us(1);
	msg = spi_transfer(0x00);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     4ec:	c8 2f       	mov	r28, r24

	SS_set_high();
     4ee:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SS_set_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f2:	8f ec       	ldi	r24, 0xCF	; 207
     4f4:	97 e0       	ldi	r25, 0x07	; 7
     4f6:	01 97       	sbiw	r24, 0x01	; 1
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <reg_read+0x28>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <reg_read+0x2e>
     4fc:	00 00       	nop
	
	_delay_ms(1);
	
	return msg;
}
     4fe:	8c 2f       	mov	r24, r28
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	d8 2f       	mov	r29, r24
     50a:	c6 2f       	mov	r28, r22
	
	SS_set_low();
     50c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SS_set_low>
	spi_transfer(addr);		// Send the desired address
     510:	8d 2f       	mov	r24, r29
     512:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	8a 95       	dec	r24
     51a:	f1 f7       	brne	.-4      	; 0x518 <reg_write+0x14>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <reg_write+0x1a>
	_delay_us(1);
	spi_transfer(data);		// Send the desired data
     51e:	8c 2f       	mov	r24, r28
     520:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
	SS_set_high();
     524:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SS_set_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	8f ec       	ldi	r24, 0xCF	; 207
     52a:	97 e0       	ldi	r25, 0x07	; 7
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <reg_write+0x28>
     530:	00 c0       	rjmp	.+0      	; 0x532 <reg_write+0x2e>
     532:	00 00       	nop
	_delay_ms(1);

	return;
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
     53a:	cf 93       	push	r28
     53c:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
     53e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SS_set_low>
	msg = spi_transfer(msg);
     542:	8f ea       	ldi	r24, 0xAF	; 175
     544:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	8a 95       	dec	r24
     54c:	f1 f7       	brne	.-4      	; 0x54a <reg_read2F+0x10>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <reg_read2F+0x16>
	_delay_us(1);
	msg = spi_transfer(addr);		// Send the desired address
     550:	8c 2f       	mov	r24, r28
     552:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	9a 95       	dec	r25
     55a:	f1 f7       	brne	.-4      	; 0x558 <reg_read2F+0x1e>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <reg_read2F+0x24>
	_delay_us(1);
	msg = spi_transfer(0x00);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     564:	c8 2f       	mov	r28, r24
	SS_set_high();
     566:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SS_set_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56a:	8f ec       	ldi	r24, 0xCF	; 207
     56c:	97 e0       	ldi	r25, 0x07	; 7
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <reg_read2F+0x34>
     572:	00 c0       	rjmp	.+0      	; 0x574 <reg_read2F+0x3a>
     574:	00 00       	nop
	_delay_ms(1);
	return msg;
}
     576:	8c 2f       	mov	r24, r28
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr, uint8_t print)
{
     57c:	cf 93       	push	r28
     57e:	c8 2f       	mov	r28, r24
	uint8_t msg;
	
	if(print){
     580:	66 23       	and	r22, r22
     582:	09 f4       	brne	.+2      	; 0x586 <cmd_str+0xa>
     584:	58 c0       	rjmp	.+176    	; 0x636 <cmd_str+0xba>
		uart_sendmsg("Command strobe(");
     586:	8b ee       	ldi	r24, 0xEB	; 235
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
		switch(addr){
     58e:	4c 2f       	mov	r20, r28
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	fa 01       	movw	r30, r20
     594:	f0 97       	sbiw	r30, 0x30	; 48
     596:	ee 30       	cpi	r30, 0x0E	; 14
     598:	f1 05       	cpc	r31, r1
     59a:	08 f0       	brcs	.+2      	; 0x59e <cmd_str+0x22>
     59c:	49 c0       	rjmp	.+146    	; 0x630 <cmd_str+0xb4>
     59e:	e2 5c       	subi	r30, 0xC2	; 194
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	0c 94 36 09 	jmp	0x126c	; 0x126c <__tablejump2__>
			case SRES: uart_sendmsg("0x30): SRES"); break;
     5a6:	8b ef       	ldi	r24, 0xFB	; 251
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5ae:	40 c0       	rjmp	.+128    	; 0x630 <cmd_str+0xb4>
			case SFSTXON: uart_sendmsg("0x31): SFSTXON"); break;
     5b0:	87 e0       	ldi	r24, 0x07	; 7
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5b8:	3b c0       	rjmp	.+118    	; 0x630 <cmd_str+0xb4>
			case SXOFF: uart_sendmsg("0x32): SXOFF"); break;
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5c2:	36 c0       	rjmp	.+108    	; 0x630 <cmd_str+0xb4>
			case SCAL: uart_sendmsg("0x33): SCAL"); break;
     5c4:	83 e2       	ldi	r24, 0x23	; 35
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5cc:	31 c0       	rjmp	.+98     	; 0x630 <cmd_str+0xb4>
			case SRX: uart_sendmsg("0x34): SRX"); break;
     5ce:	8f e2       	ldi	r24, 0x2F	; 47
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5d6:	2c c0       	rjmp	.+88     	; 0x630 <cmd_str+0xb4>
			case STX: uart_sendmsg("0x35): STX"); break;
     5d8:	8a e3       	ldi	r24, 0x3A	; 58
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5e0:	27 c0       	rjmp	.+78     	; 0x630 <cmd_str+0xb4>
			case SIDLE: uart_sendmsg("0x36): SIDLE"); break;
     5e2:	85 e4       	ldi	r24, 0x45	; 69
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5ea:	22 c0       	rjmp	.+68     	; 0x630 <cmd_str+0xb4>
			case SAFC: uart_sendmsg("0x37): SAFC"); break;
     5ec:	82 e5       	ldi	r24, 0x52	; 82
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5f4:	1d c0       	rjmp	.+58     	; 0x630 <cmd_str+0xb4>
			case SWOR: uart_sendmsg("0x38): SWOR"); break;
     5f6:	8e e5       	ldi	r24, 0x5E	; 94
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     5fe:	18 c0       	rjmp	.+48     	; 0x630 <cmd_str+0xb4>
			case SPWD: uart_sendmsg("0x39): SPWD"); break;
     600:	8a e6       	ldi	r24, 0x6A	; 106
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     608:	13 c0       	rjmp	.+38     	; 0x630 <cmd_str+0xb4>
			case SFRX: uart_sendmsg("0x3A): SFRX"); break;
     60a:	86 e7       	ldi	r24, 0x76	; 118
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     612:	0e c0       	rjmp	.+28     	; 0x630 <cmd_str+0xb4>
			case SFTX: uart_sendmsg("0x3B): SFTX"); break;
     614:	82 e8       	ldi	r24, 0x82	; 130
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     61c:	09 c0       	rjmp	.+18     	; 0x630 <cmd_str+0xb4>
			case SWORRST: uart_sendmsg("0x3C): SWORRST"); break;
     61e:	8e e8       	ldi	r24, 0x8E	; 142
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     626:	04 c0       	rjmp	.+8      	; 0x630 <cmd_str+0xb4>
			case SNOP: uart_sendmsg("0x3D): SNOP"); break;
     628:	8d e9       	ldi	r24, 0x9D	; 157
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
		}
		uart_transmit('\n');
     630:	8a e0       	ldi	r24, 0x0A	; 10
     632:	0e 94 36 08 	call	0x106c	; 0x106c <uart_transmit>
	}
	
	msg = spi_transfer(addr);
     636:	8c 2f       	mov	r24, r28
     638:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	9a 95       	dec	r25
     640:	f1 f7       	brne	.-4      	; 0x63e <cmd_str+0xc2>
     642:	00 c0       	rjmp	.+0      	; 0x644 <cmd_str+0xc8>
	
	_delay_us(1);
	return msg;
}
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	d8 2f       	mov	r29, r24
     64e:	c6 2f       	mov	r28, r22
	cmd_str(SNOP,0);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	8d e3       	ldi	r24, 0x3D	; 61
     654:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
	uint8_t msg;
	msg = 0b00101111;
	
	SS_set_low();
     658:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SS_set_low>
	spi_transfer(msg);
     65c:	8f e2       	ldi	r24, 0x2F	; 47
     65e:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	8a 95       	dec	r24
     666:	f1 f7       	brne	.-4      	; 0x664 <reg_write2F+0x1c>
     668:	00 c0       	rjmp	.+0      	; 0x66a <reg_write2F+0x22>
	_delay_us(1);
	spi_transfer(addr);		// Send the desired address
     66a:	8d 2f       	mov	r24, r29
     66c:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	9a 95       	dec	r25
     674:	f1 f7       	brne	.-4      	; 0x672 <reg_write2F+0x2a>
     676:	00 c0       	rjmp	.+0      	; 0x678 <reg_write2F+0x30>
	_delay_us(1);
	spi_transfer(data);		// Send the desired data
     678:	8c 2f       	mov	r24, r28
     67a:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
	SS_set_high();
     67e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SS_set_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     682:	8f ec       	ldi	r24, 0xCF	; 207
     684:	97 e0       	ldi	r25, 0x07	; 7
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <reg_write2F+0x3e>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <reg_write2F+0x44>
     68c:	00 00       	nop
	_delay_ms(1);

	return;
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <get_status>:
/*		Note: 000 = IDLE, 001 = RX, 110 = RX buffer overflow.			*/
/*																		*/
/************************************************************************/

void get_status(uint8_t *CHIP_RDYn, uint8_t *state)
{
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	8c 01       	movw	r16, r24
     69e:	eb 01       	movw	r28, r22
	uint8_t msg;
	msg = cmd_str(SNOP,0);
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	8d e3       	ldi	r24, 0x3D	; 61
     6a4:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
	*CHIP_RDYn = (msg>>7)&1;
     6a8:	98 2f       	mov	r25, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	99 27       	eor	r25, r25
     6ae:	99 1f       	adc	r25, r25
     6b0:	f8 01       	movw	r30, r16
     6b2:	90 83       	st	Z, r25
	*state = (msg>>4)&7;
     6b4:	82 95       	swap	r24
     6b6:	8f 70       	andi	r24, 0x0F	; 15
     6b8:	87 70       	andi	r24, 0x07	; 7
     6ba:	88 83       	st	Y, r24
	//*state = (msg & ~0x80)>>4;
	return;
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	08 95       	ret

000006c6 <dir_FIFO_read>:
/*	on the CC1120's FIFO and return the byte which was located there.	*/
/*																		*/
/************************************************************************/

uint8_t dir_FIFO_read(uint8_t addr)
{
     6c6:	cf 93       	push	r28
     6c8:	c8 2f       	mov	r28, r24
	cmd_str(SNOP,0);
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	8d e3       	ldi	r24, 0x3D	; 61
     6ce:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
	uint8_t msg;
	msg = 0b10111110;
	
	SS_set_low();
     6d2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SS_set_low>
	msg = spi_transfer(msg);
     6d6:	8e eb       	ldi	r24, 0xBE	; 190
     6d8:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	8a 95       	dec	r24
     6e0:	f1 f7       	brne	.-4      	; 0x6de <dir_FIFO_read+0x18>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <dir_FIFO_read+0x1e>
	_delay_us(1);
	msg = spi_transfer(addr);		// Send the desired address
     6e4:	8c 2f       	mov	r24, r28
     6e6:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	9a 95       	dec	r25
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <dir_FIFO_read+0x26>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <dir_FIFO_read+0x2c>
	_delay_us(1);
	msg = spi_transfer(0x00);
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     6f8:	c8 2f       	mov	r28, r24
	SS_set_high();
     6fa:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SS_set_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fe:	8f ec       	ldi	r24, 0xCF	; 207
     700:	97 e0       	ldi	r25, 0x07	; 7
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <dir_FIFO_read+0x3c>
     706:	00 c0       	rjmp	.+0      	; 0x708 <dir_FIFO_read+0x42>
     708:	00 00       	nop
	_delay_ms(1);
	return msg;
}
     70a:	8c 2f       	mov	r24, r28
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <transceiver_run>:
		cmd_str(STX,DEBUG_MODE); // Put in TX Mode
	}
	
}

void transceiver_run(){
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	c2 58       	subi	r28, 0x82	; 130
     72c:	d1 09       	sbc	r29, r1
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
	// Get the current state
	uint8_t state;
	uint8_t CHIP_RDYn;
	get_status(&CHIP_RDYn, &state);
     738:	be 01       	movw	r22, r28
     73a:	6f 5f       	subi	r22, 0xFF	; 255
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	ce 01       	movw	r24, r28
     740:	02 96       	adiw	r24, 0x02	; 2
     742:	0e 94 4a 03 	call	0x694	; 0x694 <get_status>
	
	if(!TX_ONLY_MODE){	
		// Waited too long, resend
		if (millis()-lastTransmit>= ACK_TIMEOUT){
     746:	80 91 01 06 	lds	r24, 0x0601
     74a:	90 91 02 06 	lds	r25, 0x0602
     74e:	a0 91 03 06 	lds	r26, 0x0603
     752:	b0 91 04 06 	lds	r27, 0x0604
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	aa 1f       	adc	r26, r26
     75c:	bb 1f       	adc	r27, r27
     75e:	88 0f       	add	r24, r24
     760:	99 1f       	adc	r25, r25
     762:	aa 1f       	adc	r26, r26
     764:	bb 1f       	adc	r27, r27
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	aa 1f       	adc	r26, r26
     76c:	bb 1f       	adc	r27, r27
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	aa 1f       	adc	r26, r26
     774:	bb 1f       	adc	r27, r27
     776:	40 91 fb 03 	lds	r20, 0x03FB
     77a:	50 91 fc 03 	lds	r21, 0x03FC
     77e:	60 91 fd 03 	lds	r22, 0x03FD
     782:	70 91 fe 03 	lds	r23, 0x03FE
     786:	84 1b       	sub	r24, r20
     788:	95 0b       	sbc	r25, r21
     78a:	a6 0b       	sbc	r26, r22
     78c:	b7 0b       	sbc	r27, r23
     78e:	80 3d       	cpi	r24, 0xD0	; 208
     790:	97 40       	sbci	r25, 0x07	; 7
     792:	a1 05       	cpc	r26, r1
     794:	b1 05       	cpc	r27, r1
     796:	04 f1       	brlt	.+64     	; 0x7d8 <transceiver_run+0xc8>
			//led_toggle(3);
			lastTransmit = millis();
     798:	80 91 01 06 	lds	r24, 0x0601
     79c:	90 91 02 06 	lds	r25, 0x0602
     7a0:	a0 91 03 06 	lds	r26, 0x0603
     7a4:	b0 91 04 06 	lds	r27, 0x0604
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	aa 1f       	adc	r26, r26
     7ae:	bb 1f       	adc	r27, r27
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	aa 1f       	adc	r26, r26
     7b6:	bb 1f       	adc	r27, r27
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	aa 1f       	adc	r26, r26
     7be:	bb 1f       	adc	r27, r27
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	aa 1f       	adc	r26, r26
     7c6:	bb 1f       	adc	r27, r27
     7c8:	80 93 fb 03 	sts	0x03FB, r24
     7cc:	90 93 fc 03 	sts	0x03FC, r25
     7d0:	a0 93 fd 03 	sts	0x03FD, r26
     7d4:	b0 93 fe 03 	sts	0x03FE, r27
		}
	
		// Waiting for acknowledge didn't get it yet
		if (tx_mode && state == STATERX){
     7d8:	80 91 fa 03 	lds	r24, 0x03FA
     7dc:	88 23       	and	r24, r24
     7de:	09 f4       	brne	.+2      	; 0x7e2 <transceiver_run+0xd2>
     7e0:	b9 c0       	rjmp	.+370    	; 0x954 <__stack+0x55>
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <transceiver_run+0xda>
     7e8:	84 c0       	rjmp	.+264    	; 0x8f2 <transceiver_run+0x1e2>
			uint8_t rxFirst = reg_read2F(RXFIRST);
     7ea:	82 ed       	ldi	r24, 0xD2	; 210
     7ec:	0e 94 9d 02 	call	0x53a	; 0x53a <reg_read2F>
			if (rxFirst){
     7f0:	88 23       	and	r24, r24
     7f2:	41 f1       	breq	.+80     	; 0x844 <transceiver_run+0x134>
				lastTransmit = millis();
     7f4:	80 91 01 06 	lds	r24, 0x0601
     7f8:	90 91 02 06 	lds	r25, 0x0602
     7fc:	a0 91 03 06 	lds	r26, 0x0603
     800:	b0 91 04 06 	lds	r27, 0x0604
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	aa 1f       	adc	r26, r26
     80a:	bb 1f       	adc	r27, r27
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	aa 1f       	adc	r26, r26
     812:	bb 1f       	adc	r27, r27
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	aa 1f       	adc	r26, r26
     81a:	bb 1f       	adc	r27, r27
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	aa 1f       	adc	r26, r26
     822:	bb 1f       	adc	r27, r27
     824:	80 93 fb 03 	sts	0x03FB, r24
     828:	90 93 fc 03 	sts	0x03FC, r25
     82c:	a0 93 fd 03 	sts	0x03FD, r26
     830:	b0 93 fe 03 	sts	0x03FE, r27
				reg_write2F(RXFIRST,0);
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	82 ed       	ldi	r24, 0xD2	; 210
     838:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
				reg_write2F(RXLAST,0);
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	84 ed       	ldi	r24, 0xD4	; 212
     840:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
			}
			// Waited too long, resend
			if (millis()-lastTransmit>= ACK_TIMEOUT){
     844:	80 91 01 06 	lds	r24, 0x0601
     848:	90 91 02 06 	lds	r25, 0x0602
     84c:	a0 91 03 06 	lds	r26, 0x0603
     850:	b0 91 04 06 	lds	r27, 0x0604
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	aa 1f       	adc	r26, r26
     85a:	bb 1f       	adc	r27, r27
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	aa 1f       	adc	r26, r26
     862:	bb 1f       	adc	r27, r27
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	aa 1f       	adc	r26, r26
     86a:	bb 1f       	adc	r27, r27
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	aa 1f       	adc	r26, r26
     872:	bb 1f       	adc	r27, r27
     874:	40 91 fb 03 	lds	r20, 0x03FB
     878:	50 91 fc 03 	lds	r21, 0x03FC
     87c:	60 91 fd 03 	lds	r22, 0x03FD
     880:	70 91 fe 03 	lds	r23, 0x03FE
     884:	84 1b       	sub	r24, r20
     886:	95 0b       	sbc	r25, r21
     888:	a6 0b       	sbc	r26, r22
     88a:	b7 0b       	sbc	r27, r23
     88c:	80 3d       	cpi	r24, 0xD0	; 208
     88e:	97 40       	sbci	r25, 0x07	; 7
     890:	a1 05       	cpc	r26, r1
     892:	b1 05       	cpc	r27, r1
     894:	0c f4       	brge	.+2      	; 0x898 <transceiver_run+0x188>
     896:	eb c0       	rjmp	.+470    	; 0xa6e <__stack+0x16f>
				uart_sendmsg("***ACK Wait Timeout, Retransmitting Message***\n");
     898:	89 ea       	ldi	r24, 0xA9	; 169
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
				reg_write2F(TXFIRST, 0x00);         //set TX FIRST to 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	83 ed       	ldi	r24, 0xD3	; 211
     8a4:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
				cmd_str(STX, DEBUG_MODE);                    //put in TX mode
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	85 e3       	ldi	r24, 0x35	; 53
     8ac:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
				lastTransmit = millis();
     8b0:	80 91 01 06 	lds	r24, 0x0601
     8b4:	90 91 02 06 	lds	r25, 0x0602
     8b8:	a0 91 03 06 	lds	r26, 0x0603
     8bc:	b0 91 04 06 	lds	r27, 0x0604
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	aa 1f       	adc	r26, r26
     8c6:	bb 1f       	adc	r27, r27
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	aa 1f       	adc	r26, r26
     8ce:	bb 1f       	adc	r27, r27
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	aa 1f       	adc	r26, r26
     8d6:	bb 1f       	adc	r27, r27
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	aa 1f       	adc	r26, r26
     8de:	bb 1f       	adc	r27, r27
     8e0:	80 93 fb 03 	sts	0x03FB, r24
     8e4:	90 93 fc 03 	sts	0x03FC, r25
     8e8:	a0 93 fd 03 	sts	0x03FD, r26
     8ec:	b0 93 fe 03 	sts	0x03FE, r27
     8f0:	be c0       	rjmp	.+380    	; 0xa6e <__stack+0x16f>
			}
		 }
		  // Still sending the data that we have
		 else if (tx_mode && state == STATETX){
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	79 f5       	brne	.+94     	; 0x954 <__stack+0x55>
			  uint8_t rxFirst = reg_read2F(RXFIRST);
     8f6:	82 ed       	ldi	r24, 0xD2	; 210
     8f8:	0e 94 9d 02 	call	0x53a	; 0x53a <reg_read2F>
			  if (rxFirst){
     8fc:	88 23       	and	r24, r24
     8fe:	09 f4       	brne	.+2      	; 0x902 <__stack+0x3>
     900:	b6 c0       	rjmp	.+364    	; 0xa6e <__stack+0x16f>
				  reg_write2F(RXFIRST,0);
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	82 ed       	ldi	r24, 0xD2	; 210
     906:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
				  reg_write2F(RXLAST,0);
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	84 ed       	ldi	r24, 0xD4	; 212
     90e:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
				  lastTransmit = millis();
     912:	80 91 01 06 	lds	r24, 0x0601
     916:	90 91 02 06 	lds	r25, 0x0602
     91a:	a0 91 03 06 	lds	r26, 0x0603
     91e:	b0 91 04 06 	lds	r27, 0x0604
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	aa 1f       	adc	r26, r26
     928:	bb 1f       	adc	r27, r27
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	aa 1f       	adc	r26, r26
     938:	bb 1f       	adc	r27, r27
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	aa 1f       	adc	r26, r26
     940:	bb 1f       	adc	r27, r27
     942:	80 93 fb 03 	sts	0x03FB, r24
     946:	90 93 fc 03 	sts	0x03FC, r25
     94a:	a0 93 fd 03 	sts	0x03FD, r26
     94e:	b0 93 fe 03 	sts	0x03FE, r27
     952:	8d c0       	rjmp	.+282    	; 0xa6e <__stack+0x16f>
			  }
		  }
		  // Waiting for data to come
		  else if (rx_mode){
     954:	80 91 00 01 	lds	r24, 0x0100
     958:	88 23       	and	r24, r24
     95a:	09 f4       	brne	.+2      	; 0x95e <__stack+0x5f>
     95c:	88 c0       	rjmp	.+272    	; 0xa6e <__stack+0x16f>
			  // Get the data from the FIFO
			  uint8_t rxFirst = reg_read2F(RXFIRST);
     95e:	82 ed       	ldi	r24, 0xD2	; 210
     960:	0e 94 9d 02 	call	0x53a	; 0x53a <reg_read2F>
     964:	b8 2e       	mov	r11, r24
			  uint8_t rxLast = reg_read2F(RXLAST);
     966:	84 ed       	ldi	r24, 0xD4	; 212
     968:	0e 94 9d 02 	call	0x53a	; 0x53a <reg_read2F>
     96c:	a8 2e       	mov	r10, r24
			  led_toggle(1);
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	0e 94 7d 00 	call	0xfa	; 0xfa <led_toggle>
			  // Got some data
			  if (rxFirst <= rxLast && rxLast){
     974:	ab 14       	cp	r10, r11
     976:	08 f4       	brcc	.+2      	; 0x97a <__stack+0x7b>
     978:	6a c0       	rjmp	.+212    	; 0xa4e <__stack+0x14f>
     97a:	aa 20       	and	r10, r10
     97c:	09 f4       	brne	.+2      	; 0x980 <__stack+0x81>
     97e:	67 c0       	rjmp	.+206    	; 0xa4e <__stack+0x14f>
				  //led_toggle(3);
				  uint8_t fifo[128] = {0};
     980:	fe 01       	movw	r30, r28
     982:	33 96       	adiw	r30, 0x03	; 3
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	df 01       	movw	r26, r30
     988:	1d 92       	st	X+, r1
     98a:	8a 95       	dec	r24
     98c:	e9 f7       	brne	.-6      	; 0x988 <__stack+0x89>
				  uint8_t j = 0;
				  for (uint8_t i = rxFirst; i < rxLast; i++){
     98e:	ba 14       	cp	r11, r10
     990:	80 f4       	brcc	.+32     	; 0x9b2 <__stack+0xb3>
     992:	1b 2d       	mov	r17, r11
					  fifo[j++] = dir_FIFO_read(i);
     994:	81 2f       	mov	r24, r17
     996:	0e 94 63 03 	call	0x6c6	; 0x6c6 <dir_FIFO_read>
     99a:	91 2f       	mov	r25, r17
     99c:	9b 19       	sub	r25, r11
     99e:	e3 e0       	ldi	r30, 0x03	; 3
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	ec 0f       	add	r30, r28
     9a4:	fd 1f       	adc	r31, r29
     9a6:	e9 0f       	add	r30, r25
     9a8:	f1 1d       	adc	r31, r1
     9aa:	80 83       	st	Z, r24
			  // Got some data
			  if (rxFirst <= rxLast && rxLast){
				  //led_toggle(3);
				  uint8_t fifo[128] = {0};
				  uint8_t j = 0;
				  for (uint8_t i = rxFirst; i < rxLast; i++){
     9ac:	1f 5f       	subi	r17, 0xFF	; 255
     9ae:	1a 15       	cp	r17, r10
     9b0:	88 f3       	brcs	.-30     	; 0x994 <__stack+0x95>
					  fifo[j++] = dir_FIFO_read(i);
				  }
				  // We have a packet
				  if (fifo[0] <= (rxLast - rxFirst - 1)){
     9b2:	9b 80       	ldd	r9, Y+3	; 0x03
     9b4:	49 2d       	mov	r20, r9
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a 2d       	mov	r18, r10
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	2b 19       	sub	r18, r11
     9be:	31 09       	sbc	r19, r1
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	31 09       	sbc	r19, r1
     9c4:	24 17       	cp	r18, r20
     9c6:	35 07       	cpc	r19, r21
     9c8:	0c f4       	brge	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	41 c0       	rjmp	.+130    	; 0xa4e <__stack+0x14f>
					  uart_printf("Got packet for address: %d msg: \"", fifo[1]);
     9cc:	8c 81       	ldd	r24, Y+4	; 0x04
     9ce:	1f 92       	push	r1
     9d0:	8f 93       	push	r24
     9d2:	89 ed       	ldi	r24, 0xD9	; 217
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	0e 94 9c 08 	call	0x1138	; 0x1138 <uart_printf>
					  for (j = 1; j < fifo[0]; j++){
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	b1 e0       	ldi	r27, 0x01	; 1
     9e8:	b9 15       	cp	r27, r9
     9ea:	20 f5       	brcc	.+72     	; 0xa34 <__stack+0x135>
     9ec:	8e 01       	movw	r16, r28
     9ee:	0b 5f       	subi	r16, 0xFB	; 251
     9f0:	1f 4f       	sbci	r17, 0xFF	; 255
     9f2:	8e ef       	ldi	r24, 0xFE	; 254
     9f4:	89 0d       	add	r24, r9
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f6 e0       	ldi	r31, 0x06	; 6
     9fa:	cf 2e       	mov	r12, r31
     9fc:	d1 2c       	mov	r13, r1
     9fe:	f0 2d       	mov	r31, r0
     a00:	cc 0e       	add	r12, r28
     a02:	dd 1e       	adc	r13, r29
     a04:	c8 0e       	add	r12, r24
     a06:	d1 1c       	adc	r13, r1
						  uart_printf("%c", fifo[j+1]);
     a08:	0f 2e       	mov	r0, r31
     a0a:	f5 e1       	ldi	r31, 0x15	; 21
     a0c:	ef 2e       	mov	r14, r31
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	ff 2e       	mov	r15, r31
     a12:	f0 2d       	mov	r31, r0
     a14:	f8 01       	movw	r30, r16
     a16:	81 91       	ld	r24, Z+
     a18:	8f 01       	movw	r16, r30
     a1a:	1f 92       	push	r1
     a1c:	8f 93       	push	r24
     a1e:	ff 92       	push	r15
     a20:	ef 92       	push	r14
     a22:	0e 94 9c 08 	call	0x1138	; 0x1138 <uart_printf>
					  fifo[j++] = dir_FIFO_read(i);
				  }
				  // We have a packet
				  if (fifo[0] <= (rxLast - rxFirst - 1)){
					  uart_printf("Got packet for address: %d msg: \"", fifo[1]);
					  for (j = 1; j < fifo[0]; j++){
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0c 15       	cp	r16, r12
     a30:	1d 05       	cpc	r17, r13
     a32:	81 f7       	brne	.-32     	; 0xa14 <__stack+0x115>
						  uart_printf("%c", fifo[j+1]);
					  }
					  uart_printf("\"\n");
     a34:	8b ef       	ldi	r24, 0xFB	; 251
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	9f 93       	push	r25
     a3a:	8f 93       	push	r24
     a3c:	0e 94 9c 08 	call	0x1138	; 0x1138 <uart_printf>
					  reg_write2F(RXFIRST, fifo[0]);
     a40:	69 2d       	mov	r22, r9
     a42:	82 ed       	ldi	r24, 0xD2	; 210
     a44:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
					  rxFirst += fifo[0];
     a48:	b9 0c       	add	r11, r9
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
				  }
				  // The packet doesn't seem to be done
				  else if (fifo[0] >= (rxLast - rxFirst - 1)){
				  }
			  }
			  if (rxFirst - rxLast == 0 && rxFirst){
     a4e:	ba 10       	cpse	r11, r10
     a50:	0a c0       	rjmp	.+20     	; 0xa66 <__stack+0x167>
     a52:	bb 20       	and	r11, r11
     a54:	41 f0       	breq	.+16     	; 0xa66 <__stack+0x167>
				  reg_write2F(RXFIRST, 0x00);
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	82 ed       	ldi	r24, 0xD2	; 210
     a5a:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
				  reg_write2F(RXLAST, 0x00);
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	84 ed       	ldi	r24, 0xD4	; 212
     a62:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
			  }
			  reg_write2F(TXFIRST, 0); // So we can send another ACK
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	83 ed       	ldi	r24, 0xD3	; 211
     a6a:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
			  reg_write2F(TXFIRST,0);
			  reg_write2F(TXLAST,0x7F);
			  cmd_str(STX,DEBUG_MODE);
		  }
	  }
}
     a6e:	ce 57       	subi	r28, 0x7E	; 126
     a70:	df 4f       	sbci	r29, 0xFF	; 255
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	bf 90       	pop	r11
     a8e:	af 90       	pop	r10
     a90:	9f 90       	pop	r9
     a92:	08 95       	ret

00000a94 <dir_FIFO_write>:
/*	on the CC1120's FIFO and a byte of data which is written to the FIFO*/
/*																		*/
/************************************************************************/

void dir_FIFO_write(uint8_t addr, uint8_t data)
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	d8 2f       	mov	r29, r24
     a9a:	c6 2f       	mov	r28, r22
	cmd_str(SNOP,0);
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	8d e3       	ldi	r24, 0x3D	; 61
     aa0:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
	uint8_t msg;
	msg = 0b00111110;
	
	SS_set_low();
     aa4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SS_set_low>
	spi_transfer(msg);
     aa8:	8e e3       	ldi	r24, 0x3E	; 62
     aaa:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	8a 95       	dec	r24
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <dir_FIFO_write+0x1c>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <dir_FIFO_write+0x22>
	_delay_us(1);
	msg = spi_transfer(addr);		// Send the desired address
     ab6:	8d 2f       	mov	r24, r29
     ab8:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	9a 95       	dec	r25
     ac0:	f1 f7       	brne	.-4      	; 0xabe <dir_FIFO_write+0x2a>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <dir_FIFO_write+0x30>
	_delay_us(1);
	msg = spi_transfer(data);		// Send the desired data
     ac4:	8c 2f       	mov	r24, r28
     ac6:	0e 94 4b 02 	call	0x496	; 0x496 <spi_transfer>
	SS_set_high();
     aca:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SS_set_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ace:	8f ec       	ldi	r24, 0xCF	; 207
     ad0:	97 e0       	ldi	r25, 0x07	; 7
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <dir_FIFO_write+0x3e>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <dir_FIFO_write+0x44>
     ad8:	00 00       	nop
	_delay_ms(1);
	
	return;
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	c8 2f       	mov	r28, r24
     ae8:	d6 2f       	mov	r29, r22
     aea:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
     aec:	0e 94 67 02 	call	0x4ce	; 0x4ce <reg_read>
	if(!data)
     af0:	11 11       	cpse	r17, r1
     af2:	0c c0       	rjmp	.+24     	; 0xb0c <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	af 01       	movw	r20, r30
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <reg_write_bit+0x20>
     afc:	44 0f       	add	r20, r20
     afe:	55 1f       	adc	r21, r21
     b00:	da 95       	dec	r29
     b02:	e2 f7       	brpl	.-8      	; 0xafc <reg_write_bit+0x1c>
     b04:	40 95       	com	r20
		msg = temp & msg;
     b06:	68 2f       	mov	r22, r24
     b08:	64 23       	and	r22, r20
     b0a:	0a c0       	rjmp	.+20     	; 0xb20 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	9a 01       	movw	r18, r20
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <reg_write_bit+0x38>
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	da 95       	dec	r29
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <reg_write_bit+0x34>
		msg = temp | msg;
     b1c:	68 2f       	mov	r22, r24
     b1e:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
     b20:	8c 2f       	mov	r24, r28
     b22:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	return;
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	08 95       	ret

00000b2e <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	c8 2f       	mov	r28, r24
     b36:	d6 2f       	mov	r29, r22
     b38:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
     b3a:	0e 94 9d 02 	call	0x53a	; 0x53a <reg_read2F>
	if(!data)
     b3e:	11 11       	cpse	r17, r1
     b40:	0c c0       	rjmp	.+24     	; 0xb5a <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
     b42:	e1 e0       	ldi	r30, 0x01	; 1
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	af 01       	movw	r20, r30
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <reg_write_bit2F+0x20>
     b4a:	44 0f       	add	r20, r20
     b4c:	55 1f       	adc	r21, r21
     b4e:	da 95       	dec	r29
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <reg_write_bit2F+0x1c>
     b52:	40 95       	com	r20
		msg = temp & msg;
     b54:	68 2f       	mov	r22, r24
     b56:	64 23       	and	r22, r20
     b58:	0a c0       	rjmp	.+20     	; 0xb6e <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
     b5a:	41 e0       	ldi	r20, 0x01	; 1
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	9a 01       	movw	r18, r20
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <reg_write_bit2F+0x38>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	da 95       	dec	r29
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <reg_write_bit2F+0x34>
		msg = temp | msg;
     b6a:	68 2f       	mov	r22, r24
     b6c:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
     b6e:	8c 2f       	mov	r24, r28
     b70:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	return;
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	08 95       	ret

00000b7c <reg_setting>:
	// 2. 'Register Reset'
	// 3. High performance mode
	// 4. The regs should match below

	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	82 e1       	ldi	r24, 0x12	; 18
     b80:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
     b84:	6f e5       	ldi	r22, 0x5F	; 95
     b86:	83 e1       	ldi	r24, 0x13	; 19
     b88:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	86 e1       	ldi	r24, 0x16	; 22
     b90:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
     b94:	6e e0       	ldi	r22, 0x0E	; 14
     b96:	87 e1       	ldi	r24, 0x17	; 23
     b98:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
     b9c:	63 e0       	ldi	r22, 0x03	; 3
     b9e:	89 e1       	ldi	r24, 0x19	; 25
     ba0:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
     ba4:	63 e3       	ldi	r22, 0x33	; 51
     ba6:	8b e1       	ldi	r24, 0x1B	; 27
     ba8:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
     bac:	67 e1       	ldi	r22, 0x17	; 23
     bae:	8d e1       	ldi	r24, 0x1D	; 29
     bb0:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
     bb4:	60 e5       	ldi	r22, 0x50	; 80
     bb6:	8f e1       	ldi	r24, 0x1F	; 31
     bb8:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
     bbc:	6e e6       	ldi	r22, 0x6E	; 110
     bbe:	80 e2       	ldi	r24, 0x20	; 32
     bc0:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
     bc4:	64 e1       	ldi	r22, 0x14	; 20
     bc6:	81 e2       	ldi	r24, 0x21	; 33
     bc8:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
     bcc:	6c ea       	ldi	r22, 0xAC	; 172
     bce:	82 e2       	ldi	r24, 0x22	; 34
     bd0:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
     bd4:	64 eb       	ldi	r22, 0xB4	; 180
     bd6:	87 e2       	ldi	r24, 0x27	; 39
     bd8:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
     bdc:	6e e0       	ldi	r22, 0x0E	; 14
     bde:	82 e3       	ldi	r24, 0x32	; 50
     be0:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	86 e3       	ldi	r24, 0x36	; 54
     be8:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	
	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
     bec:	68 e4       	ldi	r22, 0x48	; 72
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
     bf4:	65 e0       	ldi	r22, 0x05	; 5
     bf6:	8b e0       	ldi	r24, 0x0B	; 11
     bf8:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: B00010100      set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector disabled
     bfc:	64 e0       	ldi	r22, 0x04	; 4
     bfe:	81 e2       	ldi	r24, 0x21	; 33
     c00:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	8d e0       	ldi	r24, 0x0D	; 13
     c08:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	65 e0       	ldi	r22, 0x05	; 5
     c10:	8e e0       	ldi	r24, 0x0E	; 14
     c12:	0e 94 70 05 	call	0xae0	; 0xae0 <reg_write_bit>
	
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);        //TOC_LIMIT: 0x00      Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	67 e0       	ldi	r22, 0x07	; 7
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	0e 94 97 05 	call	0xb2e	; 0xb2e <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);        //TOC_LIMIT: 0x00      Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	66 e0       	ldi	r22, 0x06	; 6
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	0e 94 97 05 	call	0xb2e	; 0xb2e <reg_write_bit2F>
	
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	66 e0       	ldi	r22, 0x06	; 6
     c2e:	88 e0       	ldi	r24, 0x08	; 8
     c30:	0e 94 70 05 	call	0xae0	; 0xae0 <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: B00010111   32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
     c34:	67 e1       	ldi	r22, 0x17	; 23
     c36:	89 e0       	ldi	r24, 0x09	; 9
     c38:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x04, 0x93);            //SYNC3: 0x93            Set SYNC word bits 31:24
     c3c:	63 e9       	ldi	r22, 0x93	; 147
     c3e:	84 e0       	ldi	r24, 0x04	; 4
     c40:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x05, 0x0B);            //SYNC2: 0x0B            Set SYNC word bits 23:16
     c44:	6b e0       	ldi	r22, 0x0B	; 11
     c46:	85 e0       	ldi	r24, 0x05	; 5
     c48:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x06, 0x51);            //SYNC1: 0x51            Set SYNC word bits 15:8
     c4c:	61 e5       	ldi	r22, 0x51	; 81
     c4e:	86 e0       	ldi	r24, 0x06	; 6
     c50:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x07, 0xDE);            //SYNC0: 0xDE            Set SYNC word bits 7:0
     c54:	6e ed       	ldi	r22, 0xDE	; 222
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
		
	cmd_str(SNOP, 0);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	8d e3       	ldi	r24, 0x3D	; 61
     c60:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
	//set packets
	reg_write_bit(0x12, 6, 1);         //FIFO_EN: 0             FIFO enable set to true
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	66 e0       	ldi	r22, 0x06	; 6
     c68:	82 e1       	ldi	r24, 0x12	; 18
     c6a:	0e 94 70 05 	call	0xae0	; 0xae0 <reg_write_bit>
	reg_write_bit(0x13, 6, 0);         //TRANSPARENT_MODE_EN: 0 Disable transparent mode
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	66 e0       	ldi	r22, 0x06	; 6
     c72:	83 e1       	ldi	r24, 0x13	; 19
     c74:	0e 94 70 05 	call	0xae0	; 0xae0 <reg_write_bit>
	reg_write(0x26, 0b00000000);       //PKT_CFG2: 0x00         set FIFO mode
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	86 e2       	ldi	r24, 0x26	; 38
     c7c:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x27, 0b00000000);       //PKT_CFG1: 0x30         set address check and 0xFF broadcast
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	87 e2       	ldi	r24, 0x27	; 39
     c84:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x28, 0b00100000);       //PKT_CFG0: 0x30         set variable packet length
     c88:	60 e2       	ldi	r22, 0x20	; 32
     c8a:	88 e2       	ldi	r24, 0x28	; 40
     c8c:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x2E, 0x7F);             //PKT_LEN: 0xFF          set packet max packet length to 0x7F
     c90:	6f e7       	ldi	r22, 0x7F	; 127
     c92:	8e e2       	ldi	r24, 0x2E	; 46
     c94:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x1F, DEVICE_ADDRESS);   //DEV_ADDR register is set to DEVICE_ADDRESS
     c98:	65 ea       	ldi	r22, 0xA5	; 165
     c9a:	8f e1       	ldi	r24, 0x1F	; 31
     c9c:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	reg_write(0x29, 0b00101110);       //RFEND_CFG1: 0x2E       go to TX after a good packet
     ca0:	6e e2       	ldi	r22, 0x2E	; 46
     ca2:	89 e2       	ldi	r24, 0x29	; 41
     ca4:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	//reg_write(0x29, 0b00111110);     //RFEND_CFG1: 0x3E       go to RX after a good packet
	reg_write(0x2A, 0b00110000);       //RFEND_CFG0: 0x30       go to RX after transmitting a packet
     ca8:	60 e3       	ldi	r22, 0x30	; 48
     caa:	8a e2       	ldi	r24, 0x2A	; 42
     cac:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	//reg_write(0x2A, 0b00100000);     //RFEND_CFG0: 0x20       go to TX after transmitting a packet
	
	//set power level
	reg_write(0x2B, 0b01111111);       //PA_CFG2: 0x7F          set POWER_RAMP to 64 (output power to 14.5dBm, equation 21)
     cb0:	6f e7       	ldi	r22, 0x7F	; 127
     cb2:	8b e2       	ldi	r24, 0x2B	; 43
     cb4:	0e 94 82 02 	call	0x504	; 0x504 <reg_write>
	
	//frequency offset setting
	reg_write2F(0x0A, 0);             //FREQOFF1: 0x00         set frequency offset to 0
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	8a e0       	ldi	r24, 0x0A	; 10
     cbc:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x0B, 0);             //FREQOFF0: 0x00
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	8b e0       	ldi	r24, 0x0B	; 11
     cc4:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	
	//Frequency setting
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
     cc8:	6c e6       	ldi	r22, 0x6C	; 108
     cca:	8c e0       	ldi	r24, 0x0C	; 12
     ccc:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
     cd0:	60 e8       	ldi	r22, 0x80	; 128
     cd2:	8d e0       	ldi	r24, 0x0D	; 13
     cd4:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(0x0E, 0x00);          //FREQ0: 0x00
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	8e e0       	ldi	r24, 0x0E	; 14
     cdc:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
     ce0:	08 95       	ret

00000ce2 <prepareAck>:
void prepareAck(){
	char* ackMessage = "ACK";
	uint8_t ackAddress = 0xFF;
	
	// Reset FIFO registers
	reg_write2F(TXFIRST, 0x00);
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	83 ed       	ldi	r24, 0xD3	; 211
     ce6:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	// Put the ACK Packet in the FIFO
	dir_FIFO_write(0,(uint8_t)4);
     cea:	64 e0       	ldi	r22, 0x04	; 4
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 4a 05 	call	0xa94	; 0xa94 <dir_FIFO_write>
	dir_FIFO_write(1,ackAddress);
     cf2:	6f ef       	ldi	r22, 0xFF	; 255
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 4a 05 	call	0xa94	; 0xa94 <dir_FIFO_write>
	
	for(uint8_t i=0; i<3; i++) 
		dir_FIFO_write(i+2, ackMessage[i]);
     cfa:	61 e4       	ldi	r22, 0x41	; 65
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 4a 05 	call	0xa94	; 0xa94 <dir_FIFO_write>
     d02:	63 e4       	ldi	r22, 0x43	; 67
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	0e 94 4a 05 	call	0xa94	; 0xa94 <dir_FIFO_write>
     d0a:	6b e4       	ldi	r22, 0x4B	; 75
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	0e 94 4a 05 	call	0xa94	; 0xa94 <dir_FIFO_write>
	
	reg_write2F(TXLAST, (uint8_t) 3 + 2);
     d12:	65 e0       	ldi	r22, 0x05	; 5
     d14:	85 ed       	ldi	r24, 0xD5	; 213
     d16:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(RXFIRST, 0x00);
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	82 ed       	ldi	r24, 0xD2	; 210
     d1e:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(RXLAST, 0x00);
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	84 ed       	ldi	r24, 0xD4	; 212
     d26:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
     d2a:	08 95       	ret

00000d2c <transceiver_init>:
/*																		*/
/************************************************************************/


void transceiver_init(uint8_t calibrate){
	if (calibrate){
     d2c:	88 23       	and	r24, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <transceiver_init+0x6>
     d30:	4f c0       	rjmp	.+158    	; 0xdd0 <transceiver_init+0xa4>
		DDRD |= (1<<PD1);
     d32:	51 9a       	sbi	0x0a, 1	; 10
		DDRB |= (1<<PB5);
     d34:	25 9a       	sbi	0x04, 5	; 4
		DDRC |= (1<<PC4);
     d36:	3c 9a       	sbi	0x07, 4	; 7
		PORTD |= (1<<PD1);
     d38:	59 9a       	sbi	0x0b, 1	; 11
		PORTB |= (1<<PB5);
     d3a:	2d 9a       	sbi	0x05, 5	; 5
		PORTC |= (1<<PC4);
     d3c:	44 9a       	sbi	0x08, 4	; 8
     d3e:	2f ef       	ldi	r18, 0xFF	; 255
     d40:	89 e6       	ldi	r24, 0x69	; 105
     d42:	98 e1       	ldi	r25, 0x18	; 24
     d44:	21 50       	subi	r18, 0x01	; 1
     d46:	80 40       	sbci	r24, 0x00	; 0
     d48:	90 40       	sbci	r25, 0x00	; 0
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <transceiver_init+0x18>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <transceiver_init+0x22>
     d4e:	00 00       	nop
		_delay_ms(1000);
		PORTC &= ~(1<<PC4);
     d50:	44 98       	cbi	0x08, 4	; 8
     d52:	2f ef       	ldi	r18, 0xFF	; 255
     d54:	89 e6       	ldi	r24, 0x69	; 105
     d56:	98 e1       	ldi	r25, 0x18	; 24
     d58:	21 50       	subi	r18, 0x01	; 1
     d5a:	80 40       	sbci	r24, 0x00	; 0
     d5c:	90 40       	sbci	r25, 0x00	; 0
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <transceiver_init+0x2c>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <transceiver_init+0x36>
     d62:	00 00       	nop
		_delay_ms(1000);
		PORTC |= (1<<PC4);
     d64:	44 9a       	sbi	0x08, 4	; 8
		PORTD &= ~(1<<PD1);
     d66:	59 98       	cbi	0x0b, 1	; 11
	}
	// SPI is already in MSB first, which is correct for the CC1120.
    
    cmd_str(SRES,DEBUG_MODE);  //SRES                  reset chip
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	80 e3       	ldi	r24, 0x30	; 48
     d6c:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
    cmd_str(SFRX,DEBUG_MODE);  //SFRX                  flush RX FIFO
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	8a e3       	ldi	r24, 0x3A	; 58
     d74:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
    cmd_str(SFTX,DEBUG_MODE);  //SFTX                  flush TX FIFO
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	8b e3       	ldi	r24, 0x3B	; 59
     d7c:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
  	reg_setting();			   //CC1120 register setting
     d80:	0e 94 be 05 	call	0xb7c	; 0xb7c <reg_setting>

	if (calibrate){
		//strobe commands to start RX
		cmd_str(SCAL,DEBUG_MODE);    // Calibrate frequency synthesizer
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	83 e3       	ldi	r24, 0x33	; 51
     d88:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
     d8c:	2f e7       	ldi	r18, 0x7F	; 127
     d8e:	8a e1       	ldi	r24, 0x1A	; 26
     d90:	96 e0       	ldi	r25, 0x06	; 6
     d92:	21 50       	subi	r18, 0x01	; 1
     d94:	80 40       	sbci	r24, 0x00	; 0
     d96:	90 40       	sbci	r25, 0x00	; 0
     d98:	e1 f7       	brne	.-8      	; 0xd92 <transceiver_init+0x66>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <transceiver_init+0x70>
     d9c:	00 00       	nop
		_delay_ms(250);
		cmd_str(SAFC,DEBUG_MODE);    // Automatic frequency control
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	87 e3       	ldi	r24, 0x37	; 55
     da2:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
     da6:	2f e7       	ldi	r18, 0x7F	; 127
     da8:	8a e1       	ldi	r24, 0x1A	; 26
     daa:	96 e0       	ldi	r25, 0x06	; 6
     dac:	21 50       	subi	r18, 0x01	; 1
     dae:	80 40       	sbci	r24, 0x00	; 0
     db0:	90 40       	sbci	r25, 0x00	; 0
     db2:	e1 f7       	brne	.-8      	; 0xdac <transceiver_init+0x80>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <transceiver_init+0x8a>
     db6:	00 00       	nop
		_delay_ms(250);
	}
	rx_mode = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 00 01 	sts	0x0100, r24
	tx_mode = 0;
     dbe:	10 92 fa 03 	sts	0x03FA, r1
	prepareAck();
     dc2:	0e 94 71 06 	call	0xce2	; 0xce2 <prepareAck>
	if(!TX_ONLY_MODE)
		cmd_str(SRX,DEBUG_MODE);         // Put in RX mode 
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	84 e3       	ldi	r24, 0x34	; 52
     dca:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
     dce:	08 95       	ret
		PORTC |= (1<<PC4);
		PORTD &= ~(1<<PD1);
	}
	// SPI is already in MSB first, which is correct for the CC1120.
    
    cmd_str(SRES,DEBUG_MODE);  //SRES                  reset chip
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	80 e3       	ldi	r24, 0x30	; 48
     dd4:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
    cmd_str(SFRX,DEBUG_MODE);  //SFRX                  flush RX FIFO
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	8a e3       	ldi	r24, 0x3A	; 58
     ddc:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
    cmd_str(SFTX,DEBUG_MODE);  //SFTX                  flush TX FIFO
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	8b e3       	ldi	r24, 0x3B	; 59
     de4:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
  	reg_setting();			   //CC1120 register setting
     de8:	0e 94 be 05 	call	0xb7c	; 0xb7c <reg_setting>
     dec:	e5 cf       	rjmp	.-54     	; 0xdb8 <transceiver_init+0x8c>

00000dee <transceiver_send>:
	reg_write2F(TXLAST, (uint8_t) 3 + 2);
	reg_write2F(RXFIRST, 0x00);
	reg_write2F(RXLAST, 0x00);
}

void transceiver_send(uint8_t* message, uint8_t address, uint8_t length){
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	c8 2e       	mov	r12, r24
     e00:	d9 2f       	mov	r29, r25
     e02:	c6 2f       	mov	r28, r22
     e04:	d4 2e       	mov	r13, r20
	// The first byte is the length of the packet (message + 1 for the address)
	dir_FIFO_write(0,length+1);
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	64 0f       	add	r22, r20
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0e 94 4a 05 	call	0xa94	; 0xa94 <dir_FIFO_write>
	// The second byte is the address
	dir_FIFO_write(1,address);
     e10:	6c 2f       	mov	r22, r28
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 4a 05 	call	0xa94	; 0xa94 <dir_FIFO_write>
	// The rest is the actual data
	for(int i=0x00; i<length; i++)
     e18:	ed 2c       	mov	r14, r13
     e1a:	f1 2c       	mov	r15, r1
     e1c:	1e 14       	cp	r1, r14
     e1e:	1f 04       	cpc	r1, r15
     e20:	7c f4       	brge	.+30     	; 0xe40 <transceiver_send+0x52>
     e22:	0c 2d       	mov	r16, r12
     e24:	1d 2f       	mov	r17, r29
     e26:	c0 e0       	ldi	r28, 0x00	; 0
     e28:	d0 e0       	ldi	r29, 0x00	; 0
		dir_FIFO_write(i+2, message[i]);
     e2a:	f8 01       	movw	r30, r16
     e2c:	61 91       	ld	r22, Z+
     e2e:	8f 01       	movw	r16, r30
     e30:	8c 2f       	mov	r24, r28
     e32:	8e 5f       	subi	r24, 0xFE	; 254
     e34:	0e 94 4a 05 	call	0xa94	; 0xa94 <dir_FIFO_write>
	// The first byte is the length of the packet (message + 1 for the address)
	dir_FIFO_write(0,length+1);
	// The second byte is the address
	dir_FIFO_write(1,address);
	// The rest is the actual data
	for(int i=0x00; i<length; i++)
     e38:	21 96       	adiw	r28, 0x01	; 1
     e3a:	ce 15       	cp	r28, r14
     e3c:	df 05       	cpc	r29, r15
     e3e:	ac f3       	brlt	.-22     	; 0xe2a <transceiver_send+0x3c>
		dir_FIFO_write(i+2, message[i]);
	//set up TX FIFO pointers
	reg_write2F(TXFIRST, 0x00);            //set TX FIRST to 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	83 ed       	ldi	r24, 0xD3	; 211
     e44:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(TXLAST, length+2);         //set TX LAST (maximum OF 0X7F)
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	6d 0d       	add	r22, r13
     e4c:	85 ed       	ldi	r24, 0xD5	; 213
     e4e:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(RXFIRST, 0x00);            //set RXFIRST
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	82 ed       	ldi	r24, 0xD2	; 210
     e56:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	reg_write2F(RXLAST, 0x00);             //set RXLAST
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	84 ed       	ldi	r24, 0xD4	; 212
     e5e:	0e 94 24 03 	call	0x648	; 0x648 <reg_write2F>
	//strobe commands to start TX
	cmd_str(STX,DEBUG_MODE);                       //put in TX mode
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	85 e3       	ldi	r24, 0x35	; 53
     e66:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_str>
	tx_mode = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 fa 03 	sts	0x03FA, r24
	lastTransmit = millis();           
     e70:	80 91 01 06 	lds	r24, 0x0601
     e74:	90 91 02 06 	lds	r25, 0x0602
     e78:	a0 91 03 06 	lds	r26, 0x0603
     e7c:	b0 91 04 06 	lds	r27, 0x0604
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	aa 1f       	adc	r26, r26
     e86:	bb 1f       	adc	r27, r27
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	aa 1f       	adc	r26, r26
     e8e:	bb 1f       	adc	r27, r27
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	aa 1f       	adc	r26, r26
     e96:	bb 1f       	adc	r27, r27
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	aa 1f       	adc	r26, r26
     e9e:	bb 1f       	adc	r27, r27
     ea0:	80 93 fb 03 	sts	0x03FB, r24
     ea4:	90 93 fc 03 	sts	0x03FC, r25
     ea8:	a0 93 fd 03 	sts	0x03FD, r26
     eac:	b0 93 fe 03 	sts	0x03FE, r27
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	08 95       	ret

00000ec2 <transceiver_printStatus>:

//parses chip status byte
void transceiver_printStatus(){
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	2c 97       	sbiw	r28, 0x0c	; 12
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
	uint8_t CHIP_RDYn, state;
	char msg[10] = {0};
     eda:	fe 01       	movw	r30, r28
     edc:	33 96       	adiw	r30, 0x03	; 3
     ede:	8a e0       	ldi	r24, 0x0A	; 10
     ee0:	df 01       	movw	r26, r30
     ee2:	1d 92       	st	X+, r1
     ee4:	8a 95       	dec	r24
     ee6:	e9 f7       	brne	.-6      	; 0xee2 <transceiver_printStatus+0x20>
	get_status(&CHIP_RDYn, &state);
     ee8:	be 01       	movw	r22, r28
     eea:	6e 5f       	subi	r22, 0xFE	; 254
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	0e 94 4a 03 	call	0x694	; 0x694 <get_status>
	
	uart_sendmsg("Chip status: ");
     ef6:	8e ef       	ldi	r24, 0xFE	; 254
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
	if(CHIP_RDYn)
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	88 23       	and	r24, r24
     f02:	29 f0       	breq	.+10     	; 0xf0e <transceiver_printStatus+0x4c>
		uart_sendmsg("NOT READY (1), ");
     f04:	8c e0       	ldi	r24, 0x0C	; 12
     f06:	93 e0       	ldi	r25, 0x03	; 3
     f08:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <transceiver_printStatus+0x54>
	else
		uart_sendmsg("READY (0), ");
     f0e:	8c e1       	ldi	r24, 0x1C	; 28
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
	
	//parses state
	switch (state){
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	88 30       	cpi	r24, 0x08	; 8
     f1c:	91 05       	cpc	r25, r1
     f1e:	60 f5       	brcc	.+88     	; 0xf78 <transceiver_printStatus+0xb6>
     f20:	fc 01       	movw	r30, r24
     f22:	e4 5b       	subi	r30, 0xB4	; 180
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	0c 94 36 09 	jmp	0x126c	; 0x126c <__tablejump2__>
		case 0b000: uart_sendmsg("IDLE (000)");      break;
     f2a:	88 e2       	ldi	r24, 0x28	; 40
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     f32:	22 c0       	rjmp	.+68     	; 0xf78 <transceiver_printStatus+0xb6>
		case 0b001: uart_sendmsg("RX (001)");        break;
     f34:	83 e3       	ldi	r24, 0x33	; 51
     f36:	93 e0       	ldi	r25, 0x03	; 3
     f38:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     f3c:	1d c0       	rjmp	.+58     	; 0xf78 <transceiver_printStatus+0xb6>
		case 0b010: uart_sendmsg("TX (010)");        break;
     f3e:	8c e3       	ldi	r24, 0x3C	; 60
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     f46:	18 c0       	rjmp	.+48     	; 0xf78 <transceiver_printStatus+0xb6>
		case 0b011: uart_sendmsg("FSTXON (011)");    break;
     f48:	85 e4       	ldi	r24, 0x45	; 69
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     f50:	13 c0       	rjmp	.+38     	; 0xf78 <transceiver_printStatus+0xb6>
		case 0b100: uart_sendmsg("CALIBRATE (100)"); break;
     f52:	82 e5       	ldi	r24, 0x52	; 82
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <transceiver_printStatus+0xb6>
		case 0b101: uart_sendmsg("SETTLING (101)");  break;
     f5c:	82 e6       	ldi	r24, 0x62	; 98
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <transceiver_printStatus+0xb6>
		case 0b110: uart_sendmsg("RX FIFO ERROR (110)");  break;
     f66:	81 e7       	ldi	r24, 0x71	; 113
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <transceiver_printStatus+0xb6>
		case 0b111: uart_sendmsg("TX FIFO ERROR (111)");  break;
     f70:	85 e8       	ldi	r24, 0x85	; 133
     f72:	93 e0       	ldi	r25, 0x03	; 3
     f74:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
	}
	sprintf(msg,"at %lds\n",millis()/1000);
     f78:	80 91 01 06 	lds	r24, 0x0601
     f7c:	90 91 02 06 	lds	r25, 0x0602
     f80:	a0 91 03 06 	lds	r26, 0x0603
     f84:	b0 91 04 06 	lds	r27, 0x0604
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	aa 1f       	adc	r26, r26
     f8e:	bb 1f       	adc	r27, r27
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	aa 1f       	adc	r26, r26
     f96:	bb 1f       	adc	r27, r27
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	66 0f       	add	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	28 ee       	ldi	r18, 0xE8	; 232
     fae:	33 e0       	ldi	r19, 0x03	; 3
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	0e 94 17 09 	call	0x122e	; 0x122e <__divmodsi4>
     fb8:	5f 93       	push	r21
     fba:	4f 93       	push	r20
     fbc:	3f 93       	push	r19
     fbe:	2f 93       	push	r18
     fc0:	89 e9       	ldi	r24, 0x99	; 153
     fc2:	93 e0       	ldi	r25, 0x03	; 3
     fc4:	9f 93       	push	r25
     fc6:	8f 93       	push	r24
     fc8:	8e 01       	movw	r16, r28
     fca:	0d 5f       	subi	r16, 0xFD	; 253
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	1f 93       	push	r17
     fd0:	0f 93       	push	r16
     fd2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <sprintf>
	uart_sendmsg(msg);
     fd6:	c8 01       	movw	r24, r16
     fd8:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
	return;
     fe6:	2c 96       	adiw	r28, 0x0c	; 12
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <__vector_20>:
	uint8_t uart_sendmsg(char* msg) { return 0; }
	void uart_debug(){return;}
	void uart_printf(char* format, ...){ return; }
#else

ISR (LIN_TC_vect){
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	8f 93       	push	r24
    1008:	ef 93       	push	r30
    100a:	ff 93       	push	r31
	uart_buffer[uart_index] = LINDAT;
    100c:	e0 91 00 04 	lds	r30, 0x0400
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 91 d2 00 	lds	r24, 0x00D2
    1016:	ef 5f       	subi	r30, 0xFF	; 255
    1018:	fb 4f       	sbci	r31, 0xFB	; 251
    101a:	80 83       	st	Z, r24
	uart_index++;
    101c:	80 91 00 04 	lds	r24, 0x0400
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	80 93 00 04 	sts	0x0400, r24
	uart_overflow = uart_index >= UART_BUFF_LEN;
    1026:	80 91 00 04 	lds	r24, 0x0400
    102a:	10 92 ff 03 	sts	0x03FF, r1
}
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	8f 91       	pop	r24
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <uart_init>:
/* communication.														*/
/************************************************************************/

void uart_init(void){
	// initialize chip
	DDRD |= 1<<3;	 // PD3 = TXD is output
    103e:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~(1<<4); // PD4 = RXD is input
    1040:	54 98       	cbi	0x0a, 4	; 10
	
	// Initialize UART Registers
	LINCR = (1 << LSWRES);                    // Software reset
    1042:	e8 ec       	ldi	r30, 0xC8	; 200
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 e8       	ldi	r24, 0x80	; 128
    1048:	80 83       	st	Z, r24
	LINBRRH = (((F_CPU/UART_BAUD)/16)-1)>>8;  // Baudrate top 8 bits
    104a:	10 92 ce 00 	sts	0x00CE, r1
	LINBRRL = (((F_CPU/UART_BAUD)/16)-1);     // Baudrate lower 8 bits
    104e:	83 e3       	ldi	r24, 0x33	; 51
    1050:	80 93 cd 00 	sts	0x00CD, r24
	LINBTR = (1 << LDISR) | (1 << LBT4);      
    1054:	80 e9       	ldi	r24, 0x90	; 144
    1056:	80 93 cc 00 	sts	0x00CC, r24
	LINCR = (1<<LENA)|(1<<LCMD2)|(1<<LCMD1)|(1<<LCMD0); // Turn on UART for full duplex
    105a:	8f e0       	ldi	r24, 0x0F	; 15
    105c:	80 83       	st	Z, r24
	LINENIR = 0b00000001;                     // Set the ISR flags for just the receive
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 93 ca 00 	sts	0x00CA, r24
	LINSIR = 0b00000001;
    1064:	80 93 c9 00 	sts	0x00C9, r24
	sei();
    1068:	78 94       	sei
    106a:	08 95       	ret

0000106c <uart_transmit>:
}

uint8_t uart_transmit (uint8_t msg){
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	c8 2e       	mov	r12, r24
	uint64_t timeout = F_CPU*30;
	while ((LINSIR & (1 << LBUSY)) && (timeout--)); // Wait while the UART is busy.
    107e:	dd 24       	eor	r13, r13
    1080:	d3 94       	inc	r13
    1082:	0f 2e       	mov	r0, r31
    1084:	fc e1       	ldi	r31, 0x1C	; 28
    1086:	ef 2e       	mov	r14, r31
    1088:	f0 2d       	mov	r31, r0
    108a:	0f 2e       	mov	r0, r31
    108c:	fe e4       	ldi	r31, 0x4E	; 78
    108e:	ff 2e       	mov	r15, r31
    1090:	f0 2d       	mov	r31, r0
    1092:	0e e0       	ldi	r16, 0x0E	; 14
    1094:	10 e0       	ldi	r17, 0x00	; 0
    1096:	d0 e0       	ldi	r29, 0x00	; 0
    1098:	c0 e0       	ldi	r28, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e9 ec       	ldi	r30, 0xC9	; 201
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	a0 81       	ld	r26, Z
    10a2:	a4 ff       	sbrs	r26, 4
    10a4:	17 c0       	rjmp	.+46     	; 0x10d4 <uart_transmit+0x68>
    10a6:	2d 2d       	mov	r18, r13
    10a8:	3e 2d       	mov	r19, r14
    10aa:	4f 2d       	mov	r20, r15
    10ac:	50 2f       	mov	r21, r16
    10ae:	61 2f       	mov	r22, r17
    10b0:	7d 2f       	mov	r23, r29
    10b2:	8c 2f       	mov	r24, r28
    10b4:	9b 2f       	mov	r25, r27
    10b6:	af ef       	ldi	r26, 0xFF	; 255
    10b8:	0e 94 3c 09 	call	0x1278	; 0x1278 <__adddi3_s8>
    10bc:	d2 2e       	mov	r13, r18
    10be:	e3 2e       	mov	r14, r19
    10c0:	f4 2e       	mov	r15, r20
    10c2:	05 2f       	mov	r16, r21
    10c4:	16 2f       	mov	r17, r22
    10c6:	d7 2f       	mov	r29, r23
    10c8:	c8 2f       	mov	r28, r24
    10ca:	b9 2f       	mov	r27, r25
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	0e 94 48 09 	call	0x1290	; 0x1290 <__cmpdi2_s8>
    10d2:	31 f7       	brne	.-52     	; 0x10a0 <uart_transmit+0x34>
	LINDAT = msg;
    10d4:	c0 92 d2 00 	sts	0x00D2, r12
	return 0;
}
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	df 90       	pop	r13
    10e8:	cf 90       	pop	r12
    10ea:	08 95       	ret

000010ec <uart_sendmsg>:

uint8_t uart_sendmsg(char* msg){
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	8c 01       	movw	r16, r24
	led_toggle(1);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	0e 94 7d 00 	call	0xfa	; 0xfa <led_toggle>
    1100:	78 01       	movw	r14, r16
	for (int i = 0; i < strlen(msg); i++)
    1102:	c0 e0       	ldi	r28, 0x00	; 0
    1104:	d0 e0       	ldi	r29, 0x00	; 0
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <uart_sendmsg+0x28>
		uart_transmit(msg[i]);
    1108:	f7 01       	movw	r30, r14
    110a:	81 91       	ld	r24, Z+
    110c:	7f 01       	movw	r14, r30
    110e:	0e 94 36 08 	call	0x106c	; 0x106c <uart_transmit>
	return 0;
}

uint8_t uart_sendmsg(char* msg){
	led_toggle(1);
	for (int i = 0; i < strlen(msg); i++)
    1112:	21 96       	adiw	r28, 0x01	; 1
    1114:	f8 01       	movw	r30, r16
    1116:	01 90       	ld	r0, Z+
    1118:	00 20       	and	r0, r0
    111a:	e9 f7       	brne	.-6      	; 0x1116 <uart_sendmsg+0x2a>
    111c:	31 97       	sbiw	r30, 0x01	; 1
    111e:	e0 1b       	sub	r30, r16
    1120:	f1 0b       	sbc	r31, r17
    1122:	ce 17       	cp	r28, r30
    1124:	df 07       	cpc	r29, r31
    1126:	80 f3       	brcs	.-32     	; 0x1108 <uart_sendmsg+0x1c>
		uart_transmit(msg[i]);
	return 0;
}
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	08 95       	ret

00001138 <uart_printf>:
	uint64_t timeout = F_CPU*30;
	while ((LINSIR & (1 << LBUSY)) && (timeout--)); // Wait while the UART is busy.
	return LINDAT;
}

void uart_printf(char* format, ... ){
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	c0 58       	subi	r28, 0x80	; 128
    1142:	d1 09       	sbc	r29, r1
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	fe 01       	movw	r30, r28
    1150:	eb 57       	subi	r30, 0x7B	; 123
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	41 91       	ld	r20, Z+
    1156:	51 91       	ld	r21, Z+
	va_list args;
	va_start(args, format);
	char sendBuffer[128] = {0};
    1158:	ce 01       	movw	r24, r28
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	20 e8       	ldi	r18, 0x80	; 128
    115e:	dc 01       	movw	r26, r24
    1160:	1d 92       	st	X+, r1
    1162:	2a 95       	dec	r18
    1164:	e9 f7       	brne	.-6      	; 0x1160 <uart_printf+0x28>
	int numWrite = vsnprintf(sendBuffer, 128, format, args);
    1166:	9f 01       	movw	r18, r30
    1168:	60 e8       	ldi	r22, 0x80	; 128
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	0e 94 ba 09 	call	0x1374	; 0x1374 <vsnprintf>
	va_end(args);
	if (numWrite < 0 || numWrite >= 128){
    1170:	80 38       	cpi	r24, 0x80	; 128
    1172:	91 05       	cpc	r25, r1
    1174:	28 f0       	brcs	.+10     	; 0x1180 <uart_printf+0x48>
		uart_sendmsg("Error formatted string too large (uart_printf)\n");
    1176:	82 ea       	ldi	r24, 0xA2	; 162
    1178:	93 e0       	ldi	r25, 0x03	; 3
    117a:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <uart_printf+0x50>
		return;
	}
	uart_sendmsg(sendBuffer);
    1180:	ce 01       	movw	r24, r28
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	0e 94 76 08 	call	0x10ec	; 0x10ec <uart_sendmsg>
}
    1188:	c0 58       	subi	r28, 0x80	; 128
    118a:	df 4f       	sbci	r29, 0xFF	; 255
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <uart_debug>:

void uart_debug(){
	uart_printf("UART Debug: index = %d, OVERFLOW = %d\n", uart_index, uart_overflow);
    119c:	90 91 ff 03 	lds	r25, 0x03FF
    11a0:	80 91 00 04 	lds	r24, 0x0400
    11a4:	1f 92       	push	r1
    11a6:	9f 93       	push	r25
    11a8:	1f 92       	push	r1
    11aa:	8f 93       	push	r24
    11ac:	82 ed       	ldi	r24, 0xD2	; 210
    11ae:	93 e0       	ldi	r25, 0x03	; 3
    11b0:	9f 93       	push	r25
    11b2:	8f 93       	push	r24
    11b4:	0e 94 9c 08 	call	0x1138	; 0x1138 <uart_printf>
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	08 95       	ret

000011c6 <wdt_init>:
#include "wdt.h"
volatile int long count16ms = 0;


void wdt_init(){
	cli();
    11c6:	f8 94       	cli
	count16ms = 0;
    11c8:	10 92 01 06 	sts	0x0601, r1
    11cc:	10 92 02 06 	sts	0x0602, r1
    11d0:	10 92 03 06 	sts	0x0603, r1
    11d4:	10 92 04 06 	sts	0x0604, r1
	//reset watchdog
	wdt_reset();
    11d8:	a8 95       	wdr
	//Start watchdog timer with 16ms
	WDTCSR = (1<<WDIE);
    11da:	80 e4       	ldi	r24, 0x40	; 64
    11dc:	80 93 60 00 	sts	0x0060, r24
	sei();
    11e0:	78 94       	sei
    11e2:	08 95       	ret

000011e4 <__vector_28>:
}

//Watchdog timeout ISR
ISR(WDT_vect){
    11e4:	1f 92       	push	r1
    11e6:	0f 92       	push	r0
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	0f 92       	push	r0
    11ec:	11 24       	eor	r1, r1
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25
    11f2:	af 93       	push	r26
    11f4:	bf 93       	push	r27
	count16ms++;
    11f6:	80 91 01 06 	lds	r24, 0x0601
    11fa:	90 91 02 06 	lds	r25, 0x0602
    11fe:	a0 91 03 06 	lds	r26, 0x0603
    1202:	b0 91 04 06 	lds	r27, 0x0604
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	a1 1d       	adc	r26, r1
    120a:	b1 1d       	adc	r27, r1
    120c:	80 93 01 06 	sts	0x0601, r24
    1210:	90 93 02 06 	sts	0x0602, r25
    1214:	a0 93 03 06 	sts	0x0603, r26
    1218:	b0 93 04 06 	sts	0x0604, r27
}
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__divmodsi4>:
    122e:	05 2e       	mov	r0, r21
    1230:	97 fb       	bst	r25, 7
    1232:	1e f4       	brtc	.+6      	; 0x123a <__divmodsi4+0xc>
    1234:	00 94       	com	r0
    1236:	0e 94 2e 09 	call	0x125c	; 0x125c <__negsi2>
    123a:	57 fd       	sbrc	r21, 7
    123c:	07 d0       	rcall	.+14     	; 0x124c <__divmodsi4_neg2>
    123e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__udivmodsi4>
    1242:	07 fc       	sbrc	r0, 7
    1244:	03 d0       	rcall	.+6      	; 0x124c <__divmodsi4_neg2>
    1246:	4e f4       	brtc	.+18     	; 0x125a <__divmodsi4_exit>
    1248:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__negsi2>

0000124c <__divmodsi4_neg2>:
    124c:	50 95       	com	r21
    124e:	40 95       	com	r20
    1250:	30 95       	com	r19
    1252:	21 95       	neg	r18
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	4f 4f       	sbci	r20, 0xFF	; 255
    1258:	5f 4f       	sbci	r21, 0xFF	; 255

0000125a <__divmodsi4_exit>:
    125a:	08 95       	ret

0000125c <__negsi2>:
    125c:	90 95       	com	r25
    125e:	80 95       	com	r24
    1260:	70 95       	com	r23
    1262:	61 95       	neg	r22
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	8f 4f       	sbci	r24, 0xFF	; 255
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	08 95       	ret

0000126c <__tablejump2__>:
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31

00001270 <__tablejump__>:
    1270:	05 90       	lpm	r0, Z+
    1272:	f4 91       	lpm	r31, Z
    1274:	e0 2d       	mov	r30, r0
    1276:	09 94       	ijmp

00001278 <__adddi3_s8>:
    1278:	00 24       	eor	r0, r0
    127a:	a7 fd       	sbrc	r26, 7
    127c:	00 94       	com	r0
    127e:	2a 0f       	add	r18, r26
    1280:	30 1d       	adc	r19, r0
    1282:	40 1d       	adc	r20, r0
    1284:	50 1d       	adc	r21, r0
    1286:	60 1d       	adc	r22, r0
    1288:	70 1d       	adc	r23, r0
    128a:	80 1d       	adc	r24, r0
    128c:	90 1d       	adc	r25, r0
    128e:	08 95       	ret

00001290 <__cmpdi2_s8>:
    1290:	00 24       	eor	r0, r0
    1292:	a7 fd       	sbrc	r26, 7
    1294:	00 94       	com	r0
    1296:	2a 17       	cp	r18, r26
    1298:	30 05       	cpc	r19, r0
    129a:	40 05       	cpc	r20, r0
    129c:	50 05       	cpc	r21, r0
    129e:	60 05       	cpc	r22, r0
    12a0:	70 05       	cpc	r23, r0
    12a2:	80 05       	cpc	r24, r0
    12a4:	90 05       	cpc	r25, r0
    12a6:	08 95       	ret

000012a8 <__udivmodsi4>:
    12a8:	a1 e2       	ldi	r26, 0x21	; 33
    12aa:	1a 2e       	mov	r1, r26
    12ac:	aa 1b       	sub	r26, r26
    12ae:	bb 1b       	sub	r27, r27
    12b0:	fd 01       	movw	r30, r26
    12b2:	0d c0       	rjmp	.+26     	; 0x12ce <__udivmodsi4_ep>

000012b4 <__udivmodsi4_loop>:
    12b4:	aa 1f       	adc	r26, r26
    12b6:	bb 1f       	adc	r27, r27
    12b8:	ee 1f       	adc	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	a2 17       	cp	r26, r18
    12be:	b3 07       	cpc	r27, r19
    12c0:	e4 07       	cpc	r30, r20
    12c2:	f5 07       	cpc	r31, r21
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__udivmodsi4_ep>
    12c6:	a2 1b       	sub	r26, r18
    12c8:	b3 0b       	sbc	r27, r19
    12ca:	e4 0b       	sbc	r30, r20
    12cc:	f5 0b       	sbc	r31, r21

000012ce <__udivmodsi4_ep>:
    12ce:	66 1f       	adc	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	88 1f       	adc	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	1a 94       	dec	r1
    12d8:	69 f7       	brne	.-38     	; 0x12b4 <__udivmodsi4_loop>
    12da:	60 95       	com	r22
    12dc:	70 95       	com	r23
    12de:	80 95       	com	r24
    12e0:	90 95       	com	r25
    12e2:	9b 01       	movw	r18, r22
    12e4:	ac 01       	movw	r20, r24
    12e6:	bd 01       	movw	r22, r26
    12e8:	cf 01       	movw	r24, r30
    12ea:	08 95       	ret

000012ec <strcmp>:
    12ec:	fb 01       	movw	r30, r22
    12ee:	dc 01       	movw	r26, r24
    12f0:	8d 91       	ld	r24, X+
    12f2:	01 90       	ld	r0, Z+
    12f4:	80 19       	sub	r24, r0
    12f6:	01 10       	cpse	r0, r1
    12f8:	d9 f3       	breq	.-10     	; 0x12f0 <strcmp+0x4>
    12fa:	99 0b       	sbc	r25, r25
    12fc:	08 95       	ret

000012fe <sprintf>:
    12fe:	ae e0       	ldi	r26, 0x0E	; 14
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e8       	ldi	r30, 0x85	; 133
    1304:	f9 e0       	ldi	r31, 0x09	; 9
    1306:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x1c>
    130a:	0d 89       	ldd	r16, Y+21	; 0x15
    130c:	1e 89       	ldd	r17, Y+22	; 0x16
    130e:	86 e0       	ldi	r24, 0x06	; 6
    1310:	8c 83       	std	Y+4, r24	; 0x04
    1312:	1a 83       	std	Y+2, r17	; 0x02
    1314:	09 83       	std	Y+1, r16	; 0x01
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f e7       	ldi	r25, 0x7F	; 127
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	ae 01       	movw	r20, r28
    1320:	47 5e       	subi	r20, 0xE7	; 231
    1322:	5f 4f       	sbci	r21, 0xFF	; 255
    1324:	6f 89       	ldd	r22, Y+23	; 0x17
    1326:	78 8d       	ldd	r23, Y+24	; 0x18
    1328:	ce 01       	movw	r24, r28
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <vfprintf>
    1330:	ef 81       	ldd	r30, Y+7	; 0x07
    1332:	f8 85       	ldd	r31, Y+8	; 0x08
    1334:	e0 0f       	add	r30, r16
    1336:	f1 1f       	adc	r31, r17
    1338:	10 82       	st	Z, r1
    133a:	2e 96       	adiw	r28, 0x0e	; 14
    133c:	e4 e0       	ldi	r30, 0x04	; 4
    133e:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x1c>

00001342 <sscanf>:
    1342:	ae e0       	ldi	r26, 0x0E	; 14
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e7 ea       	ldi	r30, 0xA7	; 167
    1348:	f9 e0       	ldi	r31, 0x09	; 9
    134a:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__prologue_saves__+0x20>
    134e:	85 e0       	ldi	r24, 0x05	; 5
    1350:	8c 83       	std	Y+4, r24	; 0x04
    1352:	8b 89       	ldd	r24, Y+19	; 0x13
    1354:	9c 89       	ldd	r25, Y+20	; 0x14
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	ae 01       	movw	r20, r28
    135c:	49 5e       	subi	r20, 0xE9	; 233
    135e:	5f 4f       	sbci	r21, 0xFF	; 255
    1360:	6d 89       	ldd	r22, Y+21	; 0x15
    1362:	7e 89       	ldd	r23, Y+22	; 0x16
    1364:	ce 01       	movw	r24, r28
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vfscanf>
    136c:	2e 96       	adiw	r28, 0x0e	; 14
    136e:	e2 e0       	ldi	r30, 0x02	; 2
    1370:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__epilogue_restores__+0x20>

00001374 <vsnprintf>:
    1374:	ae e0       	ldi	r26, 0x0E	; 14
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e0 ec       	ldi	r30, 0xC0	; 192
    137a:	f9 e0       	ldi	r31, 0x09	; 9
    137c:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x1c>
    1380:	8c 01       	movw	r16, r24
    1382:	ca 01       	movw	r24, r20
    1384:	46 e0       	ldi	r20, 0x06	; 6
    1386:	4c 83       	std	Y+4, r20	; 0x04
    1388:	1a 83       	std	Y+2, r17	; 0x02
    138a:	09 83       	std	Y+1, r16	; 0x01
    138c:	77 ff       	sbrs	r23, 7
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vsnprintf+0x20>
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e8       	ldi	r23, 0x80	; 128
    1394:	61 50       	subi	r22, 0x01	; 1
    1396:	71 09       	sbc	r23, r1
    1398:	7e 83       	std	Y+6, r23	; 0x06
    139a:	6d 83       	std	Y+5, r22	; 0x05
    139c:	a9 01       	movw	r20, r18
    139e:	bc 01       	movw	r22, r24
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <vfprintf>
    13a8:	4d 81       	ldd	r20, Y+5	; 0x05
    13aa:	5e 81       	ldd	r21, Y+6	; 0x06
    13ac:	57 fd       	sbrc	r21, 7
    13ae:	0a c0       	rjmp	.+20     	; 0x13c4 <vsnprintf+0x50>
    13b0:	2f 81       	ldd	r18, Y+7	; 0x07
    13b2:	38 85       	ldd	r19, Y+8	; 0x08
    13b4:	42 17       	cp	r20, r18
    13b6:	53 07       	cpc	r21, r19
    13b8:	0c f4       	brge	.+2      	; 0x13bc <vsnprintf+0x48>
    13ba:	9a 01       	movw	r18, r20
    13bc:	f8 01       	movw	r30, r16
    13be:	e2 0f       	add	r30, r18
    13c0:	f3 1f       	adc	r31, r19
    13c2:	10 82       	st	Z, r1
    13c4:	2e 96       	adiw	r28, 0x0e	; 14
    13c6:	e4 e0       	ldi	r30, 0x04	; 4
    13c8:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x1c>

000013cc <vfprintf>:
    13cc:	ac e0       	ldi	r26, 0x0C	; 12
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ec ee       	ldi	r30, 0xEC	; 236
    13d2:	f9 e0       	ldi	r31, 0x09	; 9
    13d4:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__prologue_saves__>
    13d8:	7c 01       	movw	r14, r24
    13da:	6b 01       	movw	r12, r22
    13dc:	8a 01       	movw	r16, r20
    13de:	fc 01       	movw	r30, r24
    13e0:	17 82       	std	Z+7, r1	; 0x07
    13e2:	16 82       	std	Z+6, r1	; 0x06
    13e4:	83 81       	ldd	r24, Z+3	; 0x03
    13e6:	81 ff       	sbrs	r24, 1
    13e8:	bd c1       	rjmp	.+890    	; 0x1764 <vfprintf+0x398>
    13ea:	ce 01       	movw	r24, r28
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	4c 01       	movw	r8, r24
    13f0:	f7 01       	movw	r30, r14
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	f6 01       	movw	r30, r12
    13f6:	93 fd       	sbrc	r25, 3
    13f8:	85 91       	lpm	r24, Z+
    13fa:	93 ff       	sbrs	r25, 3
    13fc:	81 91       	ld	r24, Z+
    13fe:	6f 01       	movw	r12, r30
    1400:	88 23       	and	r24, r24
    1402:	09 f4       	brne	.+2      	; 0x1406 <vfprintf+0x3a>
    1404:	ab c1       	rjmp	.+854    	; 0x175c <vfprintf+0x390>
    1406:	85 32       	cpi	r24, 0x25	; 37
    1408:	39 f4       	brne	.+14     	; 0x1418 <vfprintf+0x4c>
    140a:	93 fd       	sbrc	r25, 3
    140c:	85 91       	lpm	r24, Z+
    140e:	93 ff       	sbrs	r25, 3
    1410:	81 91       	ld	r24, Z+
    1412:	6f 01       	movw	r12, r30
    1414:	85 32       	cpi	r24, 0x25	; 37
    1416:	29 f4       	brne	.+10     	; 0x1422 <vfprintf+0x56>
    1418:	b7 01       	movw	r22, r14
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    1420:	e7 cf       	rjmp	.-50     	; 0x13f0 <vfprintf+0x24>
    1422:	51 2c       	mov	r5, r1
    1424:	31 2c       	mov	r3, r1
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	20 32       	cpi	r18, 0x20	; 32
    142a:	a0 f4       	brcc	.+40     	; 0x1454 <vfprintf+0x88>
    142c:	8b 32       	cpi	r24, 0x2B	; 43
    142e:	69 f0       	breq	.+26     	; 0x144a <vfprintf+0x7e>
    1430:	30 f4       	brcc	.+12     	; 0x143e <vfprintf+0x72>
    1432:	80 32       	cpi	r24, 0x20	; 32
    1434:	59 f0       	breq	.+22     	; 0x144c <vfprintf+0x80>
    1436:	83 32       	cpi	r24, 0x23	; 35
    1438:	69 f4       	brne	.+26     	; 0x1454 <vfprintf+0x88>
    143a:	20 61       	ori	r18, 0x10	; 16
    143c:	2c c0       	rjmp	.+88     	; 0x1496 <vfprintf+0xca>
    143e:	8d 32       	cpi	r24, 0x2D	; 45
    1440:	39 f0       	breq	.+14     	; 0x1450 <vfprintf+0x84>
    1442:	80 33       	cpi	r24, 0x30	; 48
    1444:	39 f4       	brne	.+14     	; 0x1454 <vfprintf+0x88>
    1446:	21 60       	ori	r18, 0x01	; 1
    1448:	26 c0       	rjmp	.+76     	; 0x1496 <vfprintf+0xca>
    144a:	22 60       	ori	r18, 0x02	; 2
    144c:	24 60       	ori	r18, 0x04	; 4
    144e:	23 c0       	rjmp	.+70     	; 0x1496 <vfprintf+0xca>
    1450:	28 60       	ori	r18, 0x08	; 8
    1452:	21 c0       	rjmp	.+66     	; 0x1496 <vfprintf+0xca>
    1454:	27 fd       	sbrc	r18, 7
    1456:	27 c0       	rjmp	.+78     	; 0x14a6 <vfprintf+0xda>
    1458:	30 ed       	ldi	r19, 0xD0	; 208
    145a:	38 0f       	add	r19, r24
    145c:	3a 30       	cpi	r19, 0x0A	; 10
    145e:	78 f4       	brcc	.+30     	; 0x147e <vfprintf+0xb2>
    1460:	26 ff       	sbrs	r18, 6
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0xa4>
    1464:	fa e0       	ldi	r31, 0x0A	; 10
    1466:	5f 9e       	mul	r5, r31
    1468:	30 0d       	add	r19, r0
    146a:	11 24       	eor	r1, r1
    146c:	53 2e       	mov	r5, r19
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <vfprintf+0xca>
    1470:	8a e0       	ldi	r24, 0x0A	; 10
    1472:	38 9e       	mul	r3, r24
    1474:	30 0d       	add	r19, r0
    1476:	11 24       	eor	r1, r1
    1478:	33 2e       	mov	r3, r19
    147a:	20 62       	ori	r18, 0x20	; 32
    147c:	0c c0       	rjmp	.+24     	; 0x1496 <vfprintf+0xca>
    147e:	8e 32       	cpi	r24, 0x2E	; 46
    1480:	21 f4       	brne	.+8      	; 0x148a <vfprintf+0xbe>
    1482:	26 fd       	sbrc	r18, 6
    1484:	6b c1       	rjmp	.+726    	; 0x175c <vfprintf+0x390>
    1486:	20 64       	ori	r18, 0x40	; 64
    1488:	06 c0       	rjmp	.+12     	; 0x1496 <vfprintf+0xca>
    148a:	8c 36       	cpi	r24, 0x6C	; 108
    148c:	11 f4       	brne	.+4      	; 0x1492 <vfprintf+0xc6>
    148e:	20 68       	ori	r18, 0x80	; 128
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0xca>
    1492:	88 36       	cpi	r24, 0x68	; 104
    1494:	41 f4       	brne	.+16     	; 0x14a6 <vfprintf+0xda>
    1496:	f6 01       	movw	r30, r12
    1498:	93 fd       	sbrc	r25, 3
    149a:	85 91       	lpm	r24, Z+
    149c:	93 ff       	sbrs	r25, 3
    149e:	81 91       	ld	r24, Z+
    14a0:	6f 01       	movw	r12, r30
    14a2:	81 11       	cpse	r24, r1
    14a4:	c1 cf       	rjmp	.-126    	; 0x1428 <vfprintf+0x5c>
    14a6:	98 2f       	mov	r25, r24
    14a8:	9f 7d       	andi	r25, 0xDF	; 223
    14aa:	95 54       	subi	r25, 0x45	; 69
    14ac:	93 30       	cpi	r25, 0x03	; 3
    14ae:	28 f4       	brcc	.+10     	; 0x14ba <vfprintf+0xee>
    14b0:	0c 5f       	subi	r16, 0xFC	; 252
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	ff e3       	ldi	r31, 0x3F	; 63
    14b6:	f9 83       	std	Y+1, r31	; 0x01
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <vfprintf+0x108>
    14ba:	83 36       	cpi	r24, 0x63	; 99
    14bc:	31 f0       	breq	.+12     	; 0x14ca <vfprintf+0xfe>
    14be:	83 37       	cpi	r24, 0x73	; 115
    14c0:	71 f0       	breq	.+28     	; 0x14de <vfprintf+0x112>
    14c2:	83 35       	cpi	r24, 0x53	; 83
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <vfprintf+0xfc>
    14c6:	5b c0       	rjmp	.+182    	; 0x157e <vfprintf+0x1b2>
    14c8:	22 c0       	rjmp	.+68     	; 0x150e <vfprintf+0x142>
    14ca:	f8 01       	movw	r30, r16
    14cc:	80 81       	ld	r24, Z
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	0e 5f       	subi	r16, 0xFE	; 254
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	44 24       	eor	r4, r4
    14d6:	43 94       	inc	r4
    14d8:	51 2c       	mov	r5, r1
    14da:	54 01       	movw	r10, r8
    14dc:	15 c0       	rjmp	.+42     	; 0x1508 <vfprintf+0x13c>
    14de:	38 01       	movw	r6, r16
    14e0:	f2 e0       	ldi	r31, 0x02	; 2
    14e2:	6f 0e       	add	r6, r31
    14e4:	71 1c       	adc	r7, r1
    14e6:	f8 01       	movw	r30, r16
    14e8:	a0 80       	ld	r10, Z
    14ea:	b1 80       	ldd	r11, Z+1	; 0x01
    14ec:	26 ff       	sbrs	r18, 6
    14ee:	03 c0       	rjmp	.+6      	; 0x14f6 <vfprintf+0x12a>
    14f0:	65 2d       	mov	r22, r5
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <vfprintf+0x12e>
    14f6:	6f ef       	ldi	r22, 0xFF	; 255
    14f8:	7f ef       	ldi	r23, 0xFF	; 255
    14fa:	c5 01       	movw	r24, r10
    14fc:	2c 87       	std	Y+12, r18	; 0x0c
    14fe:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <strnlen>
    1502:	2c 01       	movw	r4, r24
    1504:	83 01       	movw	r16, r6
    1506:	2c 85       	ldd	r18, Y+12	; 0x0c
    1508:	2f 77       	andi	r18, 0x7F	; 127
    150a:	22 2e       	mov	r2, r18
    150c:	17 c0       	rjmp	.+46     	; 0x153c <vfprintf+0x170>
    150e:	38 01       	movw	r6, r16
    1510:	f2 e0       	ldi	r31, 0x02	; 2
    1512:	6f 0e       	add	r6, r31
    1514:	71 1c       	adc	r7, r1
    1516:	f8 01       	movw	r30, r16
    1518:	a0 80       	ld	r10, Z
    151a:	b1 80       	ldd	r11, Z+1	; 0x01
    151c:	26 ff       	sbrs	r18, 6
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <vfprintf+0x15a>
    1520:	65 2d       	mov	r22, r5
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	02 c0       	rjmp	.+4      	; 0x152a <vfprintf+0x15e>
    1526:	6f ef       	ldi	r22, 0xFF	; 255
    1528:	7f ef       	ldi	r23, 0xFF	; 255
    152a:	c5 01       	movw	r24, r10
    152c:	2c 87       	std	Y+12, r18	; 0x0c
    152e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <strnlen_P>
    1532:	2c 01       	movw	r4, r24
    1534:	2c 85       	ldd	r18, Y+12	; 0x0c
    1536:	20 68       	ori	r18, 0x80	; 128
    1538:	22 2e       	mov	r2, r18
    153a:	83 01       	movw	r16, r6
    153c:	23 fc       	sbrc	r2, 3
    153e:	1b c0       	rjmp	.+54     	; 0x1576 <vfprintf+0x1aa>
    1540:	83 2d       	mov	r24, r3
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	48 16       	cp	r4, r24
    1546:	59 06       	cpc	r5, r25
    1548:	b0 f4       	brcc	.+44     	; 0x1576 <vfprintf+0x1aa>
    154a:	b7 01       	movw	r22, r14
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    1554:	3a 94       	dec	r3
    1556:	f4 cf       	rjmp	.-24     	; 0x1540 <vfprintf+0x174>
    1558:	f5 01       	movw	r30, r10
    155a:	27 fc       	sbrc	r2, 7
    155c:	85 91       	lpm	r24, Z+
    155e:	27 fe       	sbrs	r2, 7
    1560:	81 91       	ld	r24, Z+
    1562:	5f 01       	movw	r10, r30
    1564:	b7 01       	movw	r22, r14
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    156c:	31 10       	cpse	r3, r1
    156e:	3a 94       	dec	r3
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	4f 1a       	sub	r4, r31
    1574:	51 08       	sbc	r5, r1
    1576:	41 14       	cp	r4, r1
    1578:	51 04       	cpc	r5, r1
    157a:	71 f7       	brne	.-36     	; 0x1558 <vfprintf+0x18c>
    157c:	e5 c0       	rjmp	.+458    	; 0x1748 <vfprintf+0x37c>
    157e:	84 36       	cpi	r24, 0x64	; 100
    1580:	11 f0       	breq	.+4      	; 0x1586 <vfprintf+0x1ba>
    1582:	89 36       	cpi	r24, 0x69	; 105
    1584:	39 f5       	brne	.+78     	; 0x15d4 <vfprintf+0x208>
    1586:	f8 01       	movw	r30, r16
    1588:	27 ff       	sbrs	r18, 7
    158a:	07 c0       	rjmp	.+14     	; 0x159a <vfprintf+0x1ce>
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	0c 5f       	subi	r16, 0xFC	; 252
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	08 c0       	rjmp	.+16     	; 0x15aa <vfprintf+0x1de>
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	88 27       	eor	r24, r24
    15a0:	77 fd       	sbrc	r23, 7
    15a2:	80 95       	com	r24
    15a4:	98 2f       	mov	r25, r24
    15a6:	0e 5f       	subi	r16, 0xFE	; 254
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
    15aa:	2f 76       	andi	r18, 0x6F	; 111
    15ac:	b2 2e       	mov	r11, r18
    15ae:	97 ff       	sbrs	r25, 7
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <vfprintf+0x1f8>
    15b2:	90 95       	com	r25
    15b4:	80 95       	com	r24
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	20 68       	ori	r18, 0x80	; 128
    15c2:	b2 2e       	mov	r11, r18
    15c4:	2a e0       	ldi	r18, 0x0A	; 10
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	a4 01       	movw	r20, r8
    15ca:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__ultoa_invert>
    15ce:	a8 2e       	mov	r10, r24
    15d0:	a8 18       	sub	r10, r8
    15d2:	44 c0       	rjmp	.+136    	; 0x165c <vfprintf+0x290>
    15d4:	85 37       	cpi	r24, 0x75	; 117
    15d6:	29 f4       	brne	.+10     	; 0x15e2 <vfprintf+0x216>
    15d8:	2f 7e       	andi	r18, 0xEF	; 239
    15da:	b2 2e       	mov	r11, r18
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	25 c0       	rjmp	.+74     	; 0x162c <vfprintf+0x260>
    15e2:	f2 2f       	mov	r31, r18
    15e4:	f9 7f       	andi	r31, 0xF9	; 249
    15e6:	bf 2e       	mov	r11, r31
    15e8:	8f 36       	cpi	r24, 0x6F	; 111
    15ea:	c1 f0       	breq	.+48     	; 0x161c <vfprintf+0x250>
    15ec:	18 f4       	brcc	.+6      	; 0x15f4 <vfprintf+0x228>
    15ee:	88 35       	cpi	r24, 0x58	; 88
    15f0:	79 f0       	breq	.+30     	; 0x1610 <vfprintf+0x244>
    15f2:	b4 c0       	rjmp	.+360    	; 0x175c <vfprintf+0x390>
    15f4:	80 37       	cpi	r24, 0x70	; 112
    15f6:	19 f0       	breq	.+6      	; 0x15fe <vfprintf+0x232>
    15f8:	88 37       	cpi	r24, 0x78	; 120
    15fa:	21 f0       	breq	.+8      	; 0x1604 <vfprintf+0x238>
    15fc:	af c0       	rjmp	.+350    	; 0x175c <vfprintf+0x390>
    15fe:	2f 2f       	mov	r18, r31
    1600:	20 61       	ori	r18, 0x10	; 16
    1602:	b2 2e       	mov	r11, r18
    1604:	b4 fe       	sbrs	r11, 4
    1606:	0d c0       	rjmp	.+26     	; 0x1622 <vfprintf+0x256>
    1608:	8b 2d       	mov	r24, r11
    160a:	84 60       	ori	r24, 0x04	; 4
    160c:	b8 2e       	mov	r11, r24
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <vfprintf+0x256>
    1610:	24 ff       	sbrs	r18, 4
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <vfprintf+0x25c>
    1614:	9f 2f       	mov	r25, r31
    1616:	96 60       	ori	r25, 0x06	; 6
    1618:	b9 2e       	mov	r11, r25
    161a:	06 c0       	rjmp	.+12     	; 0x1628 <vfprintf+0x25c>
    161c:	28 e0       	ldi	r18, 0x08	; 8
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	05 c0       	rjmp	.+10     	; 0x162c <vfprintf+0x260>
    1622:	20 e1       	ldi	r18, 0x10	; 16
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	02 c0       	rjmp	.+4      	; 0x162c <vfprintf+0x260>
    1628:	20 e1       	ldi	r18, 0x10	; 16
    162a:	32 e0       	ldi	r19, 0x02	; 2
    162c:	f8 01       	movw	r30, r16
    162e:	b7 fe       	sbrs	r11, 7
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <vfprintf+0x274>
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	0c 5f       	subi	r16, 0xFC	; 252
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	06 c0       	rjmp	.+12     	; 0x164c <vfprintf+0x280>
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 5f       	subi	r16, 0xFE	; 254
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	a4 01       	movw	r20, r8
    164e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__ultoa_invert>
    1652:	a8 2e       	mov	r10, r24
    1654:	a8 18       	sub	r10, r8
    1656:	fb 2d       	mov	r31, r11
    1658:	ff 77       	andi	r31, 0x7F	; 127
    165a:	bf 2e       	mov	r11, r31
    165c:	b6 fe       	sbrs	r11, 6
    165e:	0b c0       	rjmp	.+22     	; 0x1676 <vfprintf+0x2aa>
    1660:	2b 2d       	mov	r18, r11
    1662:	2e 7f       	andi	r18, 0xFE	; 254
    1664:	a5 14       	cp	r10, r5
    1666:	50 f4       	brcc	.+20     	; 0x167c <vfprintf+0x2b0>
    1668:	b4 fe       	sbrs	r11, 4
    166a:	0a c0       	rjmp	.+20     	; 0x1680 <vfprintf+0x2b4>
    166c:	b2 fc       	sbrc	r11, 2
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <vfprintf+0x2b4>
    1670:	2b 2d       	mov	r18, r11
    1672:	2e 7e       	andi	r18, 0xEE	; 238
    1674:	05 c0       	rjmp	.+10     	; 0x1680 <vfprintf+0x2b4>
    1676:	7a 2c       	mov	r7, r10
    1678:	2b 2d       	mov	r18, r11
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <vfprintf+0x2b6>
    167c:	7a 2c       	mov	r7, r10
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <vfprintf+0x2b6>
    1680:	75 2c       	mov	r7, r5
    1682:	24 ff       	sbrs	r18, 4
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <vfprintf+0x2d4>
    1686:	fe 01       	movw	r30, r28
    1688:	ea 0d       	add	r30, r10
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
    168e:	80 33       	cpi	r24, 0x30	; 48
    1690:	11 f4       	brne	.+4      	; 0x1696 <vfprintf+0x2ca>
    1692:	29 7e       	andi	r18, 0xE9	; 233
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <vfprintf+0x2dc>
    1696:	22 ff       	sbrs	r18, 2
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <vfprintf+0x2da>
    169a:	73 94       	inc	r7
    169c:	73 94       	inc	r7
    169e:	04 c0       	rjmp	.+8      	; 0x16a8 <vfprintf+0x2dc>
    16a0:	82 2f       	mov	r24, r18
    16a2:	86 78       	andi	r24, 0x86	; 134
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <vfprintf+0x2dc>
    16a6:	73 94       	inc	r7
    16a8:	23 fd       	sbrc	r18, 3
    16aa:	13 c0       	rjmp	.+38     	; 0x16d2 <vfprintf+0x306>
    16ac:	20 ff       	sbrs	r18, 0
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0x2f0>
    16b0:	5a 2c       	mov	r5, r10
    16b2:	73 14       	cp	r7, r3
    16b4:	18 f4       	brcc	.+6      	; 0x16bc <vfprintf+0x2f0>
    16b6:	53 0c       	add	r5, r3
    16b8:	57 18       	sub	r5, r7
    16ba:	73 2c       	mov	r7, r3
    16bc:	73 14       	cp	r7, r3
    16be:	68 f4       	brcc	.+26     	; 0x16da <vfprintf+0x30e>
    16c0:	b7 01       	movw	r22, r14
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	2c 87       	std	Y+12, r18	; 0x0c
    16c8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    16cc:	73 94       	inc	r7
    16ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d0:	f5 cf       	rjmp	.-22     	; 0x16bc <vfprintf+0x2f0>
    16d2:	73 14       	cp	r7, r3
    16d4:	10 f4       	brcc	.+4      	; 0x16da <vfprintf+0x30e>
    16d6:	37 18       	sub	r3, r7
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <vfprintf+0x310>
    16da:	31 2c       	mov	r3, r1
    16dc:	24 ff       	sbrs	r18, 4
    16de:	12 c0       	rjmp	.+36     	; 0x1704 <vfprintf+0x338>
    16e0:	b7 01       	movw	r22, r14
    16e2:	80 e3       	ldi	r24, 0x30	; 48
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	2c 87       	std	Y+12, r18	; 0x0c
    16e8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    16ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ee:	22 ff       	sbrs	r18, 2
    16f0:	17 c0       	rjmp	.+46     	; 0x1720 <vfprintf+0x354>
    16f2:	21 ff       	sbrs	r18, 1
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <vfprintf+0x330>
    16f6:	88 e5       	ldi	r24, 0x58	; 88
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfprintf+0x334>
    16fc:	88 e7       	ldi	r24, 0x78	; 120
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	b7 01       	movw	r22, r14
    1702:	0c c0       	rjmp	.+24     	; 0x171c <vfprintf+0x350>
    1704:	82 2f       	mov	r24, r18
    1706:	86 78       	andi	r24, 0x86	; 134
    1708:	59 f0       	breq	.+22     	; 0x1720 <vfprintf+0x354>
    170a:	21 fd       	sbrc	r18, 1
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x346>
    170e:	80 e2       	ldi	r24, 0x20	; 32
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <vfprintf+0x348>
    1712:	8b e2       	ldi	r24, 0x2B	; 43
    1714:	27 fd       	sbrc	r18, 7
    1716:	8d e2       	ldi	r24, 0x2D	; 45
    1718:	b7 01       	movw	r22, r14
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    1720:	a5 14       	cp	r10, r5
    1722:	38 f4       	brcc	.+14     	; 0x1732 <vfprintf+0x366>
    1724:	b7 01       	movw	r22, r14
    1726:	80 e3       	ldi	r24, 0x30	; 48
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    172e:	5a 94       	dec	r5
    1730:	f7 cf       	rjmp	.-18     	; 0x1720 <vfprintf+0x354>
    1732:	aa 94       	dec	r10
    1734:	f4 01       	movw	r30, r8
    1736:	ea 0d       	add	r30, r10
    1738:	f1 1d       	adc	r31, r1
    173a:	80 81       	ld	r24, Z
    173c:	b7 01       	movw	r22, r14
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    1744:	a1 10       	cpse	r10, r1
    1746:	f5 cf       	rjmp	.-22     	; 0x1732 <vfprintf+0x366>
    1748:	33 20       	and	r3, r3
    174a:	09 f4       	brne	.+2      	; 0x174e <vfprintf+0x382>
    174c:	51 ce       	rjmp	.-862    	; 0x13f0 <vfprintf+0x24>
    174e:	b7 01       	movw	r22, r14
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <fputc>
    1758:	3a 94       	dec	r3
    175a:	f6 cf       	rjmp	.-20     	; 0x1748 <vfprintf+0x37c>
    175c:	f7 01       	movw	r30, r14
    175e:	86 81       	ldd	r24, Z+6	; 0x06
    1760:	97 81       	ldd	r25, Z+7	; 0x07
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x39c>
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	9f ef       	ldi	r25, 0xFF	; 255
    1768:	2c 96       	adiw	r28, 0x0c	; 12
    176a:	e2 e1       	ldi	r30, 0x12	; 18
    176c:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__epilogue_restores__>

00001770 <putval>:
    1770:	20 fd       	sbrc	r18, 0
    1772:	09 c0       	rjmp	.+18     	; 0x1786 <putval+0x16>
    1774:	fc 01       	movw	r30, r24
    1776:	23 fd       	sbrc	r18, 3
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <putval+0x14>
    177a:	22 ff       	sbrs	r18, 2
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <putval+0x12>
    177e:	73 83       	std	Z+3, r23	; 0x03
    1780:	62 83       	std	Z+2, r22	; 0x02
    1782:	51 83       	std	Z+1, r21	; 0x01
    1784:	40 83       	st	Z, r20
    1786:	08 95       	ret

00001788 <mulacc>:
    1788:	44 fd       	sbrc	r20, 4
    178a:	10 c0       	rjmp	.+32     	; 0x17ac <mulacc+0x24>
    178c:	46 fd       	sbrc	r20, 6
    178e:	10 c0       	rjmp	.+32     	; 0x17b0 <mulacc+0x28>
    1790:	db 01       	movw	r26, r22
    1792:	fc 01       	movw	r30, r24
    1794:	aa 0f       	add	r26, r26
    1796:	bb 1f       	adc	r27, r27
    1798:	ee 1f       	adc	r30, r30
    179a:	ff 1f       	adc	r31, r31
    179c:	10 94       	com	r1
    179e:	d1 f7       	brne	.-12     	; 0x1794 <mulacc+0xc>
    17a0:	6a 0f       	add	r22, r26
    17a2:	7b 1f       	adc	r23, r27
    17a4:	8e 1f       	adc	r24, r30
    17a6:	9f 1f       	adc	r25, r31
    17a8:	31 e0       	ldi	r19, 0x01	; 1
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <mulacc+0x2a>
    17ac:	33 e0       	ldi	r19, 0x03	; 3
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <mulacc+0x2a>
    17b0:	34 e0       	ldi	r19, 0x04	; 4
    17b2:	66 0f       	add	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	88 1f       	adc	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	31 50       	subi	r19, 0x01	; 1
    17bc:	d1 f7       	brne	.-12     	; 0x17b2 <mulacc+0x2a>
    17be:	62 0f       	add	r22, r18
    17c0:	71 1d       	adc	r23, r1
    17c2:	81 1d       	adc	r24, r1
    17c4:	91 1d       	adc	r25, r1
    17c6:	08 95       	ret

000017c8 <skip_spaces>:
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	8c 01       	movw	r16, r24
    17d2:	c8 01       	movw	r24, r16
    17d4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    17d8:	ec 01       	movw	r28, r24
    17da:	97 fd       	sbrc	r25, 7
    17dc:	08 c0       	rjmp	.+16     	; 0x17ee <skip_spaces+0x26>
    17de:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <isspace>
    17e2:	89 2b       	or	r24, r25
    17e4:	b1 f7       	brne	.-20     	; 0x17d2 <skip_spaces+0xa>
    17e6:	b8 01       	movw	r22, r16
    17e8:	ce 01       	movw	r24, r28
    17ea:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <ungetc>
    17ee:	ce 01       	movw	r24, r28
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <conv_int>:
    17fa:	8f 92       	push	r8
    17fc:	9f 92       	push	r9
    17fe:	af 92       	push	r10
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	ec 01       	movw	r28, r24
    1812:	a6 2e       	mov	r10, r22
    1814:	4a 01       	movw	r8, r20
    1816:	02 2f       	mov	r16, r18
    1818:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    181c:	ac 01       	movw	r20, r24
    181e:	55 27       	eor	r21, r21
    1820:	4b 32       	cpi	r20, 0x2B	; 43
    1822:	51 05       	cpc	r21, r1
    1824:	21 f0       	breq	.+8      	; 0x182e <conv_int+0x34>
    1826:	4d 32       	cpi	r20, 0x2D	; 45
    1828:	51 05       	cpc	r21, r1
    182a:	51 f4       	brne	.+20     	; 0x1840 <conv_int+0x46>
    182c:	00 68       	ori	r16, 0x80	; 128
    182e:	aa 94       	dec	r10
    1830:	11 f4       	brne	.+4      	; 0x1836 <conv_int+0x3c>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	67 c0       	rjmp	.+206    	; 0x1904 <conv_int+0x10a>
    1836:	ce 01       	movw	r24, r28
    1838:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    183c:	97 fd       	sbrc	r25, 7
    183e:	f9 cf       	rjmp	.-14     	; 0x1832 <conv_int+0x38>
    1840:	10 2f       	mov	r17, r16
    1842:	1d 7f       	andi	r17, 0xFD	; 253
    1844:	30 2f       	mov	r19, r16
    1846:	30 73       	andi	r19, 0x30	; 48
    1848:	01 f5       	brne	.+64     	; 0x188a <conv_int+0x90>
    184a:	80 33       	cpi	r24, 0x30	; 48
    184c:	f1 f4       	brne	.+60     	; 0x188a <conv_int+0x90>
    184e:	ff 24       	eor	r15, r15
    1850:	fa 94       	dec	r15
    1852:	fa 0c       	add	r15, r10
    1854:	09 f4       	brne	.+2      	; 0x1858 <conv_int+0x5e>
    1856:	42 c0       	rjmp	.+132    	; 0x18dc <conv_int+0xe2>
    1858:	ce 01       	movw	r24, r28
    185a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    185e:	97 fd       	sbrc	r25, 7
    1860:	3d c0       	rjmp	.+122    	; 0x18dc <conv_int+0xe2>
    1862:	38 2f       	mov	r19, r24
    1864:	3f 7d       	andi	r19, 0xDF	; 223
    1866:	38 35       	cpi	r19, 0x58	; 88
    1868:	51 f4       	brne	.+20     	; 0x187e <conv_int+0x84>
    186a:	12 64       	ori	r17, 0x42	; 66
    186c:	aa 94       	dec	r10
    186e:	aa 94       	dec	r10
    1870:	a9 f1       	breq	.+106    	; 0x18dc <conv_int+0xe2>
    1872:	ce 01       	movw	r24, r28
    1874:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    1878:	97 ff       	sbrs	r25, 7
    187a:	07 c0       	rjmp	.+14     	; 0x188a <conv_int+0x90>
    187c:	2f c0       	rjmp	.+94     	; 0x18dc <conv_int+0xe2>
    187e:	06 ff       	sbrs	r16, 6
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <conv_int+0x8c>
    1882:	12 60       	ori	r17, 0x02	; 2
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <conv_int+0x8e>
    1886:	12 61       	ori	r17, 0x12	; 18
    1888:	af 2c       	mov	r10, r15
    188a:	c1 2c       	mov	r12, r1
    188c:	d1 2c       	mov	r13, r1
    188e:	76 01       	movw	r14, r12
    1890:	20 ed       	ldi	r18, 0xD0	; 208
    1892:	28 0f       	add	r18, r24
    1894:	28 30       	cpi	r18, 0x08	; 8
    1896:	80 f0       	brcs	.+32     	; 0x18b8 <conv_int+0xbe>
    1898:	14 ff       	sbrs	r17, 4
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <conv_int+0xaa>
    189c:	be 01       	movw	r22, r28
    189e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <ungetc>
    18a2:	19 c0       	rjmp	.+50     	; 0x18d6 <conv_int+0xdc>
    18a4:	2a 30       	cpi	r18, 0x0A	; 10
    18a6:	40 f0       	brcs	.+16     	; 0x18b8 <conv_int+0xbe>
    18a8:	16 ff       	sbrs	r17, 6
    18aa:	f8 cf       	rjmp	.-16     	; 0x189c <conv_int+0xa2>
    18ac:	2f 7d       	andi	r18, 0xDF	; 223
    18ae:	3f ee       	ldi	r19, 0xEF	; 239
    18b0:	32 0f       	add	r19, r18
    18b2:	36 30       	cpi	r19, 0x06	; 6
    18b4:	98 f7       	brcc	.-26     	; 0x189c <conv_int+0xa2>
    18b6:	27 50       	subi	r18, 0x07	; 7
    18b8:	41 2f       	mov	r20, r17
    18ba:	c7 01       	movw	r24, r14
    18bc:	b6 01       	movw	r22, r12
    18be:	0e 94 c4 0b 	call	0x1788	; 0x1788 <mulacc>
    18c2:	6b 01       	movw	r12, r22
    18c4:	7c 01       	movw	r14, r24
    18c6:	12 60       	ori	r17, 0x02	; 2
    18c8:	aa 94       	dec	r10
    18ca:	59 f0       	breq	.+22     	; 0x18e2 <conv_int+0xe8>
    18cc:	ce 01       	movw	r24, r28
    18ce:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    18d2:	97 ff       	sbrs	r25, 7
    18d4:	dd cf       	rjmp	.-70     	; 0x1890 <conv_int+0x96>
    18d6:	11 fd       	sbrc	r17, 1
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <conv_int+0xe8>
    18da:	ab cf       	rjmp	.-170    	; 0x1832 <conv_int+0x38>
    18dc:	c1 2c       	mov	r12, r1
    18de:	d1 2c       	mov	r13, r1
    18e0:	76 01       	movw	r14, r12
    18e2:	17 ff       	sbrs	r17, 7
    18e4:	08 c0       	rjmp	.+16     	; 0x18f6 <conv_int+0xfc>
    18e6:	f0 94       	com	r15
    18e8:	e0 94       	com	r14
    18ea:	d0 94       	com	r13
    18ec:	c0 94       	com	r12
    18ee:	c1 1c       	adc	r12, r1
    18f0:	d1 1c       	adc	r13, r1
    18f2:	e1 1c       	adc	r14, r1
    18f4:	f1 1c       	adc	r15, r1
    18f6:	21 2f       	mov	r18, r17
    18f8:	b7 01       	movw	r22, r14
    18fa:	a6 01       	movw	r20, r12
    18fc:	c4 01       	movw	r24, r8
    18fe:	0e 94 b8 0b 	call	0x1770	; 0x1770 <putval>
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	af 90       	pop	r10
    1916:	9f 90       	pop	r9
    1918:	8f 90       	pop	r8
    191a:	08 95       	ret

0000191c <conv_brk>:
    191c:	a1 e2       	ldi	r26, 0x21	; 33
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e4 e9       	ldi	r30, 0x94	; 148
    1922:	fc e0       	ldi	r31, 0x0C	; 12
    1924:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__prologue_saves__+0xa>
    1928:	5c 01       	movw	r10, r24
    192a:	7a 01       	movw	r14, r20
    192c:	8e 01       	movw	r16, r28
    192e:	0f 5f       	subi	r16, 0xFF	; 255
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	68 01       	movw	r12, r16
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	d8 01       	movw	r26, r16
    1938:	1d 92       	st	X+, r1
    193a:	8a 95       	dec	r24
    193c:	e9 f7       	brne	.-6      	; 0x1938 <conv_brk+0x1c>
    193e:	f5 01       	movw	r30, r10
    1940:	73 80       	ldd	r7, Z+3	; 0x03
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	81 2c       	mov	r8, r1
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	91 2c       	mov	r9, r1
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	f9 01       	movw	r30, r18
    1952:	73 fc       	sbrc	r7, 3
    1954:	a5 91       	lpm	r26, Z+
    1956:	73 fe       	sbrs	r7, 3
    1958:	a1 91       	ld	r26, Z+
    195a:	8f 01       	movw	r16, r30
    195c:	7a 2f       	mov	r23, r26
    195e:	9f 01       	movw	r18, r30
    1960:	a1 11       	cpse	r26, r1
    1962:	03 c0       	rjmp	.+6      	; 0x196a <conv_brk+0x4e>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	7d c0       	rjmp	.+250    	; 0x1a64 <conv_brk+0x148>
    196a:	ae 35       	cpi	r26, 0x5E	; 94
    196c:	19 f4       	brne	.+6      	; 0x1974 <conv_brk+0x58>
    196e:	41 15       	cp	r20, r1
    1970:	51 05       	cpc	r21, r1
    1972:	59 f1       	breq	.+86     	; 0x19ca <conv_brk+0xae>
    1974:	e9 2d       	mov	r30, r9
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	e4 17       	cp	r30, r20
    197a:	f5 07       	cpc	r31, r21
    197c:	3c f4       	brge	.+14     	; 0x198c <conv_brk+0x70>
    197e:	ad 35       	cpi	r26, 0x5D	; 93
    1980:	69 f1       	breq	.+90     	; 0x19dc <conv_brk+0xc0>
    1982:	ad 32       	cpi	r26, 0x2D	; 45
    1984:	19 f4       	brne	.+6      	; 0x198c <conv_brk+0x70>
    1986:	bb 23       	and	r27, r27
    1988:	19 f1       	breq	.+70     	; 0x19d0 <conv_brk+0xb4>
    198a:	03 c0       	rjmp	.+6      	; 0x1992 <conv_brk+0x76>
    198c:	b1 11       	cpse	r27, r1
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <conv_brk+0x76>
    1990:	8a 2e       	mov	r8, r26
    1992:	e7 2f       	mov	r30, r23
    1994:	e6 95       	lsr	r30
    1996:	e6 95       	lsr	r30
    1998:	e6 95       	lsr	r30
    199a:	86 01       	movw	r16, r12
    199c:	0e 0f       	add	r16, r30
    199e:	11 1d       	adc	r17, r1
    19a0:	f8 01       	movw	r30, r16
    19a2:	a7 2f       	mov	r26, r23
    19a4:	a7 70       	andi	r26, 0x07	; 7
    19a6:	8c 01       	movw	r16, r24
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <conv_brk+0x92>
    19aa:	00 0f       	add	r16, r16
    19ac:	11 1f       	adc	r17, r17
    19ae:	aa 95       	dec	r26
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <conv_brk+0x8e>
    19b2:	d8 01       	movw	r26, r16
    19b4:	b0 81       	ld	r27, Z
    19b6:	ba 2b       	or	r27, r26
    19b8:	b0 83       	st	Z, r27
    19ba:	78 15       	cp	r23, r8
    19bc:	59 f0       	breq	.+22     	; 0x19d4 <conv_brk+0xb8>
    19be:	78 15       	cp	r23, r8
    19c0:	10 f4       	brcc	.+4      	; 0x19c6 <conv_brk+0xaa>
    19c2:	7f 5f       	subi	r23, 0xFF	; 255
    19c4:	e6 cf       	rjmp	.-52     	; 0x1992 <conv_brk+0x76>
    19c6:	71 50       	subi	r23, 0x01	; 1
    19c8:	e4 cf       	rjmp	.-56     	; 0x1992 <conv_brk+0x76>
    19ca:	99 24       	eor	r9, r9
    19cc:	93 94       	inc	r9
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <conv_brk+0xba>
    19d0:	b1 e0       	ldi	r27, 0x01	; 1
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <conv_brk+0xba>
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	4f 5f       	subi	r20, 0xFF	; 255
    19d8:	5f 4f       	sbci	r21, 0xFF	; 255
    19da:	ba cf       	rjmp	.-140    	; 0x1950 <conv_brk+0x34>
    19dc:	bb 23       	and	r27, r27
    19de:	19 f0       	breq	.+6      	; 0x19e6 <conv_brk+0xca>
    19e0:	8e 81       	ldd	r24, Y+6	; 0x06
    19e2:	80 62       	ori	r24, 0x20	; 32
    19e4:	8e 83       	std	Y+6, r24	; 0x06
    19e6:	91 10       	cpse	r9, r1
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <conv_brk+0xd4>
    19ea:	99 24       	eor	r9, r9
    19ec:	93 94       	inc	r9
    19ee:	15 c0       	rjmp	.+42     	; 0x1a1a <conv_brk+0xfe>
    19f0:	f6 01       	movw	r30, r12
    19f2:	ce 01       	movw	r24, r28
    19f4:	81 96       	adiw	r24, 0x21	; 33
    19f6:	20 81       	ld	r18, Z
    19f8:	20 95       	com	r18
    19fa:	21 93       	st	Z+, r18
    19fc:	e8 17       	cp	r30, r24
    19fe:	f9 07       	cpc	r31, r25
    1a00:	d1 f7       	brne	.-12     	; 0x19f6 <conv_brk+0xda>
    1a02:	f3 cf       	rjmp	.-26     	; 0x19ea <conv_brk+0xce>
    1a04:	e1 14       	cp	r14, r1
    1a06:	f1 04       	cpc	r15, r1
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <conv_brk+0xf8>
    1a0a:	d7 01       	movw	r26, r14
    1a0c:	8c 93       	st	X, r24
    1a0e:	f7 01       	movw	r30, r14
    1a10:	31 96       	adiw	r30, 0x01	; 1
    1a12:	7f 01       	movw	r14, r30
    1a14:	61 50       	subi	r22, 0x01	; 1
    1a16:	01 f1       	breq	.+64     	; 0x1a58 <conv_brk+0x13c>
    1a18:	91 2c       	mov	r9, r1
    1a1a:	c5 01       	movw	r24, r10
    1a1c:	69 a3       	std	Y+33, r22	; 0x21
    1a1e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    1a22:	69 a1       	ldd	r22, Y+33	; 0x21
    1a24:	97 fd       	sbrc	r25, 7
    1a26:	16 c0       	rjmp	.+44     	; 0x1a54 <conv_brk+0x138>
    1a28:	28 2f       	mov	r18, r24
    1a2a:	26 95       	lsr	r18
    1a2c:	26 95       	lsr	r18
    1a2e:	26 95       	lsr	r18
    1a30:	f6 01       	movw	r30, r12
    1a32:	e2 0f       	add	r30, r18
    1a34:	f1 1d       	adc	r31, r1
    1a36:	20 81       	ld	r18, Z
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	ac 01       	movw	r20, r24
    1a3c:	47 70       	andi	r20, 0x07	; 7
    1a3e:	55 27       	eor	r21, r21
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <conv_brk+0x12a>
    1a42:	35 95       	asr	r19
    1a44:	27 95       	ror	r18
    1a46:	4a 95       	dec	r20
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <conv_brk+0x126>
    1a4a:	20 fd       	sbrc	r18, 0
    1a4c:	db cf       	rjmp	.-74     	; 0x1a04 <conv_brk+0xe8>
    1a4e:	b5 01       	movw	r22, r10
    1a50:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <ungetc>
    1a54:	91 10       	cpse	r9, r1
    1a56:	86 cf       	rjmp	.-244    	; 0x1964 <conv_brk+0x48>
    1a58:	e1 14       	cp	r14, r1
    1a5a:	f1 04       	cpc	r15, r1
    1a5c:	11 f0       	breq	.+4      	; 0x1a62 <conv_brk+0x146>
    1a5e:	d7 01       	movw	r26, r14
    1a60:	1c 92       	st	X, r1
    1a62:	c8 01       	movw	r24, r16
    1a64:	a1 96       	adiw	r28, 0x21	; 33
    1a66:	ed e0       	ldi	r30, 0x0D	; 13
    1a68:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__epilogue_restores__+0xa>

00001a6c <vfscanf>:
    1a6c:	4f 92       	push	r4
    1a6e:	5f 92       	push	r5
    1a70:	7f 92       	push	r7
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	1f 92       	push	r1
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	8c 01       	movw	r16, r24
    1a92:	2b 01       	movw	r4, r22
    1a94:	7a 01       	movw	r14, r20
    1a96:	fc 01       	movw	r30, r24
    1a98:	17 82       	std	Z+7, r1	; 0x07
    1a9a:	16 82       	std	Z+6, r1	; 0x06
    1a9c:	a1 2c       	mov	r10, r1
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	d3 80       	ldd	r13, Z+3	; 0x03
    1aa2:	f2 01       	movw	r30, r4
    1aa4:	d3 fc       	sbrc	r13, 3
    1aa6:	85 91       	lpm	r24, Z+
    1aa8:	d3 fe       	sbrs	r13, 3
    1aaa:	81 91       	ld	r24, Z+
    1aac:	38 2f       	mov	r19, r24
    1aae:	2f 01       	movw	r4, r30
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <vfscanf+0x4a>
    1ab4:	fc c0       	rjmp	.+504    	; 0x1cae <vfscanf+0x242>
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	39 83       	std	Y+1, r19	; 0x01
    1aba:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <isspace>
    1abe:	39 81       	ldd	r19, Y+1	; 0x01
    1ac0:	89 2b       	or	r24, r25
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <vfscanf+0x60>
    1ac4:	c8 01       	movw	r24, r16
    1ac6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <skip_spaces>
    1aca:	e9 cf       	rjmp	.-46     	; 0x1a9e <vfscanf+0x32>
    1acc:	35 32       	cpi	r19, 0x25	; 37
    1ace:	41 f4       	brne	.+16     	; 0x1ae0 <vfscanf+0x74>
    1ad0:	f2 01       	movw	r30, r4
    1ad2:	d3 fc       	sbrc	r13, 3
    1ad4:	35 91       	lpm	r19, Z+
    1ad6:	d3 fe       	sbrs	r13, 3
    1ad8:	31 91       	ld	r19, Z+
    1ada:	2f 01       	movw	r4, r30
    1adc:	35 32       	cpi	r19, 0x25	; 37
    1ade:	69 f4       	brne	.+26     	; 0x1afa <vfscanf+0x8e>
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	39 83       	std	Y+1, r19	; 0x01
    1ae4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    1ae8:	39 81       	ldd	r19, Y+1	; 0x01
    1aea:	97 fd       	sbrc	r25, 7
    1aec:	de c0       	rjmp	.+444    	; 0x1caa <vfscanf+0x23e>
    1aee:	38 17       	cp	r19, r24
    1af0:	b1 f2       	breq	.-84     	; 0x1a9e <vfscanf+0x32>
    1af2:	b8 01       	movw	r22, r16
    1af4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <ungetc>
    1af8:	da c0       	rjmp	.+436    	; 0x1cae <vfscanf+0x242>
    1afa:	3a 32       	cpi	r19, 0x2A	; 42
    1afc:	41 f4       	brne	.+16     	; 0x1b0e <vfscanf+0xa2>
    1afe:	d3 fc       	sbrc	r13, 3
    1b00:	35 91       	lpm	r19, Z+
    1b02:	d3 fe       	sbrs	r13, 3
    1b04:	31 91       	ld	r19, Z+
    1b06:	2f 01       	movw	r4, r30
    1b08:	bb 24       	eor	r11, r11
    1b0a:	b3 94       	inc	r11
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <vfscanf+0xa4>
    1b0e:	b1 2c       	mov	r11, r1
    1b10:	71 2c       	mov	r7, r1
    1b12:	20 ed       	ldi	r18, 0xD0	; 208
    1b14:	23 0f       	add	r18, r19
    1b16:	2a 30       	cpi	r18, 0x0A	; 10
    1b18:	90 f4       	brcc	.+36     	; 0x1b3e <vfscanf+0xd2>
    1b1a:	fb 2d       	mov	r31, r11
    1b1c:	f2 60       	ori	r31, 0x02	; 2
    1b1e:	bf 2e       	mov	r11, r31
    1b20:	67 2d       	mov	r22, r7
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <mulacc>
    1b2e:	76 2e       	mov	r7, r22
    1b30:	f2 01       	movw	r30, r4
    1b32:	d3 fc       	sbrc	r13, 3
    1b34:	35 91       	lpm	r19, Z+
    1b36:	d3 fe       	sbrs	r13, 3
    1b38:	31 91       	ld	r19, Z+
    1b3a:	2f 01       	movw	r4, r30
    1b3c:	ea cf       	rjmp	.-44     	; 0x1b12 <vfscanf+0xa6>
    1b3e:	b1 fe       	sbrs	r11, 1
    1b40:	03 c0       	rjmp	.+6      	; 0x1b48 <vfscanf+0xdc>
    1b42:	71 10       	cpse	r7, r1
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <vfscanf+0xe0>
    1b46:	b3 c0       	rjmp	.+358    	; 0x1cae <vfscanf+0x242>
    1b48:	77 24       	eor	r7, r7
    1b4a:	7a 94       	dec	r7
    1b4c:	38 36       	cpi	r19, 0x68	; 104
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <vfscanf+0xea>
    1b50:	3c 36       	cpi	r19, 0x6C	; 108
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <vfscanf+0x100>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <vfscanf+0x112>
    1b56:	f2 01       	movw	r30, r4
    1b58:	d3 fc       	sbrc	r13, 3
    1b5a:	35 91       	lpm	r19, Z+
    1b5c:	d3 fe       	sbrs	r13, 3
    1b5e:	31 91       	ld	r19, Z+
    1b60:	2f 01       	movw	r4, r30
    1b62:	38 36       	cpi	r19, 0x68	; 104
    1b64:	61 f4       	brne	.+24     	; 0x1b7e <vfscanf+0x112>
    1b66:	fb 2d       	mov	r31, r11
    1b68:	f8 60       	ori	r31, 0x08	; 8
    1b6a:	bf 2e       	mov	r11, r31
    1b6c:	8b 2d       	mov	r24, r11
    1b6e:	84 60       	ori	r24, 0x04	; 4
    1b70:	b8 2e       	mov	r11, r24
    1b72:	f2 01       	movw	r30, r4
    1b74:	d3 fc       	sbrc	r13, 3
    1b76:	35 91       	lpm	r19, Z+
    1b78:	d3 fe       	sbrs	r13, 3
    1b7a:	31 91       	ld	r19, Z+
    1b7c:	2f 01       	movw	r4, r30
    1b7e:	33 23       	and	r19, r19
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <vfscanf+0x118>
    1b82:	95 c0       	rjmp	.+298    	; 0x1cae <vfscanf+0x242>
    1b84:	63 2f       	mov	r22, r19
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	88 ea       	ldi	r24, 0xA8	; 168
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	39 83       	std	Y+1, r19	; 0x01
    1b8e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <strchr_P>
    1b92:	39 81       	ldd	r19, Y+1	; 0x01
    1b94:	89 2b       	or	r24, r25
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <vfscanf+0x12e>
    1b98:	8a c0       	rjmp	.+276    	; 0x1cae <vfscanf+0x242>
    1b9a:	b0 fc       	sbrc	r11, 0
    1b9c:	07 c0       	rjmp	.+14     	; 0x1bac <vfscanf+0x140>
    1b9e:	f7 01       	movw	r30, r14
    1ba0:	c0 80       	ld	r12, Z
    1ba2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ba4:	c7 01       	movw	r24, r14
    1ba6:	02 96       	adiw	r24, 0x02	; 2
    1ba8:	7c 01       	movw	r14, r24
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <vfscanf+0x144>
    1bac:	c1 2c       	mov	r12, r1
    1bae:	d1 2c       	mov	r13, r1
    1bb0:	3e 36       	cpi	r19, 0x6E	; 110
    1bb2:	51 f4       	brne	.+20     	; 0x1bc8 <vfscanf+0x15c>
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	46 81       	ldd	r20, Z+6	; 0x06
    1bb8:	57 81       	ldd	r21, Z+7	; 0x07
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	2b 2d       	mov	r18, r11
    1bc0:	c6 01       	movw	r24, r12
    1bc2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <putval>
    1bc6:	6b cf       	rjmp	.-298    	; 0x1a9e <vfscanf+0x32>
    1bc8:	33 36       	cpi	r19, 0x63	; 99
    1bca:	a1 f4       	brne	.+40     	; 0x1bf4 <vfscanf+0x188>
    1bcc:	b1 fc       	sbrc	r11, 1
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <vfscanf+0x168>
    1bd0:	77 24       	eor	r7, r7
    1bd2:	73 94       	inc	r7
    1bd4:	c8 01       	movw	r24, r16
    1bd6:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    1bda:	97 fd       	sbrc	r25, 7
    1bdc:	66 c0       	rjmp	.+204    	; 0x1caa <vfscanf+0x23e>
    1bde:	c1 14       	cp	r12, r1
    1be0:	d1 04       	cpc	r13, r1
    1be2:	29 f0       	breq	.+10     	; 0x1bee <vfscanf+0x182>
    1be4:	f6 01       	movw	r30, r12
    1be6:	80 83       	st	Z, r24
    1be8:	c6 01       	movw	r24, r12
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	6c 01       	movw	r12, r24
    1bee:	7a 94       	dec	r7
    1bf0:	89 f7       	brne	.-30     	; 0x1bd4 <vfscanf+0x168>
    1bf2:	57 c0       	rjmp	.+174    	; 0x1ca2 <vfscanf+0x236>
    1bf4:	3b 35       	cpi	r19, 0x5B	; 91
    1bf6:	59 f4       	brne	.+22     	; 0x1c0e <vfscanf+0x1a2>
    1bf8:	92 01       	movw	r18, r4
    1bfa:	a6 01       	movw	r20, r12
    1bfc:	67 2d       	mov	r22, r7
    1bfe:	c8 01       	movw	r24, r16
    1c00:	0e 94 8e 0c 	call	0x191c	; 0x191c <conv_brk>
    1c04:	2c 01       	movw	r4, r24
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <vfscanf+0x1a0>
    1c0a:	4b c0       	rjmp	.+150    	; 0x1ca2 <vfscanf+0x236>
    1c0c:	45 c0       	rjmp	.+138    	; 0x1c98 <vfscanf+0x22c>
    1c0e:	c8 01       	movw	r24, r16
    1c10:	39 83       	std	Y+1, r19	; 0x01
    1c12:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <skip_spaces>
    1c16:	39 81       	ldd	r19, Y+1	; 0x01
    1c18:	97 fd       	sbrc	r25, 7
    1c1a:	47 c0       	rjmp	.+142    	; 0x1caa <vfscanf+0x23e>
    1c1c:	3f 36       	cpi	r19, 0x6F	; 111
    1c1e:	69 f1       	breq	.+90     	; 0x1c7a <vfscanf+0x20e>
    1c20:	28 f4       	brcc	.+10     	; 0x1c2c <vfscanf+0x1c0>
    1c22:	34 36       	cpi	r19, 0x64	; 100
    1c24:	31 f1       	breq	.+76     	; 0x1c72 <vfscanf+0x206>
    1c26:	39 36       	cpi	r19, 0x69	; 105
    1c28:	79 f1       	breq	.+94     	; 0x1c88 <vfscanf+0x21c>
    1c2a:	2b c0       	rjmp	.+86     	; 0x1c82 <vfscanf+0x216>
    1c2c:	33 37       	cpi	r19, 0x73	; 115
    1c2e:	69 f0       	breq	.+26     	; 0x1c4a <vfscanf+0x1de>
    1c30:	35 37       	cpi	r19, 0x75	; 117
    1c32:	f9 f0       	breq	.+62     	; 0x1c72 <vfscanf+0x206>
    1c34:	26 c0       	rjmp	.+76     	; 0x1c82 <vfscanf+0x216>
    1c36:	c1 14       	cp	r12, r1
    1c38:	d1 04       	cpc	r13, r1
    1c3a:	29 f0       	breq	.+10     	; 0x1c46 <vfscanf+0x1da>
    1c3c:	f6 01       	movw	r30, r12
    1c3e:	80 82       	st	Z, r8
    1c40:	c6 01       	movw	r24, r12
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	6c 01       	movw	r12, r24
    1c46:	7a 94       	dec	r7
    1c48:	71 f0       	breq	.+28     	; 0x1c66 <vfscanf+0x1fa>
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <fgetc>
    1c50:	4c 01       	movw	r8, r24
    1c52:	97 fd       	sbrc	r25, 7
    1c54:	08 c0       	rjmp	.+16     	; 0x1c66 <vfscanf+0x1fa>
    1c56:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <isspace>
    1c5a:	89 2b       	or	r24, r25
    1c5c:	61 f3       	breq	.-40     	; 0x1c36 <vfscanf+0x1ca>
    1c5e:	b8 01       	movw	r22, r16
    1c60:	c4 01       	movw	r24, r8
    1c62:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <ungetc>
    1c66:	c1 14       	cp	r12, r1
    1c68:	d1 04       	cpc	r13, r1
    1c6a:	d9 f0       	breq	.+54     	; 0x1ca2 <vfscanf+0x236>
    1c6c:	f6 01       	movw	r30, r12
    1c6e:	10 82       	st	Z, r1
    1c70:	18 c0       	rjmp	.+48     	; 0x1ca2 <vfscanf+0x236>
    1c72:	fb 2d       	mov	r31, r11
    1c74:	f0 62       	ori	r31, 0x20	; 32
    1c76:	bf 2e       	mov	r11, r31
    1c78:	07 c0       	rjmp	.+14     	; 0x1c88 <vfscanf+0x21c>
    1c7a:	8b 2d       	mov	r24, r11
    1c7c:	80 61       	ori	r24, 0x10	; 16
    1c7e:	b8 2e       	mov	r11, r24
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <vfscanf+0x21c>
    1c82:	9b 2d       	mov	r25, r11
    1c84:	90 64       	ori	r25, 0x40	; 64
    1c86:	b9 2e       	mov	r11, r25
    1c88:	2b 2d       	mov	r18, r11
    1c8a:	a6 01       	movw	r20, r12
    1c8c:	67 2d       	mov	r22, r7
    1c8e:	c8 01       	movw	r24, r16
    1c90:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <conv_int>
    1c94:	81 11       	cpse	r24, r1
    1c96:	05 c0       	rjmp	.+10     	; 0x1ca2 <vfscanf+0x236>
    1c98:	f8 01       	movw	r30, r16
    1c9a:	83 81       	ldd	r24, Z+3	; 0x03
    1c9c:	80 73       	andi	r24, 0x30	; 48
    1c9e:	29 f4       	brne	.+10     	; 0x1caa <vfscanf+0x23e>
    1ca0:	06 c0       	rjmp	.+12     	; 0x1cae <vfscanf+0x242>
    1ca2:	b0 fc       	sbrc	r11, 0
    1ca4:	fc ce       	rjmp	.-520    	; 0x1a9e <vfscanf+0x32>
    1ca6:	a3 94       	inc	r10
    1ca8:	fa ce       	rjmp	.-524    	; 0x1a9e <vfscanf+0x32>
    1caa:	aa 20       	and	r10, r10
    1cac:	19 f0       	breq	.+6      	; 0x1cb4 <vfscanf+0x248>
    1cae:	8a 2d       	mov	r24, r10
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <vfscanf+0x24c>
    1cb4:	8f ef       	ldi	r24, 0xFF	; 255
    1cb6:	9f ef       	ldi	r25, 0xFF	; 255
    1cb8:	0f 90       	pop	r0
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	df 90       	pop	r13
    1cc8:	cf 90       	pop	r12
    1cca:	bf 90       	pop	r11
    1ccc:	af 90       	pop	r10
    1cce:	9f 90       	pop	r9
    1cd0:	8f 90       	pop	r8
    1cd2:	7f 90       	pop	r7
    1cd4:	5f 90       	pop	r5
    1cd6:	4f 90       	pop	r4
    1cd8:	08 95       	ret

00001cda <isspace>:
    1cda:	91 11       	cpse	r25, r1
    1cdc:	0e c1       	rjmp	.+540    	; 0x1efa <__ctype_isfalse>
    1cde:	80 32       	cpi	r24, 0x20	; 32
    1ce0:	19 f0       	breq	.+6      	; 0x1ce8 <isspace+0xe>
    1ce2:	89 50       	subi	r24, 0x09	; 9
    1ce4:	85 50       	subi	r24, 0x05	; 5
    1ce6:	d0 f7       	brcc	.-12     	; 0x1cdc <isspace+0x2>
    1ce8:	08 95       	ret

00001cea <strchr_P>:
    1cea:	fc 01       	movw	r30, r24
    1cec:	05 90       	lpm	r0, Z+
    1cee:	06 16       	cp	r0, r22
    1cf0:	21 f0       	breq	.+8      	; 0x1cfa <strchr_P+0x10>
    1cf2:	00 20       	and	r0, r0
    1cf4:	d9 f7       	brne	.-10     	; 0x1cec <strchr_P+0x2>
    1cf6:	c0 01       	movw	r24, r0
    1cf8:	08 95       	ret
    1cfa:	31 97       	sbiw	r30, 0x01	; 1
    1cfc:	cf 01       	movw	r24, r30
    1cfe:	08 95       	ret

00001d00 <strnlen_P>:
    1d00:	fc 01       	movw	r30, r24
    1d02:	05 90       	lpm	r0, Z+
    1d04:	61 50       	subi	r22, 0x01	; 1
    1d06:	70 40       	sbci	r23, 0x00	; 0
    1d08:	01 10       	cpse	r0, r1
    1d0a:	d8 f7       	brcc	.-10     	; 0x1d02 <strnlen_P+0x2>
    1d0c:	80 95       	com	r24
    1d0e:	90 95       	com	r25
    1d10:	8e 0f       	add	r24, r30
    1d12:	9f 1f       	adc	r25, r31
    1d14:	08 95       	ret

00001d16 <strnlen>:
    1d16:	fc 01       	movw	r30, r24
    1d18:	61 50       	subi	r22, 0x01	; 1
    1d1a:	70 40       	sbci	r23, 0x00	; 0
    1d1c:	01 90       	ld	r0, Z+
    1d1e:	01 10       	cpse	r0, r1
    1d20:	d8 f7       	brcc	.-10     	; 0x1d18 <strnlen+0x2>
    1d22:	80 95       	com	r24
    1d24:	90 95       	com	r25
    1d26:	8e 0f       	add	r24, r30
    1d28:	9f 1f       	adc	r25, r31
    1d2a:	08 95       	ret

00001d2c <fgetc>:
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	ec 01       	movw	r28, r24
    1d32:	2b 81       	ldd	r18, Y+3	; 0x03
    1d34:	20 ff       	sbrs	r18, 0
    1d36:	33 c0       	rjmp	.+102    	; 0x1d9e <fgetc+0x72>
    1d38:	26 ff       	sbrs	r18, 6
    1d3a:	0a c0       	rjmp	.+20     	; 0x1d50 <fgetc+0x24>
    1d3c:	2f 7b       	andi	r18, 0xBF	; 191
    1d3e:	2b 83       	std	Y+3, r18	; 0x03
    1d40:	8e 81       	ldd	r24, Y+6	; 0x06
    1d42:	9f 81       	ldd	r25, Y+7	; 0x07
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	9f 83       	std	Y+7, r25	; 0x07
    1d48:	8e 83       	std	Y+6, r24	; 0x06
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	29 c0       	rjmp	.+82     	; 0x1da2 <fgetc+0x76>
    1d50:	22 ff       	sbrs	r18, 2
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <fgetc+0x46>
    1d54:	e8 81       	ld	r30, Y
    1d56:	f9 81       	ldd	r31, Y+1	; 0x01
    1d58:	80 81       	ld	r24, Z
    1d5a:	99 27       	eor	r25, r25
    1d5c:	87 fd       	sbrc	r24, 7
    1d5e:	90 95       	com	r25
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	19 f4       	brne	.+6      	; 0x1d6a <fgetc+0x3e>
    1d64:	20 62       	ori	r18, 0x20	; 32
    1d66:	2b 83       	std	Y+3, r18	; 0x03
    1d68:	1a c0       	rjmp	.+52     	; 0x1d9e <fgetc+0x72>
    1d6a:	31 96       	adiw	r30, 0x01	; 1
    1d6c:	f9 83       	std	Y+1, r31	; 0x01
    1d6e:	e8 83       	st	Y, r30
    1d70:	0e c0       	rjmp	.+28     	; 0x1d8e <fgetc+0x62>
    1d72:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d74:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d76:	09 95       	icall
    1d78:	97 ff       	sbrs	r25, 7
    1d7a:	09 c0       	rjmp	.+18     	; 0x1d8e <fgetc+0x62>
    1d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	11 f4       	brne	.+4      	; 0x1d86 <fgetc+0x5a>
    1d82:	80 e1       	ldi	r24, 0x10	; 16
    1d84:	01 c0       	rjmp	.+2      	; 0x1d88 <fgetc+0x5c>
    1d86:	80 e2       	ldi	r24, 0x20	; 32
    1d88:	82 2b       	or	r24, r18
    1d8a:	8b 83       	std	Y+3, r24	; 0x03
    1d8c:	08 c0       	rjmp	.+16     	; 0x1d9e <fgetc+0x72>
    1d8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d90:	3f 81       	ldd	r19, Y+7	; 0x07
    1d92:	2f 5f       	subi	r18, 0xFF	; 255
    1d94:	3f 4f       	sbci	r19, 0xFF	; 255
    1d96:	3f 83       	std	Y+7, r19	; 0x07
    1d98:	2e 83       	std	Y+6, r18	; 0x06
    1d9a:	99 27       	eor	r25, r25
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <fgetc+0x76>
    1d9e:	8f ef       	ldi	r24, 0xFF	; 255
    1da0:	9f ef       	ldi	r25, 0xFF	; 255
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <fputc>:
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	18 2f       	mov	r17, r24
    1db2:	09 2f       	mov	r16, r25
    1db4:	eb 01       	movw	r28, r22
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	81 fd       	sbrc	r24, 1
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <fputc+0x1a>
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	20 c0       	rjmp	.+64     	; 0x1e02 <fputc+0x5a>
    1dc2:	82 ff       	sbrs	r24, 2
    1dc4:	10 c0       	rjmp	.+32     	; 0x1de6 <fputc+0x3e>
    1dc6:	4e 81       	ldd	r20, Y+6	; 0x06
    1dc8:	5f 81       	ldd	r21, Y+7	; 0x07
    1dca:	2c 81       	ldd	r18, Y+4	; 0x04
    1dcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dce:	42 17       	cp	r20, r18
    1dd0:	53 07       	cpc	r21, r19
    1dd2:	7c f4       	brge	.+30     	; 0x1df2 <fputc+0x4a>
    1dd4:	e8 81       	ld	r30, Y
    1dd6:	f9 81       	ldd	r31, Y+1	; 0x01
    1dd8:	9f 01       	movw	r18, r30
    1dda:	2f 5f       	subi	r18, 0xFF	; 255
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	39 83       	std	Y+1, r19	; 0x01
    1de0:	28 83       	st	Y, r18
    1de2:	10 83       	st	Z, r17
    1de4:	06 c0       	rjmp	.+12     	; 0x1df2 <fputc+0x4a>
    1de6:	e8 85       	ldd	r30, Y+8	; 0x08
    1de8:	f9 85       	ldd	r31, Y+9	; 0x09
    1dea:	81 2f       	mov	r24, r17
    1dec:	09 95       	icall
    1dee:	89 2b       	or	r24, r25
    1df0:	29 f7       	brne	.-54     	; 0x1dbc <fputc+0x14>
    1df2:	2e 81       	ldd	r18, Y+6	; 0x06
    1df4:	3f 81       	ldd	r19, Y+7	; 0x07
    1df6:	2f 5f       	subi	r18, 0xFF	; 255
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	3f 83       	std	Y+7, r19	; 0x07
    1dfc:	2e 83       	std	Y+6, r18	; 0x06
    1dfe:	81 2f       	mov	r24, r17
    1e00:	90 2f       	mov	r25, r16
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	08 95       	ret

00001e0c <ungetc>:
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	23 81       	ldd	r18, Z+3	; 0x03
    1e10:	20 ff       	sbrs	r18, 0
    1e12:	12 c0       	rjmp	.+36     	; 0x1e38 <ungetc+0x2c>
    1e14:	26 fd       	sbrc	r18, 6
    1e16:	10 c0       	rjmp	.+32     	; 0x1e38 <ungetc+0x2c>
    1e18:	8f 3f       	cpi	r24, 0xFF	; 255
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	93 07       	cpc	r25, r19
    1e1e:	61 f0       	breq	.+24     	; 0x1e38 <ungetc+0x2c>
    1e20:	82 83       	std	Z+2, r24	; 0x02
    1e22:	2f 7d       	andi	r18, 0xDF	; 223
    1e24:	20 64       	ori	r18, 0x40	; 64
    1e26:	23 83       	std	Z+3, r18	; 0x03
    1e28:	26 81       	ldd	r18, Z+6	; 0x06
    1e2a:	37 81       	ldd	r19, Z+7	; 0x07
    1e2c:	21 50       	subi	r18, 0x01	; 1
    1e2e:	31 09       	sbc	r19, r1
    1e30:	37 83       	std	Z+7, r19	; 0x07
    1e32:	26 83       	std	Z+6, r18	; 0x06
    1e34:	99 27       	eor	r25, r25
    1e36:	08 95       	ret
    1e38:	8f ef       	ldi	r24, 0xFF	; 255
    1e3a:	9f ef       	ldi	r25, 0xFF	; 255
    1e3c:	08 95       	ret

00001e3e <__ultoa_invert>:
    1e3e:	fa 01       	movw	r30, r20
    1e40:	aa 27       	eor	r26, r26
    1e42:	28 30       	cpi	r18, 0x08	; 8
    1e44:	51 f1       	breq	.+84     	; 0x1e9a <__ultoa_invert+0x5c>
    1e46:	20 31       	cpi	r18, 0x10	; 16
    1e48:	81 f1       	breq	.+96     	; 0x1eaa <__ultoa_invert+0x6c>
    1e4a:	e8 94       	clt
    1e4c:	6f 93       	push	r22
    1e4e:	6e 7f       	andi	r22, 0xFE	; 254
    1e50:	6e 5f       	subi	r22, 0xFE	; 254
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	8f 4f       	sbci	r24, 0xFF	; 255
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	af 4f       	sbci	r26, 0xFF	; 255
    1e5a:	b1 e0       	ldi	r27, 0x01	; 1
    1e5c:	3e d0       	rcall	.+124    	; 0x1eda <__ultoa_invert+0x9c>
    1e5e:	b4 e0       	ldi	r27, 0x04	; 4
    1e60:	3c d0       	rcall	.+120    	; 0x1eda <__ultoa_invert+0x9c>
    1e62:	67 0f       	add	r22, r23
    1e64:	78 1f       	adc	r23, r24
    1e66:	89 1f       	adc	r24, r25
    1e68:	9a 1f       	adc	r25, r26
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	68 0f       	add	r22, r24
    1e6e:	79 1f       	adc	r23, r25
    1e70:	8a 1f       	adc	r24, r26
    1e72:	91 1d       	adc	r25, r1
    1e74:	a1 1d       	adc	r26, r1
    1e76:	6a 0f       	add	r22, r26
    1e78:	71 1d       	adc	r23, r1
    1e7a:	81 1d       	adc	r24, r1
    1e7c:	91 1d       	adc	r25, r1
    1e7e:	a1 1d       	adc	r26, r1
    1e80:	20 d0       	rcall	.+64     	; 0x1ec2 <__ultoa_invert+0x84>
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__ultoa_invert+0x48>
    1e84:	68 94       	set
    1e86:	3f 91       	pop	r19
    1e88:	2a e0       	ldi	r18, 0x0A	; 10
    1e8a:	26 9f       	mul	r18, r22
    1e8c:	11 24       	eor	r1, r1
    1e8e:	30 19       	sub	r19, r0
    1e90:	30 5d       	subi	r19, 0xD0	; 208
    1e92:	31 93       	st	Z+, r19
    1e94:	de f6       	brtc	.-74     	; 0x1e4c <__ultoa_invert+0xe>
    1e96:	cf 01       	movw	r24, r30
    1e98:	08 95       	ret
    1e9a:	46 2f       	mov	r20, r22
    1e9c:	47 70       	andi	r20, 0x07	; 7
    1e9e:	40 5d       	subi	r20, 0xD0	; 208
    1ea0:	41 93       	st	Z+, r20
    1ea2:	b3 e0       	ldi	r27, 0x03	; 3
    1ea4:	0f d0       	rcall	.+30     	; 0x1ec4 <__ultoa_invert+0x86>
    1ea6:	c9 f7       	brne	.-14     	; 0x1e9a <__ultoa_invert+0x5c>
    1ea8:	f6 cf       	rjmp	.-20     	; 0x1e96 <__ultoa_invert+0x58>
    1eaa:	46 2f       	mov	r20, r22
    1eac:	4f 70       	andi	r20, 0x0F	; 15
    1eae:	40 5d       	subi	r20, 0xD0	; 208
    1eb0:	4a 33       	cpi	r20, 0x3A	; 58
    1eb2:	18 f0       	brcs	.+6      	; 0x1eba <__ultoa_invert+0x7c>
    1eb4:	49 5d       	subi	r20, 0xD9	; 217
    1eb6:	31 fd       	sbrc	r19, 1
    1eb8:	40 52       	subi	r20, 0x20	; 32
    1eba:	41 93       	st	Z+, r20
    1ebc:	02 d0       	rcall	.+4      	; 0x1ec2 <__ultoa_invert+0x84>
    1ebe:	a9 f7       	brne	.-22     	; 0x1eaa <__ultoa_invert+0x6c>
    1ec0:	ea cf       	rjmp	.-44     	; 0x1e96 <__ultoa_invert+0x58>
    1ec2:	b4 e0       	ldi	r27, 0x04	; 4
    1ec4:	a6 95       	lsr	r26
    1ec6:	97 95       	ror	r25
    1ec8:	87 95       	ror	r24
    1eca:	77 95       	ror	r23
    1ecc:	67 95       	ror	r22
    1ece:	ba 95       	dec	r27
    1ed0:	c9 f7       	brne	.-14     	; 0x1ec4 <__ultoa_invert+0x86>
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	61 05       	cpc	r22, r1
    1ed6:	71 05       	cpc	r23, r1
    1ed8:	08 95       	ret
    1eda:	9b 01       	movw	r18, r22
    1edc:	ac 01       	movw	r20, r24
    1ede:	0a 2e       	mov	r0, r26
    1ee0:	06 94       	lsr	r0
    1ee2:	57 95       	ror	r21
    1ee4:	47 95       	ror	r20
    1ee6:	37 95       	ror	r19
    1ee8:	27 95       	ror	r18
    1eea:	ba 95       	dec	r27
    1eec:	c9 f7       	brne	.-14     	; 0x1ee0 <__ultoa_invert+0xa2>
    1eee:	62 0f       	add	r22, r18
    1ef0:	73 1f       	adc	r23, r19
    1ef2:	84 1f       	adc	r24, r20
    1ef4:	95 1f       	adc	r25, r21
    1ef6:	a0 1d       	adc	r26, r0
    1ef8:	08 95       	ret

00001efa <__ctype_isfalse>:
    1efa:	99 27       	eor	r25, r25
    1efc:	88 27       	eor	r24, r24

00001efe <__ctype_istrue>:
    1efe:	08 95       	ret

00001f00 <__prologue_saves__>:
    1f00:	2f 92       	push	r2
    1f02:	3f 92       	push	r3
    1f04:	4f 92       	push	r4
    1f06:	5f 92       	push	r5
    1f08:	6f 92       	push	r6
    1f0a:	7f 92       	push	r7
    1f0c:	8f 92       	push	r8
    1f0e:	9f 92       	push	r9
    1f10:	af 92       	push	r10
    1f12:	bf 92       	push	r11
    1f14:	cf 92       	push	r12
    1f16:	df 92       	push	r13
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	ca 1b       	sub	r28, r26
    1f2a:	db 0b       	sbc	r29, r27
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	09 94       	ijmp

00001f38 <__epilogue_restores__>:
    1f38:	2a 88       	ldd	r2, Y+18	; 0x12
    1f3a:	39 88       	ldd	r3, Y+17	; 0x11
    1f3c:	48 88       	ldd	r4, Y+16	; 0x10
    1f3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f4e:	df 80       	ldd	r13, Y+7	; 0x07
    1f50:	ee 80       	ldd	r14, Y+6	; 0x06
    1f52:	fd 80       	ldd	r15, Y+5	; 0x05
    1f54:	0c 81       	ldd	r16, Y+4	; 0x04
    1f56:	1b 81       	ldd	r17, Y+3	; 0x03
    1f58:	aa 81       	ldd	r26, Y+2	; 0x02
    1f5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f5c:	ce 0f       	add	r28, r30
    1f5e:	d1 1d       	adc	r29, r1
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	ed 01       	movw	r28, r26
    1f6c:	08 95       	ret

00001f6e <_exit>:
    1f6e:	f8 94       	cli

00001f70 <__stop_program>:
    1f70:	ff cf       	rjmp	.-2      	; 0x1f70 <__stop_program>
